
STM32F4-WavePlayer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f580  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  0800f718  0800f718  0001f718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc40  0800fc40  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fc40  0800fc40  0001fc40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fc48  0800fc48  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fc48  0800fc48  0001fc48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fc4c  0800fc4c  0001fc4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0800fc50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002508  200000b8  0800fd08  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200025c0  0800fd08  000225c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001df02  00000000  00000000  0002012b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000557f  00000000  00000000  0003e02d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a0  00000000  00000000  000435b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001057  00000000  00000000  00044b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c63e  00000000  00000000  00045ba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000237f8  00000000  00000000  000621e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f7ac  00000000  00000000  000859dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a58  00000000  00000000  0011518c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0011abe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000b8 	.word	0x200000b8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800f700 	.word	0x0800f700

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000bc 	.word	0x200000bc
 80001d4:	0800f700 	.word	0x0800f700

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <AUDIO_OUT_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 80004d4:	b590      	push	{r4, r7, lr}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	603a      	str	r2, [r7, #0]
 80004de:	80fb      	strh	r3, [r7, #6]
 80004e0:	460b      	mov	r3, r1
 80004e2:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 80004e4:	2300      	movs	r3, #0
 80004e6:	73fb      	strb	r3, [r7, #15]
  
  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 80004e8:	2200      	movs	r2, #0
 80004ea:	6839      	ldr	r1, [r7, #0]
 80004ec:	481c      	ldr	r0, [pc, #112]	; (8000560 <AUDIO_OUT_Init+0x8c>)
 80004ee:	f000 f8f9 	bl	80006e4 <AUDIO_OUT_ClockConfig>
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  hAudioOutI2s.Instance = I2S3;
 80004f2:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <AUDIO_OUT_Init+0x8c>)
 80004f4:	4a1b      	ldr	r2, [pc, #108]	; (8000564 <AUDIO_OUT_Init+0x90>)
 80004f6:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 80004f8:	4819      	ldr	r0, [pc, #100]	; (8000560 <AUDIO_OUT_Init+0x8c>)
 80004fa:	f005 fe59 	bl	80061b0 <HAL_I2S_GetState>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d103      	bne.n	800050c <AUDIO_OUT_Init+0x38>
  {
    /* Init the I2S MSP: this __weak function can be redefined by the application*/
    AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 8000504:	2100      	movs	r1, #0
 8000506:	4816      	ldr	r0, [pc, #88]	; (8000560 <AUDIO_OUT_Init+0x8c>)
 8000508:	f000 f94a 	bl	80007a0 <AUDIO_OUT_MspInit>
  }

  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  /* Configure the I2S peripheral */
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 800050c:	6838      	ldr	r0, [r7, #0]
 800050e:	f000 fa0f 	bl	8000930 <I2S3_Init>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <AUDIO_OUT_Init+0x48>
  {
    ret = AUDIO_ERROR;
 8000518:	2301      	movs	r3, #1
 800051a:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 800051c:	7bfb      	ldrb	r3, [r7, #15]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d10e      	bne.n	8000540 <AUDIO_OUT_Init+0x6c>
  {
    /* Retieve audio codec identifier */
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 8000522:	4b11      	ldr	r3, [pc, #68]	; (8000568 <AUDIO_OUT_Init+0x94>)
 8000524:	689b      	ldr	r3, [r3, #8]
 8000526:	2094      	movs	r0, #148	; 0x94
 8000528:	4798      	blx	r3
 800052a:	4603      	mov	r3, r0
 800052c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8000530:	2be0      	cmp	r3, #224	; 0xe0
 8000532:	d103      	bne.n	800053c <AUDIO_OUT_Init+0x68>
    {  
      /* Initialize the audio driver structure */
      pAudioDrv = &cs43l22_drv; 
 8000534:	4b0d      	ldr	r3, [pc, #52]	; (800056c <AUDIO_OUT_Init+0x98>)
 8000536:	4a0c      	ldr	r2, [pc, #48]	; (8000568 <AUDIO_OUT_Init+0x94>)
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	e001      	b.n	8000540 <AUDIO_OUT_Init+0x6c>
    }
    else
    {
      ret = AUDIO_ERROR;
 800053c:	2301      	movs	r3, #1
 800053e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  if(ret == AUDIO_OK)
 8000540:	7bfb      	ldrb	r3, [r7, #15]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d107      	bne.n	8000556 <AUDIO_OUT_Init+0x82>
  {
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <AUDIO_OUT_Init+0x98>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	681c      	ldr	r4, [r3, #0]
 800054c:	797a      	ldrb	r2, [r7, #5]
 800054e:	88f9      	ldrh	r1, [r7, #6]
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	2094      	movs	r0, #148	; 0x94
 8000554:	47a0      	blx	r4
  }
  
  return ret;
 8000556:	7bfb      	ldrb	r3, [r7, #15]
}
 8000558:	4618      	mov	r0, r3
 800055a:	3714      	adds	r7, #20
 800055c:	46bd      	mov	sp, r7
 800055e:	bd90      	pop	{r4, r7, pc}
 8000560:	200000d8 	.word	0x200000d8
 8000564:	40003c00 	.word	0x40003c00
 8000568:	20000004 	.word	0x20000004
 800056c:	200000d4 	.word	0x200000d4

08000570 <AUDIO_OUT_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 800057a:	4b10      	ldr	r3, [pc, #64]	; (80005bc <AUDIO_OUT_Play+0x4c>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	68db      	ldr	r3, [r3, #12]
 8000580:	683a      	ldr	r2, [r7, #0]
 8000582:	b292      	uxth	r2, r2
 8000584:	6879      	ldr	r1, [r7, #4]
 8000586:	2094      	movs	r0, #148	; 0x94
 8000588:	4798      	blx	r3
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <AUDIO_OUT_Play+0x24>
  {
    return AUDIO_ERROR;
 8000590:	2301      	movs	r3, #1
 8000592:	e00f      	b.n	80005b4 <AUDIO_OUT_Play+0x44>
  }
  else 
  {
    /* Update the Media layer and enable it for play */  
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800059a:	d203      	bcs.n	80005a4 <AUDIO_OUT_Play+0x34>
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	085b      	lsrs	r3, r3, #1
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	e001      	b.n	80005a8 <AUDIO_OUT_Play+0x38>
 80005a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005a8:	461a      	mov	r2, r3
 80005aa:	6879      	ldr	r1, [r7, #4]
 80005ac:	4804      	ldr	r0, [pc, #16]	; (80005c0 <AUDIO_OUT_Play+0x50>)
 80005ae:	f005 fa7d 	bl	8005aac <HAL_I2S_Transmit_DMA>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80005b2:	2300      	movs	r3, #0
  }
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	200000d4 	.word	0x200000d4
 80005c0:	200000d8 	.word	0x200000d8

080005c4 <AUDIO_OUT_Pause>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Pause(void)
{    
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <AUDIO_OUT_Pause+0x24>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	691b      	ldr	r3, [r3, #16]
 80005ce:	2094      	movs	r0, #148	; 0x94
 80005d0:	4798      	blx	r3
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <AUDIO_OUT_Pause+0x18>
  {
    return AUDIO_ERROR;
 80005d8:	2301      	movs	r3, #1
 80005da:	e003      	b.n	80005e4 <AUDIO_OUT_Pause+0x20>
  }
  else
  {
    /* Call the Media layer pause function */
    HAL_I2S_DMAPause(&hAudioOutI2s);
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <AUDIO_OUT_Pause+0x28>)
 80005de:	f005 fb0d 	bl	8005bfc <HAL_I2S_DMAPause>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80005e2:	2300      	movs	r3, #0
  }
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200000d4 	.word	0x200000d4
 80005ec:	200000d8 	.word	0x200000d8

080005f0 <AUDIO_OUT_Resume>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Resume(void)
{    
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <AUDIO_OUT_Resume+0x24>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	2094      	movs	r0, #148	; 0x94
 80005fc:	4798      	blx	r3
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <AUDIO_OUT_Resume+0x18>
  {
    return AUDIO_ERROR;
 8000604:	2301      	movs	r3, #1
 8000606:	e003      	b.n	8000610 <AUDIO_OUT_Resume+0x20>
  }
  else
  {
    /* Call the Media layer resume function */
    HAL_I2S_DMAResume(&hAudioOutI2s);
 8000608:	4803      	ldr	r0, [pc, #12]	; (8000618 <AUDIO_OUT_Resume+0x28>)
 800060a:	f005 fb59 	bl	8005cc0 <HAL_I2S_DMAResume>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800060e:	2300      	movs	r3, #0
  }
}
 8000610:	4618      	mov	r0, r3
 8000612:	bd80      	pop	{r7, pc}
 8000614:	200000d4 	.word	0x200000d4
 8000618:	200000d8 	.word	0x200000d8

0800061c <AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
  *                            Then need to reconfigure the Codec after power on.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Stop(uint32_t Option)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  /* Call DMA Stop to disable DMA stream before stopping codec */
  HAL_I2S_DMAStop(&hAudioOutI2s);
 8000624:	480e      	ldr	r0, [pc, #56]	; (8000660 <AUDIO_OUT_Stop+0x44>)
 8000626:	f005 fbdf 	bl	8005de8 <HAL_I2S_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <AUDIO_OUT_Stop+0x48>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	6879      	ldr	r1, [r7, #4]
 8000632:	2094      	movs	r0, #148	; 0x94
 8000634:	4798      	blx	r3
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <AUDIO_OUT_Stop+0x24>
  {
    return AUDIO_ERROR;
 800063c:	2301      	movs	r3, #1
 800063e:	e00b      	b.n	8000658 <AUDIO_OUT_Stop+0x3c>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d107      	bne.n	8000656 <AUDIO_OUT_Stop+0x3a>
    { 
      /* Wait at least 1ms */
      HAL_Delay(1);
 8000646:	2001      	movs	r0, #1
 8000648:	f001 fcda 	bl	8002000 <HAL_Delay>
      
      /* Reset the pin */
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2110      	movs	r1, #16
 8000650:	4805      	ldr	r0, [pc, #20]	; (8000668 <AUDIO_OUT_Stop+0x4c>)
 8000652:	f002 fcb1 	bl	8002fb8 <HAL_GPIO_WritePin>
    }
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000656:	2300      	movs	r3, #0
  }
}
 8000658:	4618      	mov	r0, r3
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	200000d8 	.word	0x200000d8
 8000664:	200000d4 	.word	0x200000d4
 8000668:	40020c00 	.word	0x40020c00

0800066c <AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for 
  *         Mute and 100 for Max volume level).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_SetVolume(uint8_t Volume)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if(pAudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <AUDIO_OUT_SetVolume+0x2c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	6a1b      	ldr	r3, [r3, #32]
 800067c:	79fa      	ldrb	r2, [r7, #7]
 800067e:	4611      	mov	r1, r2
 8000680:	2094      	movs	r0, #148	; 0x94
 8000682:	4798      	blx	r3
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <AUDIO_OUT_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 800068a:	2301      	movs	r3, #1
 800068c:	e000      	b.n	8000690 <AUDIO_OUT_SetVolume+0x24>
  }
  else
  {
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800068e:	2300      	movs	r3, #0
  }
}
 8000690:	4618      	mov	r0, r3
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200000d4 	.word	0x200000d4

0800069c <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a04      	ldr	r2, [pc, #16]	; (80006bc <HAL_I2S_TxCpltCallback+0x20>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d101      	bne.n	80006b2 <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    AUDIO_OUT_TransferComplete_CallBack();
 80006ae:	f001 fbe3 	bl	8001e78 <AUDIO_OUT_TransferComplete_CallBack>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40003c00 	.word	0x40003c00

080006c0 <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <HAL_I2S_TxHalfCpltCallback+0x20>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d101      	bne.n	80006d6 <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    AUDIO_OUT_HalfTransfer_CallBack();
 80006d2:	f001 fbe5 	bl	8001ea0 <AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40003c00 	.word	0x40003c00

080006e4 <AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{ 
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08c      	sub	sp, #48	; 0x30
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 80006f0:	2300      	movs	r3, #0
 80006f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80006f6:	23ff      	movs	r3, #255	; 0xff
 80006f8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  
  for(index = 0; index < 8; index++)
 80006fc:	2300      	movs	r3, #0
 80006fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000702:	e010      	b.n	8000726 <AUDIO_OUT_ClockConfig+0x42>
  {
    if(I2SFreq[index] == AudioFreq)
 8000704:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000708:	4a22      	ldr	r2, [pc, #136]	; (8000794 <AUDIO_OUT_ClockConfig+0xb0>)
 800070a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800070e:	68ba      	ldr	r2, [r7, #8]
 8000710:	429a      	cmp	r2, r3
 8000712:	d103      	bne.n	800071c <AUDIO_OUT_ClockConfig+0x38>
    {
      freqindex = index;
 8000714:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000718:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  for(index = 0; index < 8; index++)
 800071c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000720:	3301      	adds	r3, #1
 8000722:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000726:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800072a:	2b07      	cmp	r3, #7
 800072c:	d9ea      	bls.n	8000704 <AUDIO_OUT_ClockConfig+0x20>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	4618      	mov	r0, r3
 8000734:	f006 fe8e 	bl	8007454 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 8000738:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800073c:	f003 0307 	and.w	r3, r3, #7
 8000740:	2b00      	cmp	r3, #0
 8000742:	d115      	bne.n	8000770 <AUDIO_OUT_ClockConfig+0x8c>
  {
    /* I2S clock config 
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000744:	2301      	movs	r3, #1
 8000746:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 8000748:	2308      	movs	r3, #8
 800074a:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 800074c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <AUDIO_OUT_ClockConfig+0xb4>)
 8000752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000756:	61fb      	str	r3, [r7, #28]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8000758:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800075c:	4a0f      	ldr	r2, [pc, #60]	; (800079c <AUDIO_OUT_ClockConfig+0xb8>)
 800075e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000762:	623b      	str	r3, [r7, #32]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4618      	mov	r0, r3
 800076a:	f006 fd83 	bl	8007274 <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 800076e:	e00d      	b.n	800078c <AUDIO_OUT_ClockConfig+0xa8>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000770:	2301      	movs	r3, #1
 8000772:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 8000774:	2308      	movs	r3, #8
 8000776:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8000778:	f44f 7381 	mov.w	r3, #258	; 0x102
 800077c:	61fb      	str	r3, [r7, #28]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 800077e:	2303      	movs	r3, #3
 8000780:	623b      	str	r3, [r7, #32]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	4618      	mov	r0, r3
 8000788:	f006 fd74 	bl	8007274 <HAL_RCCEx_PeriphCLKConfig>
}
 800078c:	bf00      	nop
 800078e:	3730      	adds	r7, #48	; 0x30
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	0800f76c 	.word	0x0800f76c
 8000798:	0800f78c 	.word	0x0800f78c
 800079c:	0800f7ac 	.word	0x0800f7ac

080007a0 <AUDIO_OUT_MspInit>:
  * @brief  AUDIO OUT I2S MSP Init.
  * @param  hi2s: might be required to set audio peripheral predivider if any.
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08c      	sub	sp, #48	; 0x30
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sTx;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2S3 clock */
  I2S3_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
 80007ae:	4b56      	ldr	r3, [pc, #344]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	4a55      	ldr	r2, [pc, #340]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007b8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ba:	4b53      	ldr	r3, [pc, #332]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007c2:	61bb      	str	r3, [r7, #24]
 80007c4:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/  
  /* Enable I2S GPIO clocks */
  I2S3_SCK_SD_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	4b4f      	ldr	r3, [pc, #316]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a4e      	ldr	r2, [pc, #312]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b4c      	ldr	r3, [pc, #304]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697b      	ldr	r3, [r7, #20]
  I2S3_WS_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b48      	ldr	r3, [pc, #288]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a47      	ldr	r2, [pc, #284]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b45      	ldr	r3, [pc, #276]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]

  /* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 80007fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 800080c:	2302      	movs	r3, #2
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 8000810:	2306      	movs	r3, #6
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	483c      	ldr	r0, [pc, #240]	; (800090c <AUDIO_OUT_MspInit+0x16c>)
 800081c:	f002 f964 	bl	8002ae8 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 8000820:	2310      	movs	r3, #16
 8000822:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	4839      	ldr	r0, [pc, #228]	; (8000910 <AUDIO_OUT_MspInit+0x170>)
 800082c:	f002 f95c 	bl	8002ae8 <HAL_GPIO_Init>

  /* I2S3 pins configuration: MCK pin */
  I2S3_MCK_CLK_ENABLE();
 8000830:	2300      	movs	r3, #0
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	4b34      	ldr	r3, [pc, #208]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 8000836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000838:	4a33      	ldr	r2, [pc, #204]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 800083a:	f043 0304 	orr.w	r3, r3, #4
 800083e:	6313      	str	r3, [r2, #48]	; 0x30
 8000840:	4b31      	ldr	r3, [pc, #196]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 8000842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000844:	f003 0304 	and.w	r3, r3, #4
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	482d      	ldr	r0, [pc, #180]	; (800090c <AUDIO_OUT_MspInit+0x16c>)
 8000858:	f002 f946 	bl	8002ae8 <HAL_GPIO_Init>

  /* Enable the I2S DMA clock */
  I2S3_DMAx_CLK_ENABLE(); 
 800085c:	2300      	movs	r3, #0
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	4b29      	ldr	r3, [pc, #164]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 8000862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000864:	4a28      	ldr	r2, [pc, #160]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 8000866:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800086a:	6313      	str	r3, [r2, #48]	; 0x30
 800086c:	4b26      	ldr	r3, [pc, #152]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 800086e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == I2S3)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a25      	ldr	r2, [pc, #148]	; (8000914 <AUDIO_OUT_MspInit+0x174>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d136      	bne.n	80008f0 <AUDIO_OUT_MspInit+0x150>
  {
    /* Configure the hdma_i2sTx handle parameters */   
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 8000882:	4b25      	ldr	r3, [pc, #148]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 8000884:	2200      	movs	r2, #0
 8000886:	605a      	str	r2, [r3, #4]
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000888:	4b23      	ldr	r3, [pc, #140]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 800088a:	2240      	movs	r2, #64	; 0x40
 800088c:	609a      	str	r2, [r3, #8]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800088e:	4b22      	ldr	r3, [pc, #136]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 8000894:	4b20      	ldr	r3, [pc, #128]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 8000896:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800089a:	611a      	str	r2, [r3, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 800089c:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 800089e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008a2:	615a      	str	r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 80008a4:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008aa:	619a      	str	r2, [r3, #24]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 80008b2:	4b19      	ldr	r3, [pc, #100]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80008b8:	621a      	str	r2, [r3, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80008ba:	4b17      	ldr	r3, [pc, #92]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008bc:	2204      	movs	r2, #4
 80008be:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80008c0:	4b15      	ldr	r3, [pc, #84]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008c2:	2203      	movs	r2, #3
 80008c4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008d4:	4a11      	ldr	r2, [pc, #68]	; (800091c <AUDIO_OUT_MspInit+0x17c>)
 80008d6:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4a0f      	ldr	r2, [pc, #60]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008dc:	639a      	str	r2, [r3, #56]	; 0x38
 80008de:	4a0e      	ldr	r2, [pc, #56]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sTx);
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008e6:	f001 fd6f 	bl	80023c8 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sTx);
 80008ea:	480b      	ldr	r0, [pc, #44]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008ec:	f001 fcbe 	bl	800226c <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	210e      	movs	r1, #14
 80008f4:	202f      	movs	r0, #47	; 0x2f
 80008f6:	f001 fc82 	bl	80021fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);  
 80008fa:	202f      	movs	r0, #47	; 0x2f
 80008fc:	f001 fc9b 	bl	8002236 <HAL_NVIC_EnableIRQ>
}
 8000900:	bf00      	nop
 8000902:	3730      	adds	r7, #48	; 0x30
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40023800 	.word	0x40023800
 800090c:	40020800 	.word	0x40020800
 8000910:	40020000 	.word	0x40020000
 8000914:	40003c00 	.word	0x40003c00
 8000918:	20000120 	.word	0x20000120
 800091c:	400260b8 	.word	0x400260b8

08000920 <AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void AUDIO_OUT_Error_CallBack(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
	...

08000930 <I2S3_Init>:
/**
  * @brief  Initializes the Audio Codec audio interface (I2S).
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <I2S3_Init+0x68>)
 800093a:	4a18      	ldr	r2, [pc, #96]	; (800099c <I2S3_Init+0x6c>)
 800093c:	601a      	str	r2, [r3, #0]
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 800093e:	4b16      	ldr	r3, [pc, #88]	; (8000998 <I2S3_Init+0x68>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	69da      	ldr	r2, [r3, #28]
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <I2S3_Init+0x68>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800094c:	61da      	str	r2, [r3, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 800094e:	4a12      	ldr	r2, [pc, #72]	; (8000998 <I2S3_Init+0x68>)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6153      	str	r3, [r2, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 8000954:	4b10      	ldr	r3, [pc, #64]	; (8000998 <I2S3_Init+0x68>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <I2S3_Init+0x68>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000960:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <I2S3_Init+0x68>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <I2S3_Init+0x68>)
 8000968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800096c:	611a      	str	r2, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <I2S3_Init+0x68>)
 8000970:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000974:	605a      	str	r2, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <I2S3_Init+0x68>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 800097c:	4806      	ldr	r0, [pc, #24]	; (8000998 <I2S3_Init+0x68>)
 800097e:	f004 ff55 	bl	800582c <HAL_I2S_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <I2S3_Init+0x5c>
  {
    return AUDIO_ERROR;
 8000988:	2301      	movs	r3, #1
 800098a:	e000      	b.n	800098e <I2S3_Init+0x5e>
  }
  else
  {
    return AUDIO_OK;
 800098c:	2300      	movs	r3, #0
  }
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200000d8 	.word	0x200000d8
 800099c:	40003c00 	.word	0x40003c00

080009a0 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <HAL_I2S_ErrorCallback+0x20>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d101      	bne.n	80009b6 <HAL_I2S_ErrorCallback+0x16>
  {
    AUDIO_OUT_Error_CallBack();
 80009b2:	f7ff ffb5 	bl	8000920 <AUDIO_OUT_Error_CallBack>
  }
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40003c00 	.word	0x40003c00

080009c4 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80009c8:	4814      	ldr	r0, [pc, #80]	; (8000a1c <I2Cx_Init+0x58>)
 80009ca:	f004 fbc5 	bl	8005158 <HAL_I2C_GetState>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d121      	bne.n	8000a18 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = AUDIO_I2Cx;
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <I2Cx_Init+0x58>)
 80009d6:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <I2Cx_Init+0x5c>)
 80009d8:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <I2Cx_Init+0x58>)
 80009dc:	2243      	movs	r2, #67	; 0x43
 80009de:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 80009e0:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <I2Cx_Init+0x58>)
 80009e2:	4a10      	ldr	r2, [pc, #64]	; (8000a24 <I2Cx_Init+0x60>)
 80009e4:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009e6:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <I2Cx_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ec:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <I2Cx_Init+0x58>)
 80009ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009f2:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <I2Cx_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <I2Cx_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <I2Cx_Init+0x58>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 8000a06:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <I2Cx_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8000a0c:	4803      	ldr	r0, [pc, #12]	; (8000a1c <I2Cx_Init+0x58>)
 8000a0e:	f000 f86b 	bl	8000ae8 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8000a12:	4802      	ldr	r0, [pc, #8]	; (8000a1c <I2Cx_Init+0x58>)
 8000a14:	f003 ff0c 	bl	8004830 <HAL_I2C_Init>
  }
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000180 	.word	0x20000180
 8000a20:	40005400 	.word	0x40005400
 8000a24:	000186a0 	.word	0x000186a0

08000a28 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b088      	sub	sp, #32
 8000a2c:	af04      	add	r7, sp, #16
 8000a2e:	4603      	mov	r3, r0
 8000a30:	80fb      	strh	r3, [r7, #6]
 8000a32:	460b      	mov	r3, r1
 8000a34:	717b      	strb	r3, [r7, #5]
 8000a36:	4613      	mov	r3, r2
 8000a38:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8000a3e:	797b      	ldrb	r3, [r7, #5]
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <I2Cx_WriteData+0x48>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	88f9      	ldrh	r1, [r7, #6]
 8000a48:	9302      	str	r3, [sp, #8]
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	9301      	str	r3, [sp, #4]
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2301      	movs	r3, #1
 8000a54:	4807      	ldr	r0, [pc, #28]	; (8000a74 <I2Cx_WriteData+0x4c>)
 8000a56:	f004 f85f 	bl	8004b18 <HAL_I2C_Mem_Write>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000a5e:	7bfb      	ldrb	r3, [r7, #15]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000a64:	f000 f834 	bl	8000ad0 <I2Cx_Error>
  }
}
 8000a68:	bf00      	nop
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000000 	.word	0x20000000
 8000a74:	20000180 	.word	0x20000180

08000a78 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b088      	sub	sp, #32
 8000a7c:	af04      	add	r7, sp, #16
 8000a7e:	4603      	mov	r3, r0
 8000a80:	460a      	mov	r2, r1
 8000a82:	80fb      	strh	r3, [r7, #6]
 8000a84:	4613      	mov	r3, r2
 8000a86:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8000a90:	797b      	ldrb	r3, [r7, #5]
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <I2Cx_ReadData+0x50>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	88f9      	ldrh	r1, [r7, #6]
 8000a9a:	9302      	str	r3, [sp, #8]
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	9301      	str	r3, [sp, #4]
 8000aa0:	f107 030e 	add.w	r3, r7, #14
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	4808      	ldr	r0, [pc, #32]	; (8000acc <I2Cx_ReadData+0x54>)
 8000aaa:	f004 f92f 	bl	8004d0c <HAL_I2C_Mem_Read>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000ab8:	f000 f80a 	bl	8000ad0 <I2Cx_Error>
  }
  return value;
 8000abc:	7bbb      	ldrb	r3, [r7, #14]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	20000180 	.word	0x20000180

08000ad0 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8000ad4:	4803      	ldr	r0, [pc, #12]	; (8000ae4 <I2Cx_Error+0x14>)
 8000ad6:	f003 ffef 	bl	8004ab8 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8000ada:	f7ff ff73 	bl	80009c4 <I2Cx_Init>
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000180 	.word	0x20000180

08000ae8 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the I2C peripheral */
  AUDIO_I2Cx_CLOCK_ENABLE();
 8000af0:	2300      	movs	r3, #0
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	4a24      	ldr	r2, [pc, #144]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000afa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000afe:	6413      	str	r3, [r2, #64]	; 0x40
 8000b00:	4b22      	ldr	r3, [pc, #136]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  AUDIO_I2Cx_GPIO_CLK_ENABLE();
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	4b1e      	ldr	r3, [pc, #120]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b14:	4a1d      	ldr	r2, [pc, #116]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b16:	f043 0302 	orr.w	r3, r3, #2
 8000b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b20:	f003 0302 	and.w	r3, r3, #2
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = AUDIO_I2Cx_SDA_PIN | AUDIO_I2Cx_SCL_PIN;
 8000b28:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8000b2e:	2312      	movs	r3, #18
 8000b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000b36:	2302      	movs	r3, #2
 8000b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = AUDIO_I2Cx_AF;
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(AUDIO_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4812      	ldr	r0, [pc, #72]	; (8000b90 <I2Cx_MspInit+0xa8>)
 8000b46:	f001 ffcf 	bl	8002ae8 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  AUDIO_I2Cx_FORCE_RESET();
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b4c:	6a1b      	ldr	r3, [r3, #32]
 8000b4e:	4a0f      	ldr	r2, [pc, #60]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b54:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  AUDIO_I2Cx_RELEASE_RESET();
 8000b56:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b58:	6a1b      	ldr	r3, [r3, #32]
 8000b5a:	4a0c      	ldr	r2, [pc, #48]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000b60:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000b62:	2200      	movs	r2, #0
 8000b64:	210f      	movs	r1, #15
 8000b66:	201f      	movs	r0, #31
 8000b68:	f001 fb49 	bl	80021fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_EV_IRQn);
 8000b6c:	201f      	movs	r0, #31
 8000b6e:	f001 fb62 	bl	8002236 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	210f      	movs	r1, #15
 8000b76:	2020      	movs	r0, #32
 8000b78:	f001 fb41 	bl	80021fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_ER_IRQn);
 8000b7c:	2020      	movs	r0, #32
 8000b7e:	f001 fb5a 	bl	8002236 <HAL_NVIC_EnableIRQ>
}
 8000b82:	bf00      	nop
 8000b84:	3728      	adds	r7, #40	; 0x28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020400 	.word	0x40020400

08000b94 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	603b      	str	r3, [r7, #0]
 8000b9e:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <AUDIO_IO_Init+0x68>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a16      	ldr	r2, [pc, #88]	; (8000bfc <AUDIO_IO_Init+0x68>)
 8000ba4:	f043 0308 	orr.w	r3, r3, #8
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <AUDIO_IO_Init+0x68>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0308 	and.w	r3, r3, #8
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8000bb6:	2310      	movs	r3, #16
 8000bb8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	4619      	mov	r1, r3
 8000bca:	480d      	ldr	r0, [pc, #52]	; (8000c00 <AUDIO_IO_Init+0x6c>)
 8000bcc:	f001 ff8c 	bl	8002ae8 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8000bd0:	f7ff fef8 	bl	80009c4 <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2110      	movs	r1, #16
 8000bd8:	4809      	ldr	r0, [pc, #36]	; (8000c00 <AUDIO_IO_Init+0x6c>)
 8000bda:	f002 f9ed 	bl	8002fb8 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000bde:	2005      	movs	r0, #5
 8000be0:	f001 fa0e 	bl	8002000 <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8000be4:	2201      	movs	r2, #1
 8000be6:	2110      	movs	r1, #16
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <AUDIO_IO_Init+0x6c>)
 8000bea:	f002 f9e5 	bl	8002fb8 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000bee:	2005      	movs	r0, #5
 8000bf0:	f001 fa06 	bl	8002000 <HAL_Delay>
}
 8000bf4:	bf00      	nop
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020c00 	.word	0x40020c00

08000c04 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void) 
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	4603      	mov	r3, r0
 8000c1a:	71fb      	strb	r3, [r7, #7]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	71bb      	strb	r3, [r7, #6]
 8000c20:	4613      	mov	r3, r2
 8000c22:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	797a      	ldrb	r2, [r7, #5]
 8000c2a:	79b9      	ldrb	r1, [r7, #6]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fefb 	bl	8000a28 <I2Cx_WriteData>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	460a      	mov	r2, r1
 8000c44:	71fb      	strb	r3, [r7, #7]
 8000c46:	4613      	mov	r3, r2
 8000c48:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	79ba      	ldrb	r2, [r7, #6]
 8000c50:	4611      	mov	r1, r2
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ff10 	bl	8000a78 <I2Cx_ReadData>
 8000c58:	4603      	mov	r3, r0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <AUDIO_StorageParse>:

USBH_HandleTypeDef hUSBHost;
uint16_t NumObs = 0;

FRESULT AUDIO_StorageParse(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b0d6      	sub	sp, #344	; 0x158
 8000c68:	af00      	add	r7, sp, #0
  FRESULT res = FR_OK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  FILINFO fno;
  DIR dir;
  char *fn;


  res = f_opendir(&dir, USBHPath);
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	4945      	ldr	r1, [pc, #276]	; (8000d88 <AUDIO_StorageParse+0x124>)
 8000c74:	4618      	mov	r0, r3
 8000c76:	f00d fe8f 	bl	800e998 <f_opendir>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  FileList.ptr = 0;
 8000c80:	4b42      	ldr	r3, [pc, #264]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8

  if(res == FR_OK)
 8000c88:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d16b      	bne.n	8000d68 <AUDIO_StorageParse+0x104>
  {
    while(Appli_state == APPLICATION_READY)
 8000c90:	e066      	b.n	8000d60 <AUDIO_StorageParse+0xfc>
    {
      res = f_readdir(&dir, &fno);
 8000c92:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	4611      	mov	r1, r2
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f00d ff15 	bl	800eaca <f_readdir>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
      if(res != FR_OK || fno.fname[0] == 0)
 8000ca6:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d15c      	bne.n	8000d68 <AUDIO_StorageParse+0x104>
 8000cae:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000cb2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000cb6:	7d9b      	ldrb	r3, [r3, #22]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d055      	beq.n	8000d68 <AUDIO_StorageParse+0x104>
      {
        break;
      }
      if(fno.fname[0] == '.')
 8000cbc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000cc0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000cc4:	7d9b      	ldrb	r3, [r3, #22]
 8000cc6:	2b2e      	cmp	r3, #46	; 0x2e
 8000cc8:	d100      	bne.n	8000ccc <AUDIO_StorageParse+0x68>
      {
        continue;
 8000cca:	e049      	b.n	8000d60 <AUDIO_StorageParse+0xfc>
      }

      fn = fno.fname;
 8000ccc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cd0:	3316      	adds	r3, #22
 8000cd2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
 8000cd6:	4b2d      	ldr	r3, [pc, #180]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000cd8:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000cdc:	2b17      	cmp	r3, #23
 8000cde:	d83f      	bhi.n	8000d60 <AUDIO_StorageParse+0xfc>
      {
        if((fno.fattrib & AM_DIR) == 0)
 8000ce0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000ce4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000ce8:	7a1b      	ldrb	r3, [r3, #8]
 8000cea:	f003 0310 	and.w	r3, r3, #16
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d136      	bne.n	8000d60 <AUDIO_StorageParse+0xfc>
        {
          if((strstr(fn, "wav")) || (strstr(fn, "WAV")))
 8000cf2:	4927      	ldr	r1, [pc, #156]	; (8000d90 <AUDIO_StorageParse+0x12c>)
 8000cf4:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8000cf8:	f00e fc55 	bl	800f5a6 <strstr>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d107      	bne.n	8000d12 <AUDIO_StorageParse+0xae>
 8000d02:	4924      	ldr	r1, [pc, #144]	; (8000d94 <AUDIO_StorageParse+0x130>)
 8000d04:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8000d08:	f00e fc4d 	bl	800f5a6 <strstr>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d026      	beq.n	8000d60 <AUDIO_StorageParse+0xfc>
          {
            strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
 8000d12:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000d14:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4413      	add	r3, r2
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	4413      	add	r3, r2
 8000d24:	4a19      	ldr	r2, [pc, #100]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000d26:	4413      	add	r3, r2
 8000d28:	3301      	adds	r3, #1
 8000d2a:	2228      	movs	r2, #40	; 0x28
 8000d2c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8000d30:	4618      	mov	r0, r3
 8000d32:	f00e fc25 	bl	800f580 <strncpy>
            FileList.file[FileList.ptr].type = FILETYPE_FILE;
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000d38:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4913      	ldr	r1, [pc, #76]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000d40:	4613      	mov	r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	4413      	add	r3, r2
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	4413      	add	r3, r2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	701a      	strb	r2, [r3, #0]
            FileList.ptr++;
 8000d50:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000d52:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d56:	3301      	adds	r3, #1
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000d5c:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8
    while(Appli_state == APPLICATION_READY)
 8000d60:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <AUDIO_StorageParse+0x134>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d094      	beq.n	8000c92 <AUDIO_StorageParse+0x2e>
          }
        }
      }
    }
  }
  NumObs = FileList.ptr;
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000d6a:	f8b3 23d8 	ldrh.w	r2, [r3, #984]	; 0x3d8
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <AUDIO_StorageParse+0x138>)
 8000d70:	801a      	strh	r2, [r3, #0]
  f_closedir(&dir);
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	4618      	mov	r0, r3
 8000d76:	f00d fe82 	bl	800ea7e <f_closedir>
  return res;
 8000d7a:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	2000192c 	.word	0x2000192c
 8000d8c:	200012ec 	.word	0x200012ec
 8000d90:	0800f718 	.word	0x0800f718
 8000d94:	0800f71c 	.word	0x0800f71c
 8000d98:	20002170 	.word	0x20002170
 8000d9c:	200001d6 	.word	0x200001d6

08000da0 <AUDIO_GetWavObjectNumber>:

uint16_t AUDIO_GetWavObjectNumber(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	if (AUDIO_StorageParse() == FR_OK) return NumObs;
 8000da4:	f7ff ff5e 	bl	8000c64 <AUDIO_StorageParse>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d102      	bne.n	8000db4 <AUDIO_GetWavObjectNumber+0x14>
 8000dae:	4b02      	ldr	r3, [pc, #8]	; (8000db8 <AUDIO_GetWavObjectNumber+0x18>)
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	e7ff      	b.n	8000db4 <AUDIO_GetWavObjectNumber+0x14>
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	200001d6 	.word	0x200001d6

08000dbc <Mount_USB>:

void Mount_USB (void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	4905      	ldr	r1, [pc, #20]	; (8000dd8 <Mount_USB+0x1c>)
 8000dc4:	4805      	ldr	r0, [pc, #20]	; (8000ddc <Mount_USB+0x20>)
 8000dc6:	f00c fff3 	bl	800ddb0 <f_mount>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <Mount_USB+0x24>)
 8000dd0:	701a      	strb	r2, [r3, #0]
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	2000192c 	.word	0x2000192c
 8000ddc:	20001930 	.word	0x20001930
 8000de0:	200001d4 	.word	0x200001d4

08000de4 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	4603      	mov	r3, r0
 8000dee:	81fb      	strh	r3, [r7, #14]
 8000df0:	460b      	mov	r3, r1
 8000df2:	81bb      	strh	r3, [r7, #12]
 8000df4:	4613      	mov	r3, r2
 8000df6:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 8000dfc:	f7ff feca 	bl	8000b94 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8000e00:	89fb      	ldrh	r3, [r7, #14]
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2201      	movs	r2, #1
 8000e06:	2102      	movs	r1, #2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 fb01 	bl	8001410 <CODEC_IO_Write>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	461a      	mov	r2, r3
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	4413      	add	r3, r2
 8000e16:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8000e18:	89bb      	ldrh	r3, [r7, #12]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	2b03      	cmp	r3, #3
 8000e1e:	d81b      	bhi.n	8000e58 <cs43l22_Init+0x74>
 8000e20:	a201      	add	r2, pc, #4	; (adr r2, 8000e28 <cs43l22_Init+0x44>)
 8000e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e26:	bf00      	nop
 8000e28:	08000e39 	.word	0x08000e39
 8000e2c:	08000e41 	.word	0x08000e41
 8000e30:	08000e49 	.word	0x08000e49
 8000e34:	08000e51 	.word	0x08000e51
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8000e38:	4b5b      	ldr	r3, [pc, #364]	; (8000fa8 <cs43l22_Init+0x1c4>)
 8000e3a:	22fa      	movs	r2, #250	; 0xfa
 8000e3c:	701a      	strb	r2, [r3, #0]
    break;
 8000e3e:	e00f      	b.n	8000e60 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8000e40:	4b59      	ldr	r3, [pc, #356]	; (8000fa8 <cs43l22_Init+0x1c4>)
 8000e42:	22af      	movs	r2, #175	; 0xaf
 8000e44:	701a      	strb	r2, [r3, #0]
    break;
 8000e46:	e00b      	b.n	8000e60 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8000e48:	4b57      	ldr	r3, [pc, #348]	; (8000fa8 <cs43l22_Init+0x1c4>)
 8000e4a:	22aa      	movs	r2, #170	; 0xaa
 8000e4c:	701a      	strb	r2, [r3, #0]
    break;
 8000e4e:	e007      	b.n	8000e60 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8000e50:	4b55      	ldr	r3, [pc, #340]	; (8000fa8 <cs43l22_Init+0x1c4>)
 8000e52:	2205      	movs	r2, #5
 8000e54:	701a      	strb	r2, [r3, #0]
    break;    
 8000e56:	e003      	b.n	8000e60 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8000e58:	4b53      	ldr	r3, [pc, #332]	; (8000fa8 <cs43l22_Init+0x1c4>)
 8000e5a:	2205      	movs	r2, #5
 8000e5c:	701a      	strb	r2, [r3, #0]
    break;    
 8000e5e:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000e60:	89fb      	ldrh	r3, [r7, #14]
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	4a50      	ldr	r2, [pc, #320]	; (8000fa8 <cs43l22_Init+0x1c4>)
 8000e66:	7812      	ldrb	r2, [r2, #0]
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	2104      	movs	r1, #4
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 facf 	bl	8001410 <CODEC_IO_Write>
 8000e72:	4603      	mov	r3, r0
 8000e74:	461a      	mov	r2, r3
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	4413      	add	r3, r2
 8000e7a:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8000e7c:	89fb      	ldrh	r3, [r7, #14]
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	2281      	movs	r2, #129	; 0x81
 8000e82:	2105      	movs	r1, #5
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 fac3 	bl	8001410 <CODEC_IO_Write>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	4413      	add	r3, r2
 8000e92:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8000e94:	89fb      	ldrh	r3, [r7, #14]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2204      	movs	r2, #4
 8000e9a:	2106      	movs	r1, #6
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f000 fab7 	bl	8001410 <CODEC_IO_Write>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000eac:	7afa      	ldrb	r2, [r7, #11]
 8000eae:	89fb      	ldrh	r3, [r7, #14]
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f964 	bl	8001180 <cs43l22_SetVolume>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000ec0:	89bb      	ldrh	r3, [r7, #12]
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d023      	beq.n	8000f0e <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8000ec6:	89fb      	ldrh	r3, [r7, #14]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2206      	movs	r2, #6
 8000ecc:	210f      	movs	r1, #15
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 fa9e 	bl	8001410 <CODEC_IO_Write>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	4413      	add	r3, r2
 8000edc:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8000ede:	89fb      	ldrh	r3, [r7, #14]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2124      	movs	r1, #36	; 0x24
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 fa92 	bl	8001410 <CODEC_IO_Write>
 8000eec:	4603      	mov	r3, r0
 8000eee:	461a      	mov	r2, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 8000ef6:	89fb      	ldrh	r3, [r7, #14]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2200      	movs	r2, #0
 8000efc:	2125      	movs	r1, #37	; 0x25
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 fa86 	bl	8001410 <CODEC_IO_Write>
 8000f04:	4603      	mov	r3, r0
 8000f06:	461a      	mov	r2, r3
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8000f0e:	89fb      	ldrh	r3, [r7, #14]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2200      	movs	r2, #0
 8000f14:	210a      	movs	r1, #10
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 fa7a 	bl	8001410 <CODEC_IO_Write>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	461a      	mov	r2, r3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	4413      	add	r3, r2
 8000f24:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000f26:	89fb      	ldrh	r3, [r7, #14]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	210e      	movs	r1, #14
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 fa6e 	bl	8001410 <CODEC_IO_Write>
 8000f34:	4603      	mov	r3, r0
 8000f36:	461a      	mov	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8000f3e:	89fb      	ldrh	r3, [r7, #14]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2200      	movs	r2, #0
 8000f44:	2127      	movs	r1, #39	; 0x27
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 fa62 	bl	8001410 <CODEC_IO_Write>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	4413      	add	r3, r2
 8000f54:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8000f56:	89fb      	ldrh	r3, [r7, #14]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	211f      	movs	r1, #31
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 fa56 	bl	8001410 <CODEC_IO_Write>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461a      	mov	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8000f6e:	89fb      	ldrh	r3, [r7, #14]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	220a      	movs	r2, #10
 8000f74:	211a      	movs	r1, #26
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 fa4a 	bl	8001410 <CODEC_IO_Write>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	461a      	mov	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	4413      	add	r3, r2
 8000f84:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 8000f86:	89fb      	ldrh	r3, [r7, #14]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	220a      	movs	r2, #10
 8000f8c:	211b      	movs	r1, #27
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 fa3e 	bl	8001410 <CODEC_IO_Write>
 8000f94:	4603      	mov	r3, r0
 8000f96:	461a      	mov	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 8000f9e:	697b      	ldr	r3, [r7, #20]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	200001d8 	.word	0x200001d8

08000fac <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8000fb0:	f7ff fe28 	bl	8000c04 <AUDIO_IO_DeInit>
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 8000fc2:	f7ff fde7 	bl	8000b94 <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2101      	movs	r1, #1
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fe34 	bl	8000c3a <AUDIO_IO_Read>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	f023 0307 	bic.w	r3, r3, #7
 8000fdc:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	80fb      	strh	r3, [r7, #6]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <cs43l22_Play+0x70>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d123      	bne.n	800104c <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 8001004:	88fb      	ldrh	r3, [r7, #6]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2206      	movs	r2, #6
 800100a:	210e      	movs	r1, #14
 800100c:	4618      	mov	r0, r3
 800100e:	f000 f9ff 	bl	8001410 <CODEC_IO_Write>
 8001012:	4603      	mov	r3, r0
 8001014:	461a      	mov	r2, r3
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4413      	add	r3, r2
 800101a:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800101c:	88fb      	ldrh	r3, [r7, #6]
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f000 f919 	bl	8001258 <cs43l22_SetMute>
 8001026:	4602      	mov	r2, r0
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4413      	add	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 800102e:	88fb      	ldrh	r3, [r7, #6]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	229e      	movs	r2, #158	; 0x9e
 8001034:	2102      	movs	r1, #2
 8001036:	4618      	mov	r0, r3
 8001038:	f000 f9ea 	bl	8001410 <CODEC_IO_Write>
 800103c:	4603      	mov	r3, r0
 800103e:	461a      	mov	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4413      	add	r3, r2
 8001044:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 8001046:	4b04      	ldr	r3, [pc, #16]	; (8001058 <cs43l22_Play+0x70>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 800104c:	68fb      	ldr	r3, [r7, #12]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000034 	.word	0x20000034

0800105c <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800106a:	88fb      	ldrh	r3, [r7, #6]
 800106c:	2101      	movs	r1, #1
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f8f2 	bl	8001258 <cs43l22_SetMute>
 8001074:	4602      	mov	r2, r0
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4413      	add	r3, r2
 800107a:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2201      	movs	r2, #1
 8001082:	2102      	movs	r1, #2
 8001084:	4618      	mov	r0, r3
 8001086:	f000 f9c3 	bl	8001410 <CODEC_IO_Write>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4413      	add	r3, r2
 8001092:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8001094:	68fb      	ldr	r3, [r7, #12]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 f8ce 	bl	8001258 <cs43l22_SetMute>
 80010bc:	4602      	mov	r2, r0
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	4413      	add	r3, r2
 80010c2:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 80010c4:	2300      	movs	r3, #0
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	e002      	b.n	80010d0 <cs43l22_Resume+0x30>
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	3301      	adds	r3, #1
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	2bfe      	cmp	r3, #254	; 0xfe
 80010d4:	d9f9      	bls.n	80010ca <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <cs43l22_Resume+0x74>)
 80010dc:	7812      	ldrb	r2, [r2, #0]
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	2104      	movs	r1, #4
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 f994 	bl	8001410 <CODEC_IO_Write>
 80010e8:	4603      	mov	r3, r0
 80010ea:	461a      	mov	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4413      	add	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	229e      	movs	r2, #158	; 0x9e
 80010f8:	2102      	movs	r1, #2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f988 	bl	8001410 <CODEC_IO_Write>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4413      	add	r3, r2
 8001108:	60fb      	str	r3, [r7, #12]
  
  return counter;
 800110a:	68fb      	ldr	r3, [r7, #12]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	200001d8 	.word	0x200001d8

08001118 <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001128:	88fb      	ldrh	r3, [r7, #6]
 800112a:	2101      	movs	r1, #1
 800112c:	4618      	mov	r0, r3
 800112e:	f000 f893 	bl	8001258 <cs43l22_SetMute>
 8001132:	4602      	mov	r2, r0
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4413      	add	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2204      	movs	r2, #4
 8001140:	210e      	movs	r1, #14
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f964 	bl	8001410 <CODEC_IO_Write>
 8001148:	4603      	mov	r3, r0
 800114a:	461a      	mov	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4413      	add	r3, r2
 8001150:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 8001152:	88fb      	ldrh	r3, [r7, #6]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	229f      	movs	r2, #159	; 0x9f
 8001158:	2102      	movs	r1, #2
 800115a:	4618      	mov	r0, r3
 800115c:	f000 f958 	bl	8001410 <CODEC_IO_Write>
 8001160:	4603      	mov	r3, r0
 8001162:	461a      	mov	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4413      	add	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 800116a:	4b04      	ldr	r3, [pc, #16]	; (800117c <cs43l22_Stop+0x64>)
 800116c:	2201      	movs	r2, #1
 800116e:	701a      	strb	r2, [r3, #0]
  return counter;    
 8001170:	68fb      	ldr	r3, [r7, #12]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000034 	.word	0x20000034

08001180 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	460a      	mov	r2, r1
 800118a:	80fb      	strh	r3, [r7, #6]
 800118c:	4613      	mov	r3, r2
 800118e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001194:	797b      	ldrb	r3, [r7, #5]
 8001196:	2b64      	cmp	r3, #100	; 0x64
 8001198:	d80b      	bhi.n	80011b2 <cs43l22_SetVolume+0x32>
 800119a:	797a      	ldrb	r2, [r7, #5]
 800119c:	4613      	mov	r3, r2
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	1a9b      	subs	r3, r3, r2
 80011a2:	4a25      	ldr	r2, [pc, #148]	; (8001238 <cs43l22_SetVolume+0xb8>)
 80011a4:	fb82 1203 	smull	r1, r2, r2, r3
 80011a8:	1152      	asrs	r2, r2, #5
 80011aa:	17db      	asrs	r3, r3, #31
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	e000      	b.n	80011b4 <cs43l22_SetVolume+0x34>
 80011b2:	23ff      	movs	r3, #255	; 0xff
 80011b4:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 80011b6:	7afb      	ldrb	r3, [r7, #11]
 80011b8:	2be6      	cmp	r3, #230	; 0xe6
 80011ba:	d91c      	bls.n	80011f6 <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 80011bc:	88fb      	ldrh	r3, [r7, #6]
 80011be:	b2d8      	uxtb	r0, r3
 80011c0:	7afb      	ldrb	r3, [r7, #11]
 80011c2:	3319      	adds	r3, #25
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	461a      	mov	r2, r3
 80011c8:	2120      	movs	r1, #32
 80011ca:	f000 f921 	bl	8001410 <CODEC_IO_Write>
 80011ce:	4603      	mov	r3, r0
 80011d0:	461a      	mov	r2, r3
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4413      	add	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	b2d8      	uxtb	r0, r3
 80011dc:	7afb      	ldrb	r3, [r7, #11]
 80011de:	3319      	adds	r3, #25
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	461a      	mov	r2, r3
 80011e4:	2121      	movs	r1, #33	; 0x21
 80011e6:	f000 f913 	bl	8001410 <CODEC_IO_Write>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4413      	add	r3, r2
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	e01b      	b.n	800122e <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 80011f6:	88fb      	ldrh	r3, [r7, #6]
 80011f8:	b2d8      	uxtb	r0, r3
 80011fa:	7afb      	ldrb	r3, [r7, #11]
 80011fc:	3319      	adds	r3, #25
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	461a      	mov	r2, r3
 8001202:	2120      	movs	r1, #32
 8001204:	f000 f904 	bl	8001410 <CODEC_IO_Write>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4413      	add	r3, r2
 8001210:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	b2d8      	uxtb	r0, r3
 8001216:	7afb      	ldrb	r3, [r7, #11]
 8001218:	3319      	adds	r3, #25
 800121a:	b2db      	uxtb	r3, r3
 800121c:	461a      	mov	r2, r3
 800121e:	2121      	movs	r1, #33	; 0x21
 8001220:	f000 f8f6 	bl	8001410 <CODEC_IO_Write>
 8001224:	4603      	mov	r3, r0
 8001226:	461a      	mov	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4413      	add	r3, r2
 800122c:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 800122e:	68fb      	ldr	r3, [r7, #12]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	51eb851f 	.word	0x51eb851f

0800123c <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
	...

08001258 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d124      	bne.n	80012b8 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 800126e:	88fb      	ldrh	r3, [r7, #6]
 8001270:	b2db      	uxtb	r3, r3
 8001272:	22ff      	movs	r2, #255	; 0xff
 8001274:	2104      	movs	r1, #4
 8001276:	4618      	mov	r0, r3
 8001278:	f000 f8ca 	bl	8001410 <CODEC_IO_Write>
 800127c:	4603      	mov	r3, r0
 800127e:	461a      	mov	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4413      	add	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 8001286:	88fb      	ldrh	r3, [r7, #6]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2201      	movs	r2, #1
 800128c:	2122      	movs	r1, #34	; 0x22
 800128e:	4618      	mov	r0, r3
 8001290:	f000 f8be 	bl	8001410 <CODEC_IO_Write>
 8001294:	4603      	mov	r3, r0
 8001296:	461a      	mov	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4413      	add	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 800129e:	88fb      	ldrh	r3, [r7, #6]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2201      	movs	r2, #1
 80012a4:	2123      	movs	r1, #35	; 0x23
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f8b2 	bl	8001410 <CODEC_IO_Write>
 80012ac:	4603      	mov	r3, r0
 80012ae:	461a      	mov	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4413      	add	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	e025      	b.n	8001304 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2200      	movs	r2, #0
 80012be:	2122      	movs	r1, #34	; 0x22
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 f8a5 	bl	8001410 <CODEC_IO_Write>
 80012c6:	4603      	mov	r3, r0
 80012c8:	461a      	mov	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4413      	add	r3, r2
 80012ce:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2200      	movs	r2, #0
 80012d6:	2123      	movs	r1, #35	; 0x23
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 f899 	bl	8001410 <CODEC_IO_Write>
 80012de:	4603      	mov	r3, r0
 80012e0:	461a      	mov	r2, r3
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4413      	add	r3, r2
 80012e6:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	4a08      	ldr	r2, [pc, #32]	; (8001310 <cs43l22_SetMute+0xb8>)
 80012ee:	7812      	ldrb	r2, [r2, #0]
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	2104      	movs	r1, #4
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 f88b 	bl	8001410 <CODEC_IO_Write>
 80012fa:	4603      	mov	r3, r0
 80012fc:	461a      	mov	r2, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	4413      	add	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8001304:	68fb      	ldr	r3, [r7, #12]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200001d8 	.word	0x200001d8

08001314 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	460a      	mov	r2, r1
 800131e:	80fb      	strh	r3, [r7, #6]
 8001320:	4613      	mov	r3, r2
 8001322:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8001328:	797b      	ldrb	r3, [r7, #5]
 800132a:	3b01      	subs	r3, #1
 800132c:	2b03      	cmp	r3, #3
 800132e:	d84b      	bhi.n	80013c8 <cs43l22_SetOutputMode+0xb4>
 8001330:	a201      	add	r2, pc, #4	; (adr r2, 8001338 <cs43l22_SetOutputMode+0x24>)
 8001332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001336:	bf00      	nop
 8001338:	08001349 	.word	0x08001349
 800133c:	08001369 	.word	0x08001369
 8001340:	08001389 	.word	0x08001389
 8001344:	080013a9 	.word	0x080013a9
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	22fa      	movs	r2, #250	; 0xfa
 800134e:	2104      	movs	r1, #4
 8001350:	4618      	mov	r0, r3
 8001352:	f000 f85d 	bl	8001410 <CODEC_IO_Write>
 8001356:	4603      	mov	r3, r0
 8001358:	461a      	mov	r2, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4413      	add	r3, r2
 800135e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8001360:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <cs43l22_SetOutputMode+0xe0>)
 8001362:	22fa      	movs	r2, #250	; 0xfa
 8001364:	701a      	strb	r2, [r3, #0]
      break;
 8001366:	e03f      	b.n	80013e8 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 8001368:	88fb      	ldrh	r3, [r7, #6]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	22af      	movs	r2, #175	; 0xaf
 800136e:	2104      	movs	r1, #4
 8001370:	4618      	mov	r0, r3
 8001372:	f000 f84d 	bl	8001410 <CODEC_IO_Write>
 8001376:	4603      	mov	r3, r0
 8001378:	461a      	mov	r2, r3
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4413      	add	r3, r2
 800137e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8001380:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <cs43l22_SetOutputMode+0xe0>)
 8001382:	22af      	movs	r2, #175	; 0xaf
 8001384:	701a      	strb	r2, [r3, #0]
      break;
 8001386:	e02f      	b.n	80013e8 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	b2db      	uxtb	r3, r3
 800138c:	22aa      	movs	r2, #170	; 0xaa
 800138e:	2104      	movs	r1, #4
 8001390:	4618      	mov	r0, r3
 8001392:	f000 f83d 	bl	8001410 <CODEC_IO_Write>
 8001396:	4603      	mov	r3, r0
 8001398:	461a      	mov	r2, r3
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4413      	add	r3, r2
 800139e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 80013a0:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <cs43l22_SetOutputMode+0xe0>)
 80013a2:	22aa      	movs	r2, #170	; 0xaa
 80013a4:	701a      	strb	r2, [r3, #0]
      break;
 80013a6:	e01f      	b.n	80013e8 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80013a8:	88fb      	ldrh	r3, [r7, #6]
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2205      	movs	r2, #5
 80013ae:	2104      	movs	r1, #4
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 f82d 	bl	8001410 <CODEC_IO_Write>
 80013b6:	4603      	mov	r3, r0
 80013b8:	461a      	mov	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	4413      	add	r3, r2
 80013be:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <cs43l22_SetOutputMode+0xe0>)
 80013c2:	2205      	movs	r2, #5
 80013c4:	701a      	strb	r2, [r3, #0]
      break;    
 80013c6:	e00f      	b.n	80013e8 <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2205      	movs	r2, #5
 80013ce:	2104      	movs	r1, #4
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 f81d 	bl	8001410 <CODEC_IO_Write>
 80013d6:	4603      	mov	r3, r0
 80013d8:	461a      	mov	r2, r3
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4413      	add	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <cs43l22_SetOutputMode+0xe0>)
 80013e2:	2205      	movs	r2, #5
 80013e4:	701a      	strb	r2, [r3, #0]
      break;
 80013e6:	bf00      	nop
  }  
  return counter;
 80013e8:	68fb      	ldr	r3, [r7, #12]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	200001d8 	.word	0x200001d8

080013f8 <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
 800141a:	460b      	mov	r3, r1
 800141c:	71bb      	strb	r3, [r7, #6]
 800141e:	4613      	mov	r3, r2
 8001420:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 8001426:	797a      	ldrb	r2, [r7, #5]
 8001428:	79b9      	ldrb	r1, [r7, #6]
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fbf0 	bl	8000c12 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	b2db      	uxtb	r3, r3
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <HAL_GPIO_EXTI_Callback>:
extern AUDIO_PLAYBACK_StateTypeDef AudioState;

int IsFinished = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0)
 800144a:	88fb      	ldrh	r3, [r7, #6]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d102      	bne.n	8001456 <HAL_GPIO_EXTI_Callback+0x16>
	{
		AudioState = AUDIO_STATE_NEXT;
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <HAL_GPIO_EXTI_Callback+0x24>)
 8001452:	2205      	movs	r2, #5
 8001454:	701a      	strb	r2, [r3, #0]
//		if (AudioState == AUDIO_STATE_WAIT)
//		{
//			AudioState = AUDIO_STATE_RESUME;
//		}
	}
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	200012e8 	.word	0x200012e8

08001468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800146c:	f000 fd56 	bl	8001f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001470:	f000 f82e 	bl	80014d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001474:	f000 f910 	bl	8001698 <MX_GPIO_Init>
  MX_DMA_Init();
 8001478:	f000 f8ee 	bl	8001658 <MX_DMA_Init>
  MX_I2C1_Init();
 800147c:	f000 f890 	bl	80015a0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8001480:	f000 f8bc 	bl	80015fc <MX_I2S3_Init>
  MX_FATFS_Init();
 8001484:	f007 f86e 	bl	8008564 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001488:	f00d fc7e 	bl	800ed88 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800148c:	f00d fca2 	bl	800edd4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    if (Appli_state == APPLICATION_READY)
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <main+0x5c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b02      	cmp	r3, #2
 8001496:	d1f9      	bne.n	800148c <main+0x24>
    {
    	Mount_USB();
 8001498:	f7ff fc90 	bl	8000dbc <Mount_USB>
    	AUDIO_PLAYER_Start(0);
 800149c:	2000      	movs	r0, #0
 800149e:	f000 fb71 	bl	8001b84 <AUDIO_PLAYER_Start>

    	while (!IsFinished)
 80014a2:	e009      	b.n	80014b8 <main+0x50>
    	{
    		AUDIO_PLAYER_Process(TRUE);
 80014a4:	2001      	movs	r0, #1
 80014a6:	f000 fbcd 	bl	8001c44 <AUDIO_PLAYER_Process>

    		if (AudioState == AUDIO_STATE_STOP)
 80014aa:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <main+0x60>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b09      	cmp	r3, #9
 80014b0:	d102      	bne.n	80014b8 <main+0x50>
    		{
    			IsFinished = 1;
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <main+0x64>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	601a      	str	r2, [r3, #0]
    	while (!IsFinished)
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <main+0x64>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d0f1      	beq.n	80014a4 <main+0x3c>
    MX_USB_HOST_Process();
 80014c0:	e7e4      	b.n	800148c <main+0x24>
 80014c2:	bf00      	nop
 80014c4:	20002170 	.word	0x20002170
 80014c8:	200012e8 	.word	0x200012e8
 80014cc:	200002d8 	.word	0x200002d8

080014d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b094      	sub	sp, #80	; 0x50
 80014d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d6:	f107 0320 	add.w	r3, r7, #32
 80014da:	2230      	movs	r2, #48	; 0x30
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f00e f846 	bl	800f570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f4:	2300      	movs	r3, #0
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	4b27      	ldr	r3, [pc, #156]	; (8001598 <SystemClock_Config+0xc8>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	4a26      	ldr	r2, [pc, #152]	; (8001598 <SystemClock_Config+0xc8>)
 80014fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001502:	6413      	str	r3, [r2, #64]	; 0x40
 8001504:	4b24      	ldr	r3, [pc, #144]	; (8001598 <SystemClock_Config+0xc8>)
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001510:	2300      	movs	r3, #0
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	4b21      	ldr	r3, [pc, #132]	; (800159c <SystemClock_Config+0xcc>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a20      	ldr	r2, [pc, #128]	; (800159c <SystemClock_Config+0xcc>)
 800151a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	4b1e      	ldr	r3, [pc, #120]	; (800159c <SystemClock_Config+0xcc>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800152c:	2301      	movs	r3, #1
 800152e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001530:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001536:	2302      	movs	r3, #2
 8001538:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800153a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800153e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001540:	2304      	movs	r3, #4
 8001542:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001544:	23c0      	movs	r3, #192	; 0xc0
 8001546:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001548:	2304      	movs	r3, #4
 800154a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800154c:	2308      	movs	r3, #8
 800154e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001550:	f107 0320 	add.w	r3, r7, #32
 8001554:	4618      	mov	r0, r3
 8001556:	f005 fa09 	bl	800696c <HAL_RCC_OscConfig>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001560:	f000 f910 	bl	8001784 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001564:	230f      	movs	r3, #15
 8001566:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001568:	2302      	movs	r3, #2
 800156a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001570:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001574:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800157a:	f107 030c 	add.w	r3, r7, #12
 800157e:	2103      	movs	r1, #3
 8001580:	4618      	mov	r0, r3
 8001582:	f005 fc6b 	bl	8006e5c <HAL_RCC_ClockConfig>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800158c:	f000 f8fa 	bl	8001784 <Error_Handler>
  }
}
 8001590:	bf00      	nop
 8001592:	3750      	adds	r7, #80	; 0x50
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40023800 	.word	0x40023800
 800159c:	40007000 	.word	0x40007000

080015a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <MX_I2C1_Init+0x50>)
 80015a6:	4a13      	ldr	r2, [pc, #76]	; (80015f4 <MX_I2C1_Init+0x54>)
 80015a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <MX_I2C1_Init+0x50>)
 80015ac:	4a12      	ldr	r2, [pc, #72]	; (80015f8 <MX_I2C1_Init+0x58>)
 80015ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <MX_I2C1_Init+0x50>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <MX_I2C1_Init+0x50>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <MX_I2C1_Init+0x50>)
 80015be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015c4:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <MX_I2C1_Init+0x50>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_I2C1_Init+0x50>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <MX_I2C1_Init+0x50>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_I2C1_Init+0x50>)
 80015d8:	2200      	movs	r2, #0
 80015da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015dc:	4804      	ldr	r0, [pc, #16]	; (80015f0 <MX_I2C1_Init+0x50>)
 80015de:	f003 f927 	bl	8004830 <HAL_I2C_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015e8:	f000 f8cc 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	200001dc 	.word	0x200001dc
 80015f4:	40005400 	.word	0x40005400
 80015f8:	000186a0 	.word	0x000186a0

080015fc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <MX_I2S3_Init+0x54>)
 8001602:	4a14      	ldr	r2, [pc, #80]	; (8001654 <MX_I2S3_Init+0x58>)
 8001604:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001606:	4b12      	ldr	r3, [pc, #72]	; (8001650 <MX_I2S3_Init+0x54>)
 8001608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800160c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <MX_I2S3_Init+0x54>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_I2S3_Init+0x54>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800161a:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <MX_I2S3_Init+0x54>)
 800161c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001620:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <MX_I2S3_Init+0x54>)
 8001624:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001628:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_I2S3_Init+0x54>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001630:	4b07      	ldr	r3, [pc, #28]	; (8001650 <MX_I2S3_Init+0x54>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_I2S3_Init+0x54>)
 8001638:	2200      	movs	r2, #0
 800163a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800163c:	4804      	ldr	r0, [pc, #16]	; (8001650 <MX_I2S3_Init+0x54>)
 800163e:	f004 f8f5 	bl	800582c <HAL_I2S_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001648:	f000 f89c 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000230 	.word	0x20000230
 8001654:	40003c00 	.word	0x40003c00

08001658 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <MX_DMA_Init+0x3c>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a0b      	ldr	r2, [pc, #44]	; (8001694 <MX_DMA_Init+0x3c>)
 8001668:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <MX_DMA_Init+0x3c>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	2100      	movs	r1, #0
 800167e:	2010      	movs	r0, #16
 8001680:	f000 fdbd 	bl	80021fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001684:	2010      	movs	r0, #16
 8001686:	f000 fdd6 	bl	8002236 <HAL_NVIC_EnableIRQ>

}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023800 	.word	0x40023800

08001698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	4b31      	ldr	r3, [pc, #196]	; (8001778 <MX_GPIO_Init+0xe0>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a30      	ldr	r2, [pc, #192]	; (8001778 <MX_GPIO_Init+0xe0>)
 80016b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b2e      	ldr	r3, [pc, #184]	; (8001778 <MX_GPIO_Init+0xe0>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	4b2a      	ldr	r3, [pc, #168]	; (8001778 <MX_GPIO_Init+0xe0>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a29      	ldr	r2, [pc, #164]	; (8001778 <MX_GPIO_Init+0xe0>)
 80016d4:	f043 0304 	orr.w	r3, r3, #4
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b27      	ldr	r3, [pc, #156]	; (8001778 <MX_GPIO_Init+0xe0>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0304 	and.w	r3, r3, #4
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	4b23      	ldr	r3, [pc, #140]	; (8001778 <MX_GPIO_Init+0xe0>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a22      	ldr	r2, [pc, #136]	; (8001778 <MX_GPIO_Init+0xe0>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b20      	ldr	r3, [pc, #128]	; (8001778 <MX_GPIO_Init+0xe0>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <MX_GPIO_Init+0xe0>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a1b      	ldr	r2, [pc, #108]	; (8001778 <MX_GPIO_Init+0xe0>)
 800170c:	f043 0302 	orr.w	r3, r3, #2
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b19      	ldr	r3, [pc, #100]	; (8001778 <MX_GPIO_Init+0xe0>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800171e:	2200      	movs	r2, #0
 8001720:	2101      	movs	r1, #1
 8001722:	4816      	ldr	r0, [pc, #88]	; (800177c <MX_GPIO_Init+0xe4>)
 8001724:	f001 fc48 	bl	8002fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001728:	2301      	movs	r3, #1
 800172a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172c:	2301      	movs	r3, #1
 800172e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001734:	2300      	movs	r3, #0
 8001736:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	4619      	mov	r1, r3
 800173e:	480f      	ldr	r0, [pc, #60]	; (800177c <MX_GPIO_Init+0xe4>)
 8001740:	f001 f9d2 	bl	8002ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001744:	2301      	movs	r3, #1
 8001746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001748:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800174c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800174e:	2302      	movs	r3, #2
 8001750:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001752:	f107 0314 	add.w	r3, r7, #20
 8001756:	4619      	mov	r1, r3
 8001758:	4809      	ldr	r0, [pc, #36]	; (8001780 <MX_GPIO_Init+0xe8>)
 800175a:	f001 f9c5 	bl	8002ae8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2100      	movs	r1, #0
 8001762:	2006      	movs	r0, #6
 8001764:	f000 fd4b 	bl	80021fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001768:	2006      	movs	r0, #6
 800176a:	f000 fd64 	bl	8002236 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800176e:	bf00      	nop
 8001770:	3728      	adds	r7, #40	; 0x28
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40023800 	.word	0x40023800
 800177c:	40020800 	.word	0x40020800
 8001780:	40020000 	.word	0x40020000

08001784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001788:	b672      	cpsid	i
}
 800178a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800178c:	e7fe      	b.n	800178c <Error_Handler+0x8>
	...

08001790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <HAL_MspInit+0x4c>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	4a0f      	ldr	r2, [pc, #60]	; (80017dc <HAL_MspInit+0x4c>)
 80017a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a4:	6453      	str	r3, [r2, #68]	; 0x44
 80017a6:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <HAL_MspInit+0x4c>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	603b      	str	r3, [r7, #0]
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <HAL_MspInit+0x4c>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	4a08      	ldr	r2, [pc, #32]	; (80017dc <HAL_MspInit+0x4c>)
 80017bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c0:	6413      	str	r3, [r2, #64]	; 0x40
 80017c2:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_MspInit+0x4c>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017ce:	2007      	movs	r0, #7
 80017d0:	f000 fd0a 	bl	80021e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40023800 	.word	0x40023800

080017e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	; 0x28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a19      	ldr	r2, [pc, #100]	; (8001864 <HAL_I2C_MspInit+0x84>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d12c      	bne.n	800185c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	4b18      	ldr	r3, [pc, #96]	; (8001868 <HAL_I2C_MspInit+0x88>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a17      	ldr	r2, [pc, #92]	; (8001868 <HAL_I2C_MspInit+0x88>)
 800180c:	f043 0302 	orr.w	r3, r3, #2
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <HAL_I2C_MspInit+0x88>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800181e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001824:	2312      	movs	r3, #18
 8001826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL; //
 8001828:	2300      	movs	r3, #0
 800182a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182c:	2303      	movs	r3, #3
 800182e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001830:	2304      	movs	r3, #4
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	4619      	mov	r1, r3
 800183a:	480c      	ldr	r0, [pc, #48]	; (800186c <HAL_I2C_MspInit+0x8c>)
 800183c:	f001 f954 	bl	8002ae8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <HAL_I2C_MspInit+0x88>)
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	4a07      	ldr	r2, [pc, #28]	; (8001868 <HAL_I2C_MspInit+0x88>)
 800184a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800184e:	6413      	str	r3, [r2, #64]	; 0x40
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <HAL_I2C_MspInit+0x88>)
 8001852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800185c:	bf00      	nop
 800185e:	3728      	adds	r7, #40	; 0x28
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40005400 	.word	0x40005400
 8001868:	40023800 	.word	0x40023800
 800186c:	40020400 	.word	0x40020400

08001870 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <HAL_I2C_MspDeInit+0x38>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d10e      	bne.n	80018a0 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001882:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <HAL_I2C_MspDeInit+0x3c>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	4a09      	ldr	r2, [pc, #36]	; (80018ac <HAL_I2C_MspDeInit+0x3c>)
 8001888:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800188c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800188e:	2140      	movs	r1, #64	; 0x40
 8001890:	4807      	ldr	r0, [pc, #28]	; (80018b0 <HAL_I2C_MspDeInit+0x40>)
 8001892:	f001 faad 	bl	8002df0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001896:	f44f 7100 	mov.w	r1, #512	; 0x200
 800189a:	4805      	ldr	r0, [pc, #20]	; (80018b0 <HAL_I2C_MspDeInit+0x40>)
 800189c:	f001 faa8 	bl	8002df0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40005400 	.word	0x40005400
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020400 	.word	0x40020400

080018b4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b090      	sub	sp, #64	; 0x40
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
 80018dc:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI3)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a4f      	ldr	r2, [pc, #316]	; (8001a20 <HAL_I2S_MspInit+0x16c>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	f040 8096 	bne.w	8001a16 <HAL_I2S_MspInit+0x162>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80018ea:	2301      	movs	r3, #1
 80018ec:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80018ee:	23c8      	movs	r3, #200	; 0xc8
 80018f0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80018f2:	2305      	movs	r3, #5
 80018f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80018f6:	2302      	movs	r3, #2
 80018f8:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	4618      	mov	r0, r3
 8001900:	f005 fcb8 	bl	8007274 <HAL_RCCEx_PeriphCLKConfig>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 800190a:	f7ff ff3b 	bl	8001784 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	4b44      	ldr	r3, [pc, #272]	; (8001a24 <HAL_I2S_MspInit+0x170>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	4a43      	ldr	r2, [pc, #268]	; (8001a24 <HAL_I2S_MspInit+0x170>)
 8001918:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800191c:	6413      	str	r3, [r2, #64]	; 0x40
 800191e:	4b41      	ldr	r3, [pc, #260]	; (8001a24 <HAL_I2S_MspInit+0x170>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	4b3d      	ldr	r3, [pc, #244]	; (8001a24 <HAL_I2S_MspInit+0x170>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a3c      	ldr	r2, [pc, #240]	; (8001a24 <HAL_I2S_MspInit+0x170>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b3a      	ldr	r3, [pc, #232]	; (8001a24 <HAL_I2S_MspInit+0x170>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	4b36      	ldr	r3, [pc, #216]	; (8001a24 <HAL_I2S_MspInit+0x170>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a35      	ldr	r2, [pc, #212]	; (8001a24 <HAL_I2S_MspInit+0x170>)
 8001950:	f043 0304 	orr.w	r3, r3, #4
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b33      	ldr	r3, [pc, #204]	; (8001a24 <HAL_I2S_MspInit+0x170>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001962:	2310      	movs	r3, #16
 8001964:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001966:	2302      	movs	r3, #2
 8001968:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196e:	2300      	movs	r3, #0
 8001970:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001972:	2306      	movs	r3, #6
 8001974:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001976:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800197a:	4619      	mov	r1, r3
 800197c:	482a      	ldr	r0, [pc, #168]	; (8001a28 <HAL_I2S_MspInit+0x174>)
 800197e:	f001 f8b3 	bl	8002ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001982:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001986:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001990:	2300      	movs	r3, #0
 8001992:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001994:	2306      	movs	r3, #6
 8001996:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001998:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800199c:	4619      	mov	r1, r3
 800199e:	4823      	ldr	r0, [pc, #140]	; (8001a2c <HAL_I2S_MspInit+0x178>)
 80019a0:	f001 f8a2 	bl	8002ae8 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80019a4:	4b22      	ldr	r3, [pc, #136]	; (8001a30 <HAL_I2S_MspInit+0x17c>)
 80019a6:	4a23      	ldr	r2, [pc, #140]	; (8001a34 <HAL_I2S_MspInit+0x180>)
 80019a8:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80019aa:	4b21      	ldr	r3, [pc, #132]	; (8001a30 <HAL_I2S_MspInit+0x17c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019b0:	4b1f      	ldr	r3, [pc, #124]	; (8001a30 <HAL_I2S_MspInit+0x17c>)
 80019b2:	2240      	movs	r2, #64	; 0x40
 80019b4:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019b6:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <HAL_I2S_MspInit+0x17c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019bc:	4b1c      	ldr	r3, [pc, #112]	; (8001a30 <HAL_I2S_MspInit+0x17c>)
 80019be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019c2:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019c4:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <HAL_I2S_MspInit+0x17c>)
 80019c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019ca:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019cc:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <HAL_I2S_MspInit+0x17c>)
 80019ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019d2:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80019d4:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <HAL_I2S_MspInit+0x17c>)
 80019d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019da:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019dc:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <HAL_I2S_MspInit+0x17c>)
 80019de:	2200      	movs	r2, #0
 80019e0:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80019e2:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <HAL_I2S_MspInit+0x17c>)
 80019e4:	2204      	movs	r2, #4
 80019e6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <HAL_I2S_MspInit+0x17c>)
 80019ea:	2203      	movs	r2, #3
 80019ec:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80019ee:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <HAL_I2S_MspInit+0x17c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80019f4:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <HAL_I2S_MspInit+0x17c>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80019fa:	480d      	ldr	r0, [pc, #52]	; (8001a30 <HAL_I2S_MspInit+0x17c>)
 80019fc:	f000 fc36 	bl	800226c <HAL_DMA_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_I2S_MspInit+0x156>
    {
      Error_Handler();
 8001a06:	f7ff febd 	bl	8001784 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a08      	ldr	r2, [pc, #32]	; (8001a30 <HAL_I2S_MspInit+0x17c>)
 8001a0e:	639a      	str	r2, [r3, #56]	; 0x38
 8001a10:	4a07      	ldr	r2, [pc, #28]	; (8001a30 <HAL_I2S_MspInit+0x17c>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001a16:	bf00      	nop
 8001a18:	3740      	adds	r7, #64	; 0x40
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40003c00 	.word	0x40003c00
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40020000 	.word	0x40020000
 8001a2c:	40020800 	.word	0x40020800
 8001a30:	20000278 	.word	0x20000278
 8001a34:	40026088 	.word	0x40026088

08001a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <NMI_Handler+0x4>

08001a3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a42:	e7fe      	b.n	8001a42 <HardFault_Handler+0x4>

08001a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <MemManage_Handler+0x4>

08001a4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a4e:	e7fe      	b.n	8001a4e <BusFault_Handler+0x4>

08001a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a54:	e7fe      	b.n	8001a54 <UsageFault_Handler+0x4>

08001a56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a84:	f000 fa9c 	bl	8001fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001a90:	2001      	movs	r0, #1
 8001a92:	f001 faab 	bl	8002fec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001aa0:	4802      	ldr	r0, [pc, #8]	; (8001aac <DMA1_Stream5_IRQHandler+0x10>)
 8001aa2:	f000 fdb7 	bl	8002614 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000278 	.word	0x20000278

08001ab0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001ab4:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <OTG_FS_IRQHandler+0x10>)
 8001ab6:	f001 fd1b 	bl	80034f0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20002174 	.word	0x20002174

08001ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001acc:	4a14      	ldr	r2, [pc, #80]	; (8001b20 <_sbrk+0x5c>)
 8001ace:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <_sbrk+0x60>)
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad8:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <_sbrk+0x64>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d102      	bne.n	8001ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ae0:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <_sbrk+0x64>)
 8001ae2:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <_sbrk+0x68>)
 8001ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ae6:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <_sbrk+0x64>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d207      	bcs.n	8001b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001af4:	f00d fd7e 	bl	800f5f4 <__errno>
 8001af8:	4603      	mov	r3, r0
 8001afa:	220c      	movs	r2, #12
 8001afc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
 8001b02:	e009      	b.n	8001b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <_sbrk+0x64>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b0a:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <_sbrk+0x64>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <_sbrk+0x64>)
 8001b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b16:	68fb      	ldr	r3, [r7, #12]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20020000 	.word	0x20020000
 8001b24:	00000400 	.word	0x00000400
 8001b28:	200002dc 	.word	0x200002dc
 8001b2c:	200025c0 	.word	0x200025c0

08001b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <SystemInit+0x20>)
 8001b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b3a:	4a05      	ldr	r2, [pc, #20]	; (8001b50 <SystemInit+0x20>)
 8001b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <PlayerInit>:

FIL WavFile;

/* Private function prototypes -----------------------------------------------*/
uint8_t PlayerInit(uint32_t AudioFreq)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	/* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */
	if(AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, uwVolume, AudioFreq) != 0)
 8001b5c:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <PlayerInit+0x2c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	4619      	mov	r1, r3
 8001b66:	2003      	movs	r0, #3
 8001b68:	f7fe fcb4 	bl	80004d4 <AUDIO_OUT_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <PlayerInit+0x22>
	{
		return 1;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <PlayerInit+0x24>
	}
	else
	{
		return 0;
 8001b76:	2300      	movs	r3, #0
	}
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	2000003c 	.word	0x2000003c

08001b84 <AUDIO_PLAYER_Start>:
  * @brief  Starts Audio streaming.    
  * @param  idx: File index
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_PLAYER_Start(uint8_t idx)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	71fb      	strb	r3, [r7, #7]
  unsigned int bytesread;

  f_close(&WavFile);
 8001b8e:	4828      	ldr	r0, [pc, #160]	; (8001c30 <AUDIO_PLAYER_Start+0xac>)
 8001b90:	f00c fccf 	bl	800e532 <f_close>
  if(AUDIO_GetWavObjectNumber() > idx)
 8001b94:	f7ff f904 	bl	8000da0 <AUDIO_GetWavObjectNumber>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d93f      	bls.n	8001c24 <AUDIO_PLAYER_Start+0xa0>
  {

    //Open WAV file
    f_open(&WavFile, (char *)FileList.file[idx].name, FA_READ);
 8001ba4:	79fa      	ldrb	r2, [r7, #7]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	4413      	add	r3, r2
 8001bb0:	4a20      	ldr	r2, [pc, #128]	; (8001c34 <AUDIO_PLAYER_Start+0xb0>)
 8001bb2:	4413      	add	r3, r2
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	4619      	mov	r1, r3
 8001bba:	481d      	ldr	r0, [pc, #116]	; (8001c30 <AUDIO_PLAYER_Start+0xac>)
 8001bbc:	f00c f93e 	bl	800de3c <f_open>
    //Read WAV file Header
    f_read(&WavFile, &WaveFormat, sizeof(WaveFormat), &bytesread);
 8001bc0:	f107 030c 	add.w	r3, r7, #12
 8001bc4:	222c      	movs	r2, #44	; 0x2c
 8001bc6:	491c      	ldr	r1, [pc, #112]	; (8001c38 <AUDIO_PLAYER_Start+0xb4>)
 8001bc8:	4819      	ldr	r0, [pc, #100]	; (8001c30 <AUDIO_PLAYER_Start+0xac>)
 8001bca:	f00c faf5 	bl	800e1b8 <f_read>
    
    /*Adjust the Audio frequency */
    PlayerInit(WaveFormat.SampleRate);
 8001bce:	4b1a      	ldr	r3, [pc, #104]	; (8001c38 <AUDIO_PLAYER_Start+0xb4>)
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff ffbe 	bl	8001b54 <PlayerInit>
    
    BufferCtl.state = BUFFER_OFFSET_NONE;
 8001bd8:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <AUDIO_PLAYER_Start+0xb8>)
 8001bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
    
    /* Get Data from USB Flash Disk */
    f_lseek(&WavFile, 0);
 8001be2:	2100      	movs	r1, #0
 8001be4:	4812      	ldr	r0, [pc, #72]	; (8001c30 <AUDIO_PLAYER_Start+0xac>)
 8001be6:	f00c fcce 	bl	800e586 <f_lseek>
    
    /* Fill whole buffer at first time */
    if(f_read(&WavFile,&BufferCtl.buff[0],AUDIO_OUT_BUFFER_SIZE,(void *)&bytesread) == FR_OK)
 8001bea:	f107 030c 	add.w	r3, r7, #12
 8001bee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bf2:	4912      	ldr	r1, [pc, #72]	; (8001c3c <AUDIO_PLAYER_Start+0xb8>)
 8001bf4:	480e      	ldr	r0, [pc, #56]	; (8001c30 <AUDIO_PLAYER_Start+0xac>)
 8001bf6:	f00c fadf 	bl	800e1b8 <f_read>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d111      	bne.n	8001c24 <AUDIO_PLAYER_Start+0xa0>
    {
      AudioState = AUDIO_STATE_PLAY;
 8001c00:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <AUDIO_PLAYER_Start+0xbc>)
 8001c02:	2203      	movs	r2, #3
 8001c04:	701a      	strb	r2, [r3, #0]
        if(bytesread != 0)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d00b      	beq.n	8001c24 <AUDIO_PLAYER_Start+0xa0>
        {
          AUDIO_OUT_Play((uint16_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
 8001c0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c10:	480a      	ldr	r0, [pc, #40]	; (8001c3c <AUDIO_PLAYER_Start+0xb8>)
 8001c12:	f7fe fcad 	bl	8000570 <AUDIO_OUT_Play>
          BufferCtl.fptr = bytesread;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4a08      	ldr	r2, [pc, #32]	; (8001c3c <AUDIO_PLAYER_Start+0xb8>)
 8001c1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c1e:	6053      	str	r3, [r2, #4]
          return AUDIO_ERROR_NONE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	e000      	b.n	8001c26 <AUDIO_PLAYER_Start+0xa2>
        }
      }
  }
  return AUDIO_ERROR_IO;
 8001c24:	2301      	movs	r3, #1
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	200016f4 	.word	0x200016f4
 8001c34:	200012ec 	.word	0x200012ec
 8001c38:	200016c8 	.word	0x200016c8
 8001c3c:	200002e0 	.word	0x200002e0
 8001c40:	200012e8 	.word	0x200012e8

08001c44 <AUDIO_PLAYER_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_PLAYER_Process(bool isLoop)
{
 8001c44:	b590      	push	{r4, r7, lr}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	71fb      	strb	r3, [r7, #7]
  uint32_t bytesread;
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	73fb      	strb	r3, [r7, #15]
  
  switch(AudioState)
 8001c52:	4b82      	ldr	r3, [pc, #520]	; (8001e5c <AUDIO_PLAYER_Process+0x218>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	3b03      	subs	r3, #3
 8001c58:	2b0a      	cmp	r3, #10
 8001c5a:	f200 80f6 	bhi.w	8001e4a <AUDIO_PLAYER_Process+0x206>
 8001c5e:	a201      	add	r2, pc, #4	; (adr r2, 8001c64 <AUDIO_PLAYER_Process+0x20>)
 8001c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c64:	08001c91 	.word	0x08001c91
 8001c68:	08001e4b 	.word	0x08001e4b
 8001c6c:	08001d57 	.word	0x08001d57
 8001c70:	08001da5 	.word	0x08001da5
 8001c74:	08001e4b 	.word	0x08001e4b
 8001c78:	08001e4b 	.word	0x08001e4b
 8001c7c:	08001d45 	.word	0x08001d45
 8001c80:	08001de7 	.word	0x08001de7
 8001c84:	08001df3 	.word	0x08001df3
 8001c88:	08001dff 	.word	0x08001dff
 8001c8c:	08001e25 	.word	0x08001e25
  {
  case AUDIO_STATE_PLAY:
    if(BufferCtl.fptr >= WaveFormat.FileSize)
 8001c90:	4b73      	ldr	r3, [pc, #460]	; (8001e60 <AUDIO_PLAYER_Process+0x21c>)
 8001c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	4b72      	ldr	r3, [pc, #456]	; (8001e64 <AUDIO_PLAYER_Process+0x220>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d305      	bcc.n	8001cac <AUDIO_PLAYER_Process+0x68>
    {
      AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001ca0:	2002      	movs	r0, #2
 8001ca2:	f7fe fcbb 	bl	800061c <AUDIO_OUT_Stop>
      AudioState = AUDIO_STATE_NEXT;
 8001ca6:	4b6d      	ldr	r3, [pc, #436]	; (8001e5c <AUDIO_PLAYER_Process+0x218>)
 8001ca8:	2205      	movs	r2, #5
 8001caa:	701a      	strb	r2, [r3, #0]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_HALF)
 8001cac:	4b6c      	ldr	r3, [pc, #432]	; (8001e60 <AUDIO_PLAYER_Process+0x21c>)
 8001cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d11e      	bne.n	8001cf6 <AUDIO_PLAYER_Process+0xb2>
    {
      if(f_read(&WavFile, &BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cc0:	4967      	ldr	r1, [pc, #412]	; (8001e60 <AUDIO_PLAYER_Process+0x21c>)
 8001cc2:	4869      	ldr	r0, [pc, #420]	; (8001e68 <AUDIO_PLAYER_Process+0x224>)
 8001cc4:	f00c fa78 	bl	800e1b8 <f_read>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d004      	beq.n	8001cd8 <AUDIO_PLAYER_Process+0x94>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001cce:	2002      	movs	r0, #2
 8001cd0:	f7fe fca4 	bl	800061c <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e0bc      	b.n	8001e52 <AUDIO_PLAYER_Process+0x20e>
      } 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8001cd8:	4b61      	ldr	r3, [pc, #388]	; (8001e60 <AUDIO_PLAYER_Process+0x21c>)
 8001cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8001ce2:	4b5f      	ldr	r3, [pc, #380]	; (8001e60 <AUDIO_PLAYER_Process+0x21c>)
 8001ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	4413      	add	r3, r2
 8001cee:	4a5c      	ldr	r2, [pc, #368]	; (8001e60 <AUDIO_PLAYER_Process+0x21c>)
 8001cf0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cf4:	6053      	str	r3, [r2, #4]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_FULL)
 8001cf6:	4b5a      	ldr	r3, [pc, #360]	; (8001e60 <AUDIO_PLAYER_Process+0x21c>)
 8001cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	f040 80a5 	bne.w	8001e4e <AUDIO_PLAYER_Process+0x20a>
    {
      if(f_read(&WavFile, &BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE /2], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8001d04:	f107 0308 	add.w	r3, r7, #8
 8001d08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d0c:	4957      	ldr	r1, [pc, #348]	; (8001e6c <AUDIO_PLAYER_Process+0x228>)
 8001d0e:	4856      	ldr	r0, [pc, #344]	; (8001e68 <AUDIO_PLAYER_Process+0x224>)
 8001d10:	f00c fa52 	bl	800e1b8 <f_read>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d004      	beq.n	8001d24 <AUDIO_PLAYER_Process+0xe0>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001d1a:	2002      	movs	r0, #2
 8001d1c:	f7fe fc7e 	bl	800061c <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8001d20:	2301      	movs	r3, #1
 8001d22:	e096      	b.n	8001e52 <AUDIO_PLAYER_Process+0x20e>
      } 
 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8001d24:	4b4e      	ldr	r3, [pc, #312]	; (8001e60 <AUDIO_PLAYER_Process+0x21c>)
 8001d26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8001d2e:	4b4c      	ldr	r3, [pc, #304]	; (8001e60 <AUDIO_PLAYER_Process+0x21c>)
 8001d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	4413      	add	r3, r2
 8001d3a:	4a49      	ldr	r2, [pc, #292]	; (8001e60 <AUDIO_PLAYER_Process+0x21c>)
 8001d3c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d40:	6053      	str	r3, [r2, #4]
    }
    break;
 8001d42:	e084      	b.n	8001e4e <AUDIO_PLAYER_Process+0x20a>
    
  case AUDIO_STATE_STOP:
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001d44:	2002      	movs	r0, #2
 8001d46:	f7fe fc69 	bl	800061c <AUDIO_OUT_Stop>
    AudioState = AUDIO_STATE_IDLE; 
 8001d4a:	4b44      	ldr	r3, [pc, #272]	; (8001e5c <AUDIO_PLAYER_Process+0x218>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
    audio_error = AUDIO_ERROR_IO;
 8001d50:	2301      	movs	r3, #1
 8001d52:	73fb      	strb	r3, [r7, #15]
    break;
 8001d54:	e07c      	b.n	8001e50 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_NEXT:
    if(++FilePos >= AUDIO_GetWavObjectNumber())
 8001d56:	4b46      	ldr	r3, [pc, #280]	; (8001e70 <AUDIO_PLAYER_Process+0x22c>)
 8001d58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	3301      	adds	r3, #1
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	b21a      	sxth	r2, r3
 8001d64:	4b42      	ldr	r3, [pc, #264]	; (8001e70 <AUDIO_PLAYER_Process+0x22c>)
 8001d66:	801a      	strh	r2, [r3, #0]
 8001d68:	4b41      	ldr	r3, [pc, #260]	; (8001e70 <AUDIO_PLAYER_Process+0x22c>)
 8001d6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d6e:	461c      	mov	r4, r3
 8001d70:	f7ff f816 	bl	8000da0 <AUDIO_GetWavObjectNumber>
 8001d74:	4603      	mov	r3, r0
 8001d76:	429c      	cmp	r4, r3
 8001d78:	db09      	blt.n	8001d8e <AUDIO_PLAYER_Process+0x14a>
    {
    	if (isLoop)
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <AUDIO_PLAYER_Process+0x144>
    	{
    		FilePos = 0;
 8001d80:	4b3b      	ldr	r3, [pc, #236]	; (8001e70 <AUDIO_PLAYER_Process+0x22c>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	801a      	strh	r2, [r3, #0]
 8001d86:	e002      	b.n	8001d8e <AUDIO_PLAYER_Process+0x14a>
    	}
    	else
    	{
    		AudioState =AUDIO_STATE_STOP;
 8001d88:	4b34      	ldr	r3, [pc, #208]	; (8001e5c <AUDIO_PLAYER_Process+0x218>)
 8001d8a:	2209      	movs	r2, #9
 8001d8c:	701a      	strb	r2, [r3, #0]
    	}
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001d8e:	2002      	movs	r0, #2
 8001d90:	f7fe fc44 	bl	800061c <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8001d94:	4b36      	ldr	r3, [pc, #216]	; (8001e70 <AUDIO_PLAYER_Process+0x22c>)
 8001d96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fef1 	bl	8001b84 <AUDIO_PLAYER_Start>
    break;    
 8001da2:	e055      	b.n	8001e50 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_PREVIOUS:
    if(--FilePos < 0)
 8001da4:	4b32      	ldr	r3, [pc, #200]	; (8001e70 <AUDIO_PLAYER_Process+0x22c>)
 8001da6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	3b01      	subs	r3, #1
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	b21a      	sxth	r2, r3
 8001db2:	4b2f      	ldr	r3, [pc, #188]	; (8001e70 <AUDIO_PLAYER_Process+0x22c>)
 8001db4:	801a      	strh	r2, [r3, #0]
 8001db6:	4b2e      	ldr	r3, [pc, #184]	; (8001e70 <AUDIO_PLAYER_Process+0x22c>)
 8001db8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	da07      	bge.n	8001dd0 <AUDIO_PLAYER_Process+0x18c>
    {
      FilePos = AUDIO_GetWavObjectNumber() - 1;
 8001dc0:	f7fe ffee 	bl	8000da0 <AUDIO_GetWavObjectNumber>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	b21a      	sxth	r2, r3
 8001dcc:	4b28      	ldr	r3, [pc, #160]	; (8001e70 <AUDIO_PLAYER_Process+0x22c>)
 8001dce:	801a      	strh	r2, [r3, #0]
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001dd0:	2002      	movs	r0, #2
 8001dd2:	f7fe fc23 	bl	800061c <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8001dd6:	4b26      	ldr	r3, [pc, #152]	; (8001e70 <AUDIO_PLAYER_Process+0x22c>)
 8001dd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fed0 	bl	8001b84 <AUDIO_PLAYER_Start>
    break;   
 8001de4:	e034      	b.n	8001e50 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_PAUSE:
    AUDIO_OUT_Pause();
 8001de6:	f7fe fbed 	bl	80005c4 <AUDIO_OUT_Pause>
    AudioState = AUDIO_STATE_WAIT;
 8001dea:	4b1c      	ldr	r3, [pc, #112]	; (8001e5c <AUDIO_PLAYER_Process+0x218>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	701a      	strb	r2, [r3, #0]
    break;
 8001df0:	e02e      	b.n	8001e50 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_RESUME:
    AUDIO_OUT_Resume();
 8001df2:	f7fe fbfd 	bl	80005f0 <AUDIO_OUT_Resume>
    AudioState = AUDIO_STATE_PLAY;
 8001df6:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <AUDIO_PLAYER_Process+0x218>)
 8001df8:	2203      	movs	r2, #3
 8001dfa:	701a      	strb	r2, [r3, #0]
    break;
 8001dfc:	e028      	b.n	8001e50 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_VOLUME_UP: 
    if( uwVolume <= 90)
 8001dfe:	4b1d      	ldr	r3, [pc, #116]	; (8001e74 <AUDIO_PLAYER_Process+0x230>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2b5a      	cmp	r3, #90	; 0x5a
 8001e04:	d804      	bhi.n	8001e10 <AUDIO_PLAYER_Process+0x1cc>
    {
      uwVolume += 10;
 8001e06:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <AUDIO_PLAYER_Process+0x230>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	330a      	adds	r3, #10
 8001e0c:	4a19      	ldr	r2, [pc, #100]	; (8001e74 <AUDIO_PLAYER_Process+0x230>)
 8001e0e:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 8001e10:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <AUDIO_PLAYER_Process+0x230>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fc28 	bl	800066c <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <AUDIO_PLAYER_Process+0x218>)
 8001e1e:	2203      	movs	r2, #3
 8001e20:	701a      	strb	r2, [r3, #0]
    break;
 8001e22:	e015      	b.n	8001e50 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_VOLUME_DOWN:    
    if( uwVolume >= 10)
 8001e24:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <AUDIO_PLAYER_Process+0x230>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b09      	cmp	r3, #9
 8001e2a:	d904      	bls.n	8001e36 <AUDIO_PLAYER_Process+0x1f2>
    {
      uwVolume -= 10;
 8001e2c:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <AUDIO_PLAYER_Process+0x230>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	3b0a      	subs	r3, #10
 8001e32:	4a10      	ldr	r2, [pc, #64]	; (8001e74 <AUDIO_PLAYER_Process+0x230>)
 8001e34:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 8001e36:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <AUDIO_PLAYER_Process+0x230>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fc15 	bl	800066c <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <AUDIO_PLAYER_Process+0x218>)
 8001e44:	2203      	movs	r2, #3
 8001e46:	701a      	strb	r2, [r3, #0]
    break;
 8001e48:	e002      	b.n	8001e50 <AUDIO_PLAYER_Process+0x20c>
  case AUDIO_STATE_WAIT:
  case AUDIO_STATE_IDLE:
  case AUDIO_STATE_INIT:    
  default:
    /* Do Nothing */
    break;
 8001e4a:	bf00      	nop
 8001e4c:	e000      	b.n	8001e50 <AUDIO_PLAYER_Process+0x20c>
    break;
 8001e4e:	bf00      	nop
  }
  return audio_error;
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd90      	pop	{r4, r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	200012e8 	.word	0x200012e8
 8001e60:	200002e0 	.word	0x200002e0
 8001e64:	200016c8 	.word	0x200016c8
 8001e68:	200016f4 	.word	0x200016f4
 8001e6c:	20000ae0 	.word	0x20000ae0
 8001e70:	200012ea 	.word	0x200012ea
 8001e74:	2000003c 	.word	0x2000003c

08001e78 <AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_TransferComplete_CallBack(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8001e7c:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <AUDIO_OUT_TransferComplete_CallBack+0x20>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b03      	cmp	r3, #3
 8001e82:	d104      	bne.n	8001e8e <AUDIO_OUT_TransferComplete_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_FULL;
 8001e84:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <AUDIO_OUT_TransferComplete_CallBack+0x24>)
 8001e86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	701a      	strb	r2, [r3, #0]
  }
}
 8001e8e:	bf00      	nop
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	200012e8 	.word	0x200012e8
 8001e9c:	200002e0 	.word	0x200002e0

08001ea0 <AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b03      	cmp	r3, #3
 8001eaa:	d104      	bne.n	8001eb6 <AUDIO_OUT_HalfTransfer_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_HALF;
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 8001eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	701a      	strb	r2, [r3, #0]
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	200012e8 	.word	0x200012e8
 8001ec4:	200002e0 	.word	0x200002e0

08001ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ecc:	480d      	ldr	r0, [pc, #52]	; (8001f04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ece:	490e      	ldr	r1, [pc, #56]	; (8001f08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ed0:	4a0e      	ldr	r2, [pc, #56]	; (8001f0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed4:	e002      	b.n	8001edc <LoopCopyDataInit>

08001ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eda:	3304      	adds	r3, #4

08001edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee0:	d3f9      	bcc.n	8001ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee2:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ee4:	4c0b      	ldr	r4, [pc, #44]	; (8001f14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee8:	e001      	b.n	8001eee <LoopFillZerobss>

08001eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eec:	3204      	adds	r2, #4

08001eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef0:	d3fb      	bcc.n	8001eea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ef2:	f7ff fe1d 	bl	8001b30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ef6:	f00d fb83 	bl	800f600 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001efa:	f7ff fab5 	bl	8001468 <main>
  bx  lr    
 8001efe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f08:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8001f0c:	0800fc50 	.word	0x0800fc50
  ldr r2, =_sbss
 8001f10:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8001f14:	200025c0 	.word	0x200025c0

08001f18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f18:	e7fe      	b.n	8001f18 <ADC_IRQHandler>
	...

08001f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f20:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <HAL_Init+0x40>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0d      	ldr	r2, [pc, #52]	; (8001f5c <HAL_Init+0x40>)
 8001f26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_Init+0x40>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a0a      	ldr	r2, [pc, #40]	; (8001f5c <HAL_Init+0x40>)
 8001f32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <HAL_Init+0x40>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a07      	ldr	r2, [pc, #28]	; (8001f5c <HAL_Init+0x40>)
 8001f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f44:	2003      	movs	r0, #3
 8001f46:	f000 f94f 	bl	80021e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	f000 f808 	bl	8001f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f50:	f7ff fc1e 	bl	8001790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40023c00 	.word	0x40023c00

08001f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f68:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <HAL_InitTick+0x54>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <HAL_InitTick+0x58>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	4619      	mov	r1, r3
 8001f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 f967 	bl	8002252 <HAL_SYSTICK_Config>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e00e      	b.n	8001fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b0f      	cmp	r3, #15
 8001f92:	d80a      	bhi.n	8001faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f94:	2200      	movs	r2, #0
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9c:	f000 f92f 	bl	80021fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fa0:	4a06      	ldr	r2, [pc, #24]	; (8001fbc <HAL_InitTick+0x5c>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e000      	b.n	8001fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000038 	.word	0x20000038
 8001fb8:	20000044 	.word	0x20000044
 8001fbc:	20000040 	.word	0x20000040

08001fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_IncTick+0x20>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_IncTick+0x24>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4413      	add	r3, r2
 8001fd0:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <HAL_IncTick+0x24>)
 8001fd2:	6013      	str	r3, [r2, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000044 	.word	0x20000044
 8001fe4:	20001924 	.word	0x20001924

08001fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return uwTick;
 8001fec:	4b03      	ldr	r3, [pc, #12]	; (8001ffc <HAL_GetTick+0x14>)
 8001fee:	681b      	ldr	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	20001924 	.word	0x20001924

08002000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002008:	f7ff ffee 	bl	8001fe8 <HAL_GetTick>
 800200c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002018:	d005      	beq.n	8002026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800201a:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <HAL_Delay+0x44>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4413      	add	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002026:	bf00      	nop
 8002028:	f7ff ffde 	bl	8001fe8 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	429a      	cmp	r2, r3
 8002036:	d8f7      	bhi.n	8002028 <HAL_Delay+0x28>
  {
  }
}
 8002038:	bf00      	nop
 800203a:	bf00      	nop
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000044 	.word	0x20000044

08002048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <__NVIC_SetPriorityGrouping+0x44>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002064:	4013      	ands	r3, r2
 8002066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800207a:	4a04      	ldr	r2, [pc, #16]	; (800208c <__NVIC_SetPriorityGrouping+0x44>)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	60d3      	str	r3, [r2, #12]
}
 8002080:	bf00      	nop
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	0a1b      	lsrs	r3, r3, #8
 800209a:	f003 0307 	and.w	r3, r3, #7
}
 800209e:	4618      	mov	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	db0b      	blt.n	80020d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	f003 021f 	and.w	r2, r3, #31
 80020c4:	4907      	ldr	r1, [pc, #28]	; (80020e4 <__NVIC_EnableIRQ+0x38>)
 80020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ca:	095b      	lsrs	r3, r3, #5
 80020cc:	2001      	movs	r0, #1
 80020ce:	fa00 f202 	lsl.w	r2, r0, r2
 80020d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	e000e100 	.word	0xe000e100

080020e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	6039      	str	r1, [r7, #0]
 80020f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	db0a      	blt.n	8002112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	490c      	ldr	r1, [pc, #48]	; (8002134 <__NVIC_SetPriority+0x4c>)
 8002102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002106:	0112      	lsls	r2, r2, #4
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	440b      	add	r3, r1
 800210c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002110:	e00a      	b.n	8002128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	b2da      	uxtb	r2, r3
 8002116:	4908      	ldr	r1, [pc, #32]	; (8002138 <__NVIC_SetPriority+0x50>)
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	3b04      	subs	r3, #4
 8002120:	0112      	lsls	r2, r2, #4
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	440b      	add	r3, r1
 8002126:	761a      	strb	r2, [r3, #24]
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	e000e100 	.word	0xe000e100
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800213c:	b480      	push	{r7}
 800213e:	b089      	sub	sp, #36	; 0x24
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f1c3 0307 	rsb	r3, r3, #7
 8002156:	2b04      	cmp	r3, #4
 8002158:	bf28      	it	cs
 800215a:	2304      	movcs	r3, #4
 800215c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3304      	adds	r3, #4
 8002162:	2b06      	cmp	r3, #6
 8002164:	d902      	bls.n	800216c <NVIC_EncodePriority+0x30>
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3b03      	subs	r3, #3
 800216a:	e000      	b.n	800216e <NVIC_EncodePriority+0x32>
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002170:	f04f 32ff 	mov.w	r2, #4294967295
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43da      	mvns	r2, r3
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	401a      	ands	r2, r3
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002184:	f04f 31ff 	mov.w	r1, #4294967295
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	fa01 f303 	lsl.w	r3, r1, r3
 800218e:	43d9      	mvns	r1, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002194:	4313      	orrs	r3, r2
         );
}
 8002196:	4618      	mov	r0, r3
 8002198:	3724      	adds	r7, #36	; 0x24
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
	...

080021a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021b4:	d301      	bcc.n	80021ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021b6:	2301      	movs	r3, #1
 80021b8:	e00f      	b.n	80021da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ba:	4a0a      	ldr	r2, [pc, #40]	; (80021e4 <SysTick_Config+0x40>)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3b01      	subs	r3, #1
 80021c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021c2:	210f      	movs	r1, #15
 80021c4:	f04f 30ff 	mov.w	r0, #4294967295
 80021c8:	f7ff ff8e 	bl	80020e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021cc:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <SysTick_Config+0x40>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021d2:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <SysTick_Config+0x40>)
 80021d4:	2207      	movs	r2, #7
 80021d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	e000e010 	.word	0xe000e010

080021e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff ff29 	bl	8002048 <__NVIC_SetPriorityGrouping>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021fe:	b580      	push	{r7, lr}
 8002200:	b086      	sub	sp, #24
 8002202:	af00      	add	r7, sp, #0
 8002204:	4603      	mov	r3, r0
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	607a      	str	r2, [r7, #4]
 800220a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002210:	f7ff ff3e 	bl	8002090 <__NVIC_GetPriorityGrouping>
 8002214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68b9      	ldr	r1, [r7, #8]
 800221a:	6978      	ldr	r0, [r7, #20]
 800221c:	f7ff ff8e 	bl	800213c <NVIC_EncodePriority>
 8002220:	4602      	mov	r2, r0
 8002222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002226:	4611      	mov	r1, r2
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff ff5d 	bl	80020e8 <__NVIC_SetPriority>
}
 800222e:	bf00      	nop
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	4603      	mov	r3, r0
 800223e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ff31 	bl	80020ac <__NVIC_EnableIRQ>
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff ffa2 	bl	80021a4 <SysTick_Config>
 8002260:	4603      	mov	r3, r0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002278:	f7ff feb6 	bl	8001fe8 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e099      	b.n	80023bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2202      	movs	r2, #2
 800228c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 0201 	bic.w	r2, r2, #1
 80022a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022a8:	e00f      	b.n	80022ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022aa:	f7ff fe9d 	bl	8001fe8 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b05      	cmp	r3, #5
 80022b6:	d908      	bls.n	80022ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2220      	movs	r2, #32
 80022bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2203      	movs	r2, #3
 80022c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e078      	b.n	80023bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1e8      	bne.n	80022aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	4b38      	ldr	r3, [pc, #224]	; (80023c4 <HAL_DMA_Init+0x158>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002302:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800230e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	4313      	orrs	r3, r2
 800231a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	2b04      	cmp	r3, #4
 8002322:	d107      	bne.n	8002334 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	4313      	orrs	r3, r2
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	4313      	orrs	r3, r2
 8002332:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f023 0307 	bic.w	r3, r3, #7
 800234a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	4313      	orrs	r3, r2
 8002354:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	2b04      	cmp	r3, #4
 800235c:	d117      	bne.n	800238e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	4313      	orrs	r3, r2
 8002366:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00e      	beq.n	800238e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 fb3d 	bl	80029f0 <DMA_CheckFifoParam>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2240      	movs	r2, #64	; 0x40
 8002380:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800238a:	2301      	movs	r3, #1
 800238c:	e016      	b.n	80023bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 faf4 	bl	8002984 <DMA_CalcBaseAndBitshift>
 800239c:	4603      	mov	r3, r0
 800239e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a4:	223f      	movs	r2, #63	; 0x3f
 80023a6:	409a      	lsls	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	f010803f 	.word	0xf010803f

080023c8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e050      	b.n	800247c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d101      	bne.n	80023ea <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80023e6:	2302      	movs	r3, #2
 80023e8:	e048      	b.n	800247c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0201 	bic.w	r2, r2, #1
 80023f8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2200      	movs	r2, #0
 8002408:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2200      	movs	r2, #0
 8002410:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2200      	movs	r2, #0
 8002418:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2200      	movs	r2, #0
 8002420:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2221      	movs	r2, #33	; 0x21
 8002428:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 faaa 	bl	8002984 <DMA_CalcBaseAndBitshift>
 8002430:	4603      	mov	r3, r0
 8002432:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245c:	223f      	movs	r2, #63	; 0x3f
 800245e:	409a      	lsls	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
 8002490:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d101      	bne.n	80024aa <HAL_DMA_Start_IT+0x26>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e040      	b.n	800252c <HAL_DMA_Start_IT+0xa8>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d12f      	bne.n	800251e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2202      	movs	r2, #2
 80024c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	68b9      	ldr	r1, [r7, #8]
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 fa28 	bl	8002928 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024dc:	223f      	movs	r2, #63	; 0x3f
 80024de:	409a      	lsls	r2, r3
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0216 	orr.w	r2, r2, #22
 80024f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d007      	beq.n	800250c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0208 	orr.w	r2, r2, #8
 800250a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 0201 	orr.w	r2, r2, #1
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	e005      	b.n	800252a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002526:	2302      	movs	r3, #2
 8002528:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800252a:	7dfb      	ldrb	r3, [r7, #23]
}
 800252c:	4618      	mov	r0, r3
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002540:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002542:	f7ff fd51 	bl	8001fe8 <HAL_GetTick>
 8002546:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d008      	beq.n	8002566 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2280      	movs	r2, #128	; 0x80
 8002558:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e052      	b.n	800260c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0216 	bic.w	r2, r2, #22
 8002574:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695a      	ldr	r2, [r3, #20]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002584:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	2b00      	cmp	r3, #0
 800258c:	d103      	bne.n	8002596 <HAL_DMA_Abort+0x62>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002592:	2b00      	cmp	r3, #0
 8002594:	d007      	beq.n	80025a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0208 	bic.w	r2, r2, #8
 80025a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 0201 	bic.w	r2, r2, #1
 80025b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025b6:	e013      	b.n	80025e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025b8:	f7ff fd16 	bl	8001fe8 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b05      	cmp	r3, #5
 80025c4:	d90c      	bls.n	80025e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2220      	movs	r2, #32
 80025ca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2203      	movs	r2, #3
 80025d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e015      	b.n	800260c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1e4      	bne.n	80025b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f2:	223f      	movs	r2, #63	; 0x3f
 80025f4:	409a      	lsls	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002620:	4b8e      	ldr	r3, [pc, #568]	; (800285c <HAL_DMA_IRQHandler+0x248>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a8e      	ldr	r2, [pc, #568]	; (8002860 <HAL_DMA_IRQHandler+0x24c>)
 8002626:	fba2 2303 	umull	r2, r3, r2, r3
 800262a:	0a9b      	lsrs	r3, r3, #10
 800262c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002632:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263e:	2208      	movs	r2, #8
 8002640:	409a      	lsls	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4013      	ands	r3, r2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d01a      	beq.n	8002680 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d013      	beq.n	8002680 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0204 	bic.w	r2, r2, #4
 8002666:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266c:	2208      	movs	r2, #8
 800266e:	409a      	lsls	r2, r3
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002678:	f043 0201 	orr.w	r2, r3, #1
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002684:	2201      	movs	r2, #1
 8002686:	409a      	lsls	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4013      	ands	r3, r2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d012      	beq.n	80026b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00b      	beq.n	80026b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a2:	2201      	movs	r2, #1
 80026a4:	409a      	lsls	r2, r3
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ae:	f043 0202 	orr.w	r2, r3, #2
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ba:	2204      	movs	r2, #4
 80026bc:	409a      	lsls	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4013      	ands	r3, r2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d012      	beq.n	80026ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00b      	beq.n	80026ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d8:	2204      	movs	r2, #4
 80026da:	409a      	lsls	r2, r3
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e4:	f043 0204 	orr.w	r2, r3, #4
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f0:	2210      	movs	r2, #16
 80026f2:	409a      	lsls	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d043      	beq.n	8002784 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d03c      	beq.n	8002784 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270e:	2210      	movs	r2, #16
 8002710:	409a      	lsls	r2, r3
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d018      	beq.n	8002756 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d108      	bne.n	8002744 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	2b00      	cmp	r3, #0
 8002738:	d024      	beq.n	8002784 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	4798      	blx	r3
 8002742:	e01f      	b.n	8002784 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002748:	2b00      	cmp	r3, #0
 800274a:	d01b      	beq.n	8002784 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	4798      	blx	r3
 8002754:	e016      	b.n	8002784 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002760:	2b00      	cmp	r3, #0
 8002762:	d107      	bne.n	8002774 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0208 	bic.w	r2, r2, #8
 8002772:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002788:	2220      	movs	r2, #32
 800278a:	409a      	lsls	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4013      	ands	r3, r2
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 808f 	beq.w	80028b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0310 	and.w	r3, r3, #16
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 8087 	beq.w	80028b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027aa:	2220      	movs	r2, #32
 80027ac:	409a      	lsls	r2, r3
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b05      	cmp	r3, #5
 80027bc:	d136      	bne.n	800282c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0216 	bic.w	r2, r2, #22
 80027cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	695a      	ldr	r2, [r3, #20]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d103      	bne.n	80027ee <HAL_DMA_IRQHandler+0x1da>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d007      	beq.n	80027fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 0208 	bic.w	r2, r2, #8
 80027fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002802:	223f      	movs	r2, #63	; 0x3f
 8002804:	409a      	lsls	r2, r3
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800281e:	2b00      	cmp	r3, #0
 8002820:	d07e      	beq.n	8002920 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	4798      	blx	r3
        }
        return;
 800282a:	e079      	b.n	8002920 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d01d      	beq.n	8002876 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10d      	bne.n	8002864 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284c:	2b00      	cmp	r3, #0
 800284e:	d031      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	4798      	blx	r3
 8002858:	e02c      	b.n	80028b4 <HAL_DMA_IRQHandler+0x2a0>
 800285a:	bf00      	nop
 800285c:	20000038 	.word	0x20000038
 8002860:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002868:	2b00      	cmp	r3, #0
 800286a:	d023      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	4798      	blx	r3
 8002874:	e01e      	b.n	80028b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10f      	bne.n	80028a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0210 	bic.w	r2, r2, #16
 8002892:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d032      	beq.n	8002922 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d022      	beq.n	800290e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2205      	movs	r2, #5
 80028cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0201 	bic.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	3301      	adds	r3, #1
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d307      	bcc.n	80028fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f2      	bne.n	80028e0 <HAL_DMA_IRQHandler+0x2cc>
 80028fa:	e000      	b.n	80028fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002912:	2b00      	cmp	r3, #0
 8002914:	d005      	beq.n	8002922 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	4798      	blx	r3
 800291e:	e000      	b.n	8002922 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002920:	bf00      	nop
    }
  }
}
 8002922:	3718      	adds	r7, #24
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
 8002934:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002944:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2b40      	cmp	r3, #64	; 0x40
 8002954:	d108      	bne.n	8002968 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002966:	e007      	b.n	8002978 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	60da      	str	r2, [r3, #12]
}
 8002978:	bf00      	nop
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	b2db      	uxtb	r3, r3
 8002992:	3b10      	subs	r3, #16
 8002994:	4a14      	ldr	r2, [pc, #80]	; (80029e8 <DMA_CalcBaseAndBitshift+0x64>)
 8002996:	fba2 2303 	umull	r2, r3, r2, r3
 800299a:	091b      	lsrs	r3, r3, #4
 800299c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800299e:	4a13      	ldr	r2, [pc, #76]	; (80029ec <DMA_CalcBaseAndBitshift+0x68>)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4413      	add	r3, r2
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2b03      	cmp	r3, #3
 80029b0:	d909      	bls.n	80029c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029ba:	f023 0303 	bic.w	r3, r3, #3
 80029be:	1d1a      	adds	r2, r3, #4
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	659a      	str	r2, [r3, #88]	; 0x58
 80029c4:	e007      	b.n	80029d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029ce:	f023 0303 	bic.w	r3, r3, #3
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	aaaaaaab 	.word	0xaaaaaaab
 80029ec:	0800f7e4 	.word	0x0800f7e4

080029f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029f8:	2300      	movs	r3, #0
 80029fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d11f      	bne.n	8002a4a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	d856      	bhi.n	8002abe <DMA_CheckFifoParam+0xce>
 8002a10:	a201      	add	r2, pc, #4	; (adr r2, 8002a18 <DMA_CheckFifoParam+0x28>)
 8002a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a16:	bf00      	nop
 8002a18:	08002a29 	.word	0x08002a29
 8002a1c:	08002a3b 	.word	0x08002a3b
 8002a20:	08002a29 	.word	0x08002a29
 8002a24:	08002abf 	.word	0x08002abf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d046      	beq.n	8002ac2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a38:	e043      	b.n	8002ac2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a42:	d140      	bne.n	8002ac6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a48:	e03d      	b.n	8002ac6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a52:	d121      	bne.n	8002a98 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d837      	bhi.n	8002aca <DMA_CheckFifoParam+0xda>
 8002a5a:	a201      	add	r2, pc, #4	; (adr r2, 8002a60 <DMA_CheckFifoParam+0x70>)
 8002a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a60:	08002a71 	.word	0x08002a71
 8002a64:	08002a77 	.word	0x08002a77
 8002a68:	08002a71 	.word	0x08002a71
 8002a6c:	08002a89 	.word	0x08002a89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
      break;
 8002a74:	e030      	b.n	8002ad8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d025      	beq.n	8002ace <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a86:	e022      	b.n	8002ace <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a90:	d11f      	bne.n	8002ad2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a96:	e01c      	b.n	8002ad2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d903      	bls.n	8002aa6 <DMA_CheckFifoParam+0xb6>
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	d003      	beq.n	8002aac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002aa4:	e018      	b.n	8002ad8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	73fb      	strb	r3, [r7, #15]
      break;
 8002aaa:	e015      	b.n	8002ad8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00e      	beq.n	8002ad6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
      break;
 8002abc:	e00b      	b.n	8002ad6 <DMA_CheckFifoParam+0xe6>
      break;
 8002abe:	bf00      	nop
 8002ac0:	e00a      	b.n	8002ad8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ac2:	bf00      	nop
 8002ac4:	e008      	b.n	8002ad8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ac6:	bf00      	nop
 8002ac8:	e006      	b.n	8002ad8 <DMA_CheckFifoParam+0xe8>
      break;
 8002aca:	bf00      	nop
 8002acc:	e004      	b.n	8002ad8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ace:	bf00      	nop
 8002ad0:	e002      	b.n	8002ad8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ad2:	bf00      	nop
 8002ad4:	e000      	b.n	8002ad8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ad6:	bf00      	nop
    }
  } 
  
  return status; 
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop

08002ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b089      	sub	sp, #36	; 0x24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
 8002b02:	e159      	b.n	8002db8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b04:	2201      	movs	r2, #1
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4013      	ands	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	f040 8148 	bne.w	8002db2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d005      	beq.n	8002b3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d130      	bne.n	8002b9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	2203      	movs	r2, #3
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b70:	2201      	movs	r2, #1
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	091b      	lsrs	r3, r3, #4
 8002b86:	f003 0201 	and.w	r2, r3, #1
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 0303 	and.w	r3, r3, #3
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d017      	beq.n	8002bd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	2203      	movs	r2, #3
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d123      	bne.n	8002c2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	08da      	lsrs	r2, r3, #3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3208      	adds	r2, #8
 8002bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	220f      	movs	r2, #15
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	08da      	lsrs	r2, r3, #3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3208      	adds	r2, #8
 8002c26:	69b9      	ldr	r1, [r7, #24]
 8002c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	2203      	movs	r2, #3
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 0203 	and.w	r2, r3, #3
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 80a2 	beq.w	8002db2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	4b57      	ldr	r3, [pc, #348]	; (8002dd0 <HAL_GPIO_Init+0x2e8>)
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	4a56      	ldr	r2, [pc, #344]	; (8002dd0 <HAL_GPIO_Init+0x2e8>)
 8002c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c7e:	4b54      	ldr	r3, [pc, #336]	; (8002dd0 <HAL_GPIO_Init+0x2e8>)
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c8a:	4a52      	ldr	r2, [pc, #328]	; (8002dd4 <HAL_GPIO_Init+0x2ec>)
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	089b      	lsrs	r3, r3, #2
 8002c90:	3302      	adds	r3, #2
 8002c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4013      	ands	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a49      	ldr	r2, [pc, #292]	; (8002dd8 <HAL_GPIO_Init+0x2f0>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d019      	beq.n	8002cea <HAL_GPIO_Init+0x202>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a48      	ldr	r2, [pc, #288]	; (8002ddc <HAL_GPIO_Init+0x2f4>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d013      	beq.n	8002ce6 <HAL_GPIO_Init+0x1fe>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a47      	ldr	r2, [pc, #284]	; (8002de0 <HAL_GPIO_Init+0x2f8>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d00d      	beq.n	8002ce2 <HAL_GPIO_Init+0x1fa>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a46      	ldr	r2, [pc, #280]	; (8002de4 <HAL_GPIO_Init+0x2fc>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d007      	beq.n	8002cde <HAL_GPIO_Init+0x1f6>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a45      	ldr	r2, [pc, #276]	; (8002de8 <HAL_GPIO_Init+0x300>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d101      	bne.n	8002cda <HAL_GPIO_Init+0x1f2>
 8002cd6:	2304      	movs	r3, #4
 8002cd8:	e008      	b.n	8002cec <HAL_GPIO_Init+0x204>
 8002cda:	2307      	movs	r3, #7
 8002cdc:	e006      	b.n	8002cec <HAL_GPIO_Init+0x204>
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e004      	b.n	8002cec <HAL_GPIO_Init+0x204>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	e002      	b.n	8002cec <HAL_GPIO_Init+0x204>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e000      	b.n	8002cec <HAL_GPIO_Init+0x204>
 8002cea:	2300      	movs	r3, #0
 8002cec:	69fa      	ldr	r2, [r7, #28]
 8002cee:	f002 0203 	and.w	r2, r2, #3
 8002cf2:	0092      	lsls	r2, r2, #2
 8002cf4:	4093      	lsls	r3, r2
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cfc:	4935      	ldr	r1, [pc, #212]	; (8002dd4 <HAL_GPIO_Init+0x2ec>)
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	089b      	lsrs	r3, r3, #2
 8002d02:	3302      	adds	r3, #2
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d0a:	4b38      	ldr	r3, [pc, #224]	; (8002dec <HAL_GPIO_Init+0x304>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	43db      	mvns	r3, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4013      	ands	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d2e:	4a2f      	ldr	r2, [pc, #188]	; (8002dec <HAL_GPIO_Init+0x304>)
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d34:	4b2d      	ldr	r3, [pc, #180]	; (8002dec <HAL_GPIO_Init+0x304>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d58:	4a24      	ldr	r2, [pc, #144]	; (8002dec <HAL_GPIO_Init+0x304>)
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d5e:	4b23      	ldr	r3, [pc, #140]	; (8002dec <HAL_GPIO_Init+0x304>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	43db      	mvns	r3, r3
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d82:	4a1a      	ldr	r2, [pc, #104]	; (8002dec <HAL_GPIO_Init+0x304>)
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d88:	4b18      	ldr	r3, [pc, #96]	; (8002dec <HAL_GPIO_Init+0x304>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	43db      	mvns	r3, r3
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4013      	ands	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d003      	beq.n	8002dac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dac:	4a0f      	ldr	r2, [pc, #60]	; (8002dec <HAL_GPIO_Init+0x304>)
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	3301      	adds	r3, #1
 8002db6:	61fb      	str	r3, [r7, #28]
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	2b0f      	cmp	r3, #15
 8002dbc:	f67f aea2 	bls.w	8002b04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dc0:	bf00      	nop
 8002dc2:	bf00      	nop
 8002dc4:	3724      	adds	r7, #36	; 0x24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	40013800 	.word	0x40013800
 8002dd8:	40020000 	.word	0x40020000
 8002ddc:	40020400 	.word	0x40020400
 8002de0:	40020800 	.word	0x40020800
 8002de4:	40020c00 	.word	0x40020c00
 8002de8:	40021000 	.word	0x40021000
 8002dec:	40013c00 	.word	0x40013c00

08002df0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e06:	2300      	movs	r3, #0
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	e0bb      	b.n	8002f84 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	f040 80ab 	bne.w	8002f7e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002e28:	4a5c      	ldr	r2, [pc, #368]	; (8002f9c <HAL_GPIO_DeInit+0x1ac>)
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	089b      	lsrs	r3, r3, #2
 8002e2e:	3302      	adds	r3, #2
 8002e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e34:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f003 0303 	and.w	r3, r3, #3
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	220f      	movs	r2, #15
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	4013      	ands	r3, r2
 8002e48:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a54      	ldr	r2, [pc, #336]	; (8002fa0 <HAL_GPIO_DeInit+0x1b0>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d019      	beq.n	8002e86 <HAL_GPIO_DeInit+0x96>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a53      	ldr	r2, [pc, #332]	; (8002fa4 <HAL_GPIO_DeInit+0x1b4>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d013      	beq.n	8002e82 <HAL_GPIO_DeInit+0x92>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a52      	ldr	r2, [pc, #328]	; (8002fa8 <HAL_GPIO_DeInit+0x1b8>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00d      	beq.n	8002e7e <HAL_GPIO_DeInit+0x8e>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a51      	ldr	r2, [pc, #324]	; (8002fac <HAL_GPIO_DeInit+0x1bc>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d007      	beq.n	8002e7a <HAL_GPIO_DeInit+0x8a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a50      	ldr	r2, [pc, #320]	; (8002fb0 <HAL_GPIO_DeInit+0x1c0>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d101      	bne.n	8002e76 <HAL_GPIO_DeInit+0x86>
 8002e72:	2304      	movs	r3, #4
 8002e74:	e008      	b.n	8002e88 <HAL_GPIO_DeInit+0x98>
 8002e76:	2307      	movs	r3, #7
 8002e78:	e006      	b.n	8002e88 <HAL_GPIO_DeInit+0x98>
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e004      	b.n	8002e88 <HAL_GPIO_DeInit+0x98>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e002      	b.n	8002e88 <HAL_GPIO_DeInit+0x98>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <HAL_GPIO_DeInit+0x98>
 8002e86:	2300      	movs	r3, #0
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	f002 0203 	and.w	r2, r2, #3
 8002e8e:	0092      	lsls	r2, r2, #2
 8002e90:	4093      	lsls	r3, r2
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d132      	bne.n	8002efe <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002e98:	4b46      	ldr	r3, [pc, #280]	; (8002fb4 <HAL_GPIO_DeInit+0x1c4>)
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	4944      	ldr	r1, [pc, #272]	; (8002fb4 <HAL_GPIO_DeInit+0x1c4>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002ea6:	4b43      	ldr	r3, [pc, #268]	; (8002fb4 <HAL_GPIO_DeInit+0x1c4>)
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	43db      	mvns	r3, r3
 8002eae:	4941      	ldr	r1, [pc, #260]	; (8002fb4 <HAL_GPIO_DeInit+0x1c4>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002eb4:	4b3f      	ldr	r3, [pc, #252]	; (8002fb4 <HAL_GPIO_DeInit+0x1c4>)
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	493d      	ldr	r1, [pc, #244]	; (8002fb4 <HAL_GPIO_DeInit+0x1c4>)
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002ec2:	4b3c      	ldr	r3, [pc, #240]	; (8002fb4 <HAL_GPIO_DeInit+0x1c4>)
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	493a      	ldr	r1, [pc, #232]	; (8002fb4 <HAL_GPIO_DeInit+0x1c4>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f003 0303 	and.w	r3, r3, #3
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	220f      	movs	r2, #15
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002ee0:	4a2e      	ldr	r2, [pc, #184]	; (8002f9c <HAL_GPIO_DeInit+0x1ac>)
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	089b      	lsrs	r3, r3, #2
 8002ee6:	3302      	adds	r3, #2
 8002ee8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	43da      	mvns	r2, r3
 8002ef0:	482a      	ldr	r0, [pc, #168]	; (8002f9c <HAL_GPIO_DeInit+0x1ac>)
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	089b      	lsrs	r3, r3, #2
 8002ef6:	400a      	ands	r2, r1
 8002ef8:	3302      	adds	r3, #2
 8002efa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	2103      	movs	r1, #3
 8002f08:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	401a      	ands	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	08da      	lsrs	r2, r3, #3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3208      	adds	r2, #8
 8002f1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	220f      	movs	r2, #15
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	08d2      	lsrs	r2, r2, #3
 8002f34:	4019      	ands	r1, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	3208      	adds	r2, #8
 8002f3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68da      	ldr	r2, [r3, #12]
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	2103      	movs	r1, #3
 8002f48:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	401a      	ands	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	2101      	movs	r1, #1
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f60:	43db      	mvns	r3, r3
 8002f62:	401a      	ands	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	2103      	movs	r1, #3
 8002f72:	fa01 f303 	lsl.w	r3, r1, r3
 8002f76:	43db      	mvns	r3, r3
 8002f78:	401a      	ands	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	3301      	adds	r3, #1
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	2b0f      	cmp	r3, #15
 8002f88:	f67f af40 	bls.w	8002e0c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002f8c:	bf00      	nop
 8002f8e:	bf00      	nop
 8002f90:	371c      	adds	r7, #28
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	40013800 	.word	0x40013800
 8002fa0:	40020000 	.word	0x40020000
 8002fa4:	40020400 	.word	0x40020400
 8002fa8:	40020800 	.word	0x40020800
 8002fac:	40020c00 	.word	0x40020c00
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	40013c00 	.word	0x40013c00

08002fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	807b      	strh	r3, [r7, #2]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fc8:	787b      	ldrb	r3, [r7, #1]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fce:	887a      	ldrh	r2, [r7, #2]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fd4:	e003      	b.n	8002fde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fd6:	887b      	ldrh	r3, [r7, #2]
 8002fd8:	041a      	lsls	r2, r3, #16
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	619a      	str	r2, [r3, #24]
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
	...

08002fec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ff6:	4b08      	ldr	r3, [pc, #32]	; (8003018 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ff8:	695a      	ldr	r2, [r3, #20]
 8002ffa:	88fb      	ldrh	r3, [r7, #6]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d006      	beq.n	8003010 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003002:	4a05      	ldr	r2, [pc, #20]	; (8003018 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003004:	88fb      	ldrh	r3, [r7, #6]
 8003006:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003008:	88fb      	ldrh	r3, [r7, #6]
 800300a:	4618      	mov	r0, r3
 800300c:	f7fe fa18 	bl	8001440 <HAL_GPIO_EXTI_Callback>
  }
}
 8003010:	bf00      	nop
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40013c00 	.word	0x40013c00

0800301c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800301c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800301e:	b08f      	sub	sp, #60	; 0x3c
 8003020:	af0a      	add	r7, sp, #40	; 0x28
 8003022:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e054      	b.n	80030d8 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	d106      	bne.n	800304e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f00b fefb 	bl	800ee44 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2203      	movs	r2, #3
 8003052:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305e:	2b00      	cmp	r3, #0
 8003060:	d102      	bne.n	8003068 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f004 fb05 	bl	800767c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	603b      	str	r3, [r7, #0]
 8003078:	687e      	ldr	r6, [r7, #4]
 800307a:	466d      	mov	r5, sp
 800307c:	f106 0410 	add.w	r4, r6, #16
 8003080:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003082:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003084:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003086:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003088:	e894 0003 	ldmia.w	r4, {r0, r1}
 800308c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003090:	1d33      	adds	r3, r6, #4
 8003092:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003094:	6838      	ldr	r0, [r7, #0]
 8003096:	f004 fa7f 	bl	8007598 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2101      	movs	r1, #1
 80030a0:	4618      	mov	r0, r3
 80030a2:	f004 fafc 	bl	800769e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	603b      	str	r3, [r7, #0]
 80030ac:	687e      	ldr	r6, [r7, #4]
 80030ae:	466d      	mov	r5, sp
 80030b0:	f106 0410 	add.w	r4, r6, #16
 80030b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80030c4:	1d33      	adds	r3, r6, #4
 80030c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030c8:	6838      	ldr	r0, [r7, #0]
 80030ca:	f004 fc85 	bl	80079d8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030e0 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80030e0:	b590      	push	{r4, r7, lr}
 80030e2:	b089      	sub	sp, #36	; 0x24
 80030e4:	af04      	add	r7, sp, #16
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	4608      	mov	r0, r1
 80030ea:	4611      	mov	r1, r2
 80030ec:	461a      	mov	r2, r3
 80030ee:	4603      	mov	r3, r0
 80030f0:	70fb      	strb	r3, [r7, #3]
 80030f2:	460b      	mov	r3, r1
 80030f4:	70bb      	strb	r3, [r7, #2]
 80030f6:	4613      	mov	r3, r2
 80030f8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003100:	2b01      	cmp	r3, #1
 8003102:	d101      	bne.n	8003108 <HAL_HCD_HC_Init+0x28>
 8003104:	2302      	movs	r3, #2
 8003106:	e076      	b.n	80031f6 <HAL_HCD_HC_Init+0x116>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003110:	78fb      	ldrb	r3, [r7, #3]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	212c      	movs	r1, #44	; 0x2c
 8003116:	fb01 f303 	mul.w	r3, r1, r3
 800311a:	4413      	add	r3, r2
 800311c:	333d      	adds	r3, #61	; 0x3d
 800311e:	2200      	movs	r2, #0
 8003120:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003122:	78fb      	ldrb	r3, [r7, #3]
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	212c      	movs	r1, #44	; 0x2c
 8003128:	fb01 f303 	mul.w	r3, r1, r3
 800312c:	4413      	add	r3, r2
 800312e:	3338      	adds	r3, #56	; 0x38
 8003130:	787a      	ldrb	r2, [r7, #1]
 8003132:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003134:	78fb      	ldrb	r3, [r7, #3]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	212c      	movs	r1, #44	; 0x2c
 800313a:	fb01 f303 	mul.w	r3, r1, r3
 800313e:	4413      	add	r3, r2
 8003140:	3340      	adds	r3, #64	; 0x40
 8003142:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003144:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003146:	78fb      	ldrb	r3, [r7, #3]
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	212c      	movs	r1, #44	; 0x2c
 800314c:	fb01 f303 	mul.w	r3, r1, r3
 8003150:	4413      	add	r3, r2
 8003152:	3339      	adds	r3, #57	; 0x39
 8003154:	78fa      	ldrb	r2, [r7, #3]
 8003156:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	212c      	movs	r1, #44	; 0x2c
 800315e:	fb01 f303 	mul.w	r3, r1, r3
 8003162:	4413      	add	r3, r2
 8003164:	333f      	adds	r3, #63	; 0x3f
 8003166:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800316a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800316c:	78fb      	ldrb	r3, [r7, #3]
 800316e:	78ba      	ldrb	r2, [r7, #2]
 8003170:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003174:	b2d0      	uxtb	r0, r2
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	212c      	movs	r1, #44	; 0x2c
 800317a:	fb01 f303 	mul.w	r3, r1, r3
 800317e:	4413      	add	r3, r2
 8003180:	333a      	adds	r3, #58	; 0x3a
 8003182:	4602      	mov	r2, r0
 8003184:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003186:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800318a:	2b00      	cmp	r3, #0
 800318c:	da09      	bge.n	80031a2 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800318e:	78fb      	ldrb	r3, [r7, #3]
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	212c      	movs	r1, #44	; 0x2c
 8003194:	fb01 f303 	mul.w	r3, r1, r3
 8003198:	4413      	add	r3, r2
 800319a:	333b      	adds	r3, #59	; 0x3b
 800319c:	2201      	movs	r2, #1
 800319e:	701a      	strb	r2, [r3, #0]
 80031a0:	e008      	b.n	80031b4 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80031a2:	78fb      	ldrb	r3, [r7, #3]
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	212c      	movs	r1, #44	; 0x2c
 80031a8:	fb01 f303 	mul.w	r3, r1, r3
 80031ac:	4413      	add	r3, r2
 80031ae:	333b      	adds	r3, #59	; 0x3b
 80031b0:	2200      	movs	r2, #0
 80031b2:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80031b4:	78fb      	ldrb	r3, [r7, #3]
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	212c      	movs	r1, #44	; 0x2c
 80031ba:	fb01 f303 	mul.w	r3, r1, r3
 80031be:	4413      	add	r3, r2
 80031c0:	333c      	adds	r3, #60	; 0x3c
 80031c2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80031c6:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6818      	ldr	r0, [r3, #0]
 80031cc:	787c      	ldrb	r4, [r7, #1]
 80031ce:	78ba      	ldrb	r2, [r7, #2]
 80031d0:	78f9      	ldrb	r1, [r7, #3]
 80031d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80031d4:	9302      	str	r3, [sp, #8]
 80031d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80031da:	9301      	str	r3, [sp, #4]
 80031dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	4623      	mov	r3, r4
 80031e4:	f004 fd7e 	bl	8007ce4 <USB_HC_Init>
 80031e8:	4603      	mov	r3, r0
 80031ea:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd90      	pop	{r4, r7, pc}

080031fe <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b084      	sub	sp, #16
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	460b      	mov	r3, r1
 8003208:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003214:	2b01      	cmp	r3, #1
 8003216:	d101      	bne.n	800321c <HAL_HCD_HC_Halt+0x1e>
 8003218:	2302      	movs	r3, #2
 800321a:	e00f      	b.n	800323c <HAL_HCD_HC_Halt+0x3e>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	78fa      	ldrb	r2, [r7, #3]
 800322a:	4611      	mov	r1, r2
 800322c:	4618      	mov	r0, r3
 800322e:	f004 ffce 	bl	80081ce <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800323a:	7bfb      	ldrb	r3, [r7, #15]
}
 800323c:	4618      	mov	r0, r3
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	4608      	mov	r0, r1
 800324e:	4611      	mov	r1, r2
 8003250:	461a      	mov	r2, r3
 8003252:	4603      	mov	r3, r0
 8003254:	70fb      	strb	r3, [r7, #3]
 8003256:	460b      	mov	r3, r1
 8003258:	70bb      	strb	r3, [r7, #2]
 800325a:	4613      	mov	r3, r2
 800325c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800325e:	78fb      	ldrb	r3, [r7, #3]
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	212c      	movs	r1, #44	; 0x2c
 8003264:	fb01 f303 	mul.w	r3, r1, r3
 8003268:	4413      	add	r3, r2
 800326a:	333b      	adds	r3, #59	; 0x3b
 800326c:	78ba      	ldrb	r2, [r7, #2]
 800326e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003270:	78fb      	ldrb	r3, [r7, #3]
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	212c      	movs	r1, #44	; 0x2c
 8003276:	fb01 f303 	mul.w	r3, r1, r3
 800327a:	4413      	add	r3, r2
 800327c:	333f      	adds	r3, #63	; 0x3f
 800327e:	787a      	ldrb	r2, [r7, #1]
 8003280:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003282:	7c3b      	ldrb	r3, [r7, #16]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d112      	bne.n	80032ae <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003288:	78fb      	ldrb	r3, [r7, #3]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	212c      	movs	r1, #44	; 0x2c
 800328e:	fb01 f303 	mul.w	r3, r1, r3
 8003292:	4413      	add	r3, r2
 8003294:	3342      	adds	r3, #66	; 0x42
 8003296:	2203      	movs	r2, #3
 8003298:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800329a:	78fb      	ldrb	r3, [r7, #3]
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	212c      	movs	r1, #44	; 0x2c
 80032a0:	fb01 f303 	mul.w	r3, r1, r3
 80032a4:	4413      	add	r3, r2
 80032a6:	333d      	adds	r3, #61	; 0x3d
 80032a8:	7f3a      	ldrb	r2, [r7, #28]
 80032aa:	701a      	strb	r2, [r3, #0]
 80032ac:	e008      	b.n	80032c0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032ae:	78fb      	ldrb	r3, [r7, #3]
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	212c      	movs	r1, #44	; 0x2c
 80032b4:	fb01 f303 	mul.w	r3, r1, r3
 80032b8:	4413      	add	r3, r2
 80032ba:	3342      	adds	r3, #66	; 0x42
 80032bc:	2202      	movs	r2, #2
 80032be:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80032c0:	787b      	ldrb	r3, [r7, #1]
 80032c2:	2b03      	cmp	r3, #3
 80032c4:	f200 80c6 	bhi.w	8003454 <HAL_HCD_HC_SubmitRequest+0x210>
 80032c8:	a201      	add	r2, pc, #4	; (adr r2, 80032d0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80032ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ce:	bf00      	nop
 80032d0:	080032e1 	.word	0x080032e1
 80032d4:	08003441 	.word	0x08003441
 80032d8:	08003345 	.word	0x08003345
 80032dc:	080033c3 	.word	0x080033c3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80032e0:	7c3b      	ldrb	r3, [r7, #16]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	f040 80b8 	bne.w	8003458 <HAL_HCD_HC_SubmitRequest+0x214>
 80032e8:	78bb      	ldrb	r3, [r7, #2]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f040 80b4 	bne.w	8003458 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80032f0:	8b3b      	ldrh	r3, [r7, #24]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d108      	bne.n	8003308 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80032f6:	78fb      	ldrb	r3, [r7, #3]
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	212c      	movs	r1, #44	; 0x2c
 80032fc:	fb01 f303 	mul.w	r3, r1, r3
 8003300:	4413      	add	r3, r2
 8003302:	3355      	adds	r3, #85	; 0x55
 8003304:	2201      	movs	r2, #1
 8003306:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003308:	78fb      	ldrb	r3, [r7, #3]
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	212c      	movs	r1, #44	; 0x2c
 800330e:	fb01 f303 	mul.w	r3, r1, r3
 8003312:	4413      	add	r3, r2
 8003314:	3355      	adds	r3, #85	; 0x55
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d109      	bne.n	8003330 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800331c:	78fb      	ldrb	r3, [r7, #3]
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	212c      	movs	r1, #44	; 0x2c
 8003322:	fb01 f303 	mul.w	r3, r1, r3
 8003326:	4413      	add	r3, r2
 8003328:	3342      	adds	r3, #66	; 0x42
 800332a:	2200      	movs	r2, #0
 800332c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800332e:	e093      	b.n	8003458 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003330:	78fb      	ldrb	r3, [r7, #3]
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	212c      	movs	r1, #44	; 0x2c
 8003336:	fb01 f303 	mul.w	r3, r1, r3
 800333a:	4413      	add	r3, r2
 800333c:	3342      	adds	r3, #66	; 0x42
 800333e:	2202      	movs	r2, #2
 8003340:	701a      	strb	r2, [r3, #0]
      break;
 8003342:	e089      	b.n	8003458 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003344:	78bb      	ldrb	r3, [r7, #2]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d11d      	bne.n	8003386 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800334a:	78fb      	ldrb	r3, [r7, #3]
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	212c      	movs	r1, #44	; 0x2c
 8003350:	fb01 f303 	mul.w	r3, r1, r3
 8003354:	4413      	add	r3, r2
 8003356:	3355      	adds	r3, #85	; 0x55
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d109      	bne.n	8003372 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800335e:	78fb      	ldrb	r3, [r7, #3]
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	212c      	movs	r1, #44	; 0x2c
 8003364:	fb01 f303 	mul.w	r3, r1, r3
 8003368:	4413      	add	r3, r2
 800336a:	3342      	adds	r3, #66	; 0x42
 800336c:	2200      	movs	r2, #0
 800336e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003370:	e073      	b.n	800345a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003372:	78fb      	ldrb	r3, [r7, #3]
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	212c      	movs	r1, #44	; 0x2c
 8003378:	fb01 f303 	mul.w	r3, r1, r3
 800337c:	4413      	add	r3, r2
 800337e:	3342      	adds	r3, #66	; 0x42
 8003380:	2202      	movs	r2, #2
 8003382:	701a      	strb	r2, [r3, #0]
      break;
 8003384:	e069      	b.n	800345a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003386:	78fb      	ldrb	r3, [r7, #3]
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	212c      	movs	r1, #44	; 0x2c
 800338c:	fb01 f303 	mul.w	r3, r1, r3
 8003390:	4413      	add	r3, r2
 8003392:	3354      	adds	r3, #84	; 0x54
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d109      	bne.n	80033ae <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800339a:	78fb      	ldrb	r3, [r7, #3]
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	212c      	movs	r1, #44	; 0x2c
 80033a0:	fb01 f303 	mul.w	r3, r1, r3
 80033a4:	4413      	add	r3, r2
 80033a6:	3342      	adds	r3, #66	; 0x42
 80033a8:	2200      	movs	r2, #0
 80033aa:	701a      	strb	r2, [r3, #0]
      break;
 80033ac:	e055      	b.n	800345a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033ae:	78fb      	ldrb	r3, [r7, #3]
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	212c      	movs	r1, #44	; 0x2c
 80033b4:	fb01 f303 	mul.w	r3, r1, r3
 80033b8:	4413      	add	r3, r2
 80033ba:	3342      	adds	r3, #66	; 0x42
 80033bc:	2202      	movs	r2, #2
 80033be:	701a      	strb	r2, [r3, #0]
      break;
 80033c0:	e04b      	b.n	800345a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80033c2:	78bb      	ldrb	r3, [r7, #2]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d11d      	bne.n	8003404 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	212c      	movs	r1, #44	; 0x2c
 80033ce:	fb01 f303 	mul.w	r3, r1, r3
 80033d2:	4413      	add	r3, r2
 80033d4:	3355      	adds	r3, #85	; 0x55
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d109      	bne.n	80033f0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	212c      	movs	r1, #44	; 0x2c
 80033e2:	fb01 f303 	mul.w	r3, r1, r3
 80033e6:	4413      	add	r3, r2
 80033e8:	3342      	adds	r3, #66	; 0x42
 80033ea:	2200      	movs	r2, #0
 80033ec:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80033ee:	e034      	b.n	800345a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033f0:	78fb      	ldrb	r3, [r7, #3]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	212c      	movs	r1, #44	; 0x2c
 80033f6:	fb01 f303 	mul.w	r3, r1, r3
 80033fa:	4413      	add	r3, r2
 80033fc:	3342      	adds	r3, #66	; 0x42
 80033fe:	2202      	movs	r2, #2
 8003400:	701a      	strb	r2, [r3, #0]
      break;
 8003402:	e02a      	b.n	800345a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003404:	78fb      	ldrb	r3, [r7, #3]
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	212c      	movs	r1, #44	; 0x2c
 800340a:	fb01 f303 	mul.w	r3, r1, r3
 800340e:	4413      	add	r3, r2
 8003410:	3354      	adds	r3, #84	; 0x54
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d109      	bne.n	800342c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003418:	78fb      	ldrb	r3, [r7, #3]
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	212c      	movs	r1, #44	; 0x2c
 800341e:	fb01 f303 	mul.w	r3, r1, r3
 8003422:	4413      	add	r3, r2
 8003424:	3342      	adds	r3, #66	; 0x42
 8003426:	2200      	movs	r2, #0
 8003428:	701a      	strb	r2, [r3, #0]
      break;
 800342a:	e016      	b.n	800345a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800342c:	78fb      	ldrb	r3, [r7, #3]
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	212c      	movs	r1, #44	; 0x2c
 8003432:	fb01 f303 	mul.w	r3, r1, r3
 8003436:	4413      	add	r3, r2
 8003438:	3342      	adds	r3, #66	; 0x42
 800343a:	2202      	movs	r2, #2
 800343c:	701a      	strb	r2, [r3, #0]
      break;
 800343e:	e00c      	b.n	800345a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003440:	78fb      	ldrb	r3, [r7, #3]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	212c      	movs	r1, #44	; 0x2c
 8003446:	fb01 f303 	mul.w	r3, r1, r3
 800344a:	4413      	add	r3, r2
 800344c:	3342      	adds	r3, #66	; 0x42
 800344e:	2200      	movs	r2, #0
 8003450:	701a      	strb	r2, [r3, #0]
      break;
 8003452:	e002      	b.n	800345a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003454:	bf00      	nop
 8003456:	e000      	b.n	800345a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003458:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800345a:	78fb      	ldrb	r3, [r7, #3]
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	212c      	movs	r1, #44	; 0x2c
 8003460:	fb01 f303 	mul.w	r3, r1, r3
 8003464:	4413      	add	r3, r2
 8003466:	3344      	adds	r3, #68	; 0x44
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800346c:	78fb      	ldrb	r3, [r7, #3]
 800346e:	8b3a      	ldrh	r2, [r7, #24]
 8003470:	6879      	ldr	r1, [r7, #4]
 8003472:	202c      	movs	r0, #44	; 0x2c
 8003474:	fb00 f303 	mul.w	r3, r0, r3
 8003478:	440b      	add	r3, r1
 800347a:	334c      	adds	r3, #76	; 0x4c
 800347c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800347e:	78fb      	ldrb	r3, [r7, #3]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	212c      	movs	r1, #44	; 0x2c
 8003484:	fb01 f303 	mul.w	r3, r1, r3
 8003488:	4413      	add	r3, r2
 800348a:	3360      	adds	r3, #96	; 0x60
 800348c:	2200      	movs	r2, #0
 800348e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003490:	78fb      	ldrb	r3, [r7, #3]
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	212c      	movs	r1, #44	; 0x2c
 8003496:	fb01 f303 	mul.w	r3, r1, r3
 800349a:	4413      	add	r3, r2
 800349c:	3350      	adds	r3, #80	; 0x50
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80034a2:	78fb      	ldrb	r3, [r7, #3]
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	212c      	movs	r1, #44	; 0x2c
 80034a8:	fb01 f303 	mul.w	r3, r1, r3
 80034ac:	4413      	add	r3, r2
 80034ae:	3339      	adds	r3, #57	; 0x39
 80034b0:	78fa      	ldrb	r2, [r7, #3]
 80034b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80034b4:	78fb      	ldrb	r3, [r7, #3]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	212c      	movs	r1, #44	; 0x2c
 80034ba:	fb01 f303 	mul.w	r3, r1, r3
 80034be:	4413      	add	r3, r2
 80034c0:	3361      	adds	r3, #97	; 0x61
 80034c2:	2200      	movs	r2, #0
 80034c4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6818      	ldr	r0, [r3, #0]
 80034ca:	78fb      	ldrb	r3, [r7, #3]
 80034cc:	222c      	movs	r2, #44	; 0x2c
 80034ce:	fb02 f303 	mul.w	r3, r2, r3
 80034d2:	3338      	adds	r3, #56	; 0x38
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	18d1      	adds	r1, r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	461a      	mov	r2, r3
 80034e0:	f004 fd22 	bl	8007f28 <USB_HC_StartXfer>
 80034e4:	4603      	mov	r3, r0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop

080034f0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f004 fa23 	bl	8007952 <USB_GetMode>
 800350c:	4603      	mov	r3, r0
 800350e:	2b01      	cmp	r3, #1
 8003510:	f040 80f6 	bne.w	8003700 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f004 fa07 	bl	800792c <USB_ReadInterrupts>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 80ec 	beq.w	80036fe <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f004 f9fe 	bl	800792c <USB_ReadInterrupts>
 8003530:	4603      	mov	r3, r0
 8003532:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003536:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800353a:	d104      	bne.n	8003546 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003544:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f004 f9ee 	bl	800792c <USB_ReadInterrupts>
 8003550:	4603      	mov	r3, r0
 8003552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003556:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800355a:	d104      	bne.n	8003566 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003564:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f004 f9de 	bl	800792c <USB_ReadInterrupts>
 8003570:	4603      	mov	r3, r0
 8003572:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003576:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800357a:	d104      	bne.n	8003586 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003584:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f004 f9ce 	bl	800792c <USB_ReadInterrupts>
 8003590:	4603      	mov	r3, r0
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b02      	cmp	r3, #2
 8003598:	d103      	bne.n	80035a2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2202      	movs	r2, #2
 80035a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f004 f9c0 	bl	800792c <USB_ReadInterrupts>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035b6:	d11c      	bne.n	80035f2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80035c0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10f      	bne.n	80035f2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80035d2:	2110      	movs	r1, #16
 80035d4:	6938      	ldr	r0, [r7, #16]
 80035d6:	f004 f8af 	bl	8007738 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80035da:	6938      	ldr	r0, [r7, #16]
 80035dc:	f004 f8e0 	bl	80077a0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2101      	movs	r1, #1
 80035e6:	4618      	mov	r0, r3
 80035e8:	f004 fab6 	bl	8007b58 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f00b fca7 	bl	800ef40 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f004 f998 	bl	800792c <USB_ReadInterrupts>
 80035fc:	4603      	mov	r3, r0
 80035fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003602:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003606:	d102      	bne.n	800360e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f001 f89e 	bl	800474a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f004 f98a 	bl	800792c <USB_ReadInterrupts>
 8003618:	4603      	mov	r3, r0
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b08      	cmp	r3, #8
 8003620:	d106      	bne.n	8003630 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f00b fc70 	bl	800ef08 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2208      	movs	r2, #8
 800362e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f004 f979 	bl	800792c <USB_ReadInterrupts>
 800363a:	4603      	mov	r3, r0
 800363c:	f003 0310 	and.w	r3, r3, #16
 8003640:	2b10      	cmp	r3, #16
 8003642:	d101      	bne.n	8003648 <HAL_HCD_IRQHandler+0x158>
 8003644:	2301      	movs	r3, #1
 8003646:	e000      	b.n	800364a <HAL_HCD_IRQHandler+0x15a>
 8003648:	2300      	movs	r3, #0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d012      	beq.n	8003674 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	699a      	ldr	r2, [r3, #24]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0210 	bic.w	r2, r2, #16
 800365c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 ffa1 	bl	80045a6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699a      	ldr	r2, [r3, #24]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0210 	orr.w	r2, r2, #16
 8003672:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4618      	mov	r0, r3
 800367a:	f004 f957 	bl	800792c <USB_ReadInterrupts>
 800367e:	4603      	mov	r3, r0
 8003680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003684:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003688:	d13a      	bne.n	8003700 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f004 fd8c 	bl	80081ac <USB_HC_ReadInterrupt>
 8003694:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003696:	2300      	movs	r3, #0
 8003698:	617b      	str	r3, [r7, #20]
 800369a:	e025      	b.n	80036e8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	fa22 f303 	lsr.w	r3, r2, r3
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d018      	beq.n	80036e2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	015a      	lsls	r2, r3, #5
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036c6:	d106      	bne.n	80036d6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	4619      	mov	r1, r3
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f8ab 	bl	800382a <HCD_HC_IN_IRQHandler>
 80036d4:	e005      	b.n	80036e2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	4619      	mov	r1, r3
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 fbf9 	bl	8003ed4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	3301      	adds	r3, #1
 80036e6:	617b      	str	r3, [r7, #20]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d3d4      	bcc.n	800369c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036fa:	615a      	str	r2, [r3, #20]
 80036fc:	e000      	b.n	8003700 <HAL_HCD_IRQHandler+0x210>
      return;
 80036fe:	bf00      	nop
    }
  }
}
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b082      	sub	sp, #8
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003714:	2b01      	cmp	r3, #1
 8003716:	d101      	bne.n	800371c <HAL_HCD_Start+0x16>
 8003718:	2302      	movs	r3, #2
 800371a:	e013      	b.n	8003744 <HAL_HCD_Start+0x3e>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2101      	movs	r1, #1
 800372a:	4618      	mov	r0, r3
 800372c:	f004 fa78 	bl	8007c20 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f003 ff90 	bl	800765a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800375a:	2b01      	cmp	r3, #1
 800375c:	d101      	bne.n	8003762 <HAL_HCD_Stop+0x16>
 800375e:	2302      	movs	r3, #2
 8003760:	e00d      	b.n	800377e <HAL_HCD_Stop+0x32>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f004 fe66 	bl	8008440 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b082      	sub	sp, #8
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f004 fa1a 	bl	8007bcc <USB_ResetPort>
 8003798:	4603      	mov	r3, r0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b083      	sub	sp, #12
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
 80037aa:	460b      	mov	r3, r1
 80037ac:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80037ae:	78fb      	ldrb	r3, [r7, #3]
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	212c      	movs	r1, #44	; 0x2c
 80037b4:	fb01 f303 	mul.w	r3, r1, r3
 80037b8:	4413      	add	r3, r2
 80037ba:	3360      	adds	r3, #96	; 0x60
 80037bc:	781b      	ldrb	r3, [r3, #0]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
 80037d2:	460b      	mov	r3, r1
 80037d4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80037d6:	78fb      	ldrb	r3, [r7, #3]
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	212c      	movs	r1, #44	; 0x2c
 80037dc:	fb01 f303 	mul.w	r3, r1, r3
 80037e0:	4413      	add	r3, r2
 80037e2:	3350      	adds	r3, #80	; 0x50
 80037e4:	681b      	ldr	r3, [r3, #0]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b082      	sub	sp, #8
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f004 fa5e 	bl	8007cc0 <USB_GetCurrentFrame>
 8003804:	4603      	mov	r3, r0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b082      	sub	sp, #8
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f004 fa39 	bl	8007c92 <USB_GetHostSpeed>
 8003820:	4603      	mov	r3, r0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b086      	sub	sp, #24
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
 8003832:	460b      	mov	r3, r1
 8003834:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003840:	78fb      	ldrb	r3, [r7, #3]
 8003842:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	015a      	lsls	r2, r3, #5
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	4413      	add	r3, r2
 800384c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 0304 	and.w	r3, r3, #4
 8003856:	2b04      	cmp	r3, #4
 8003858:	d11a      	bne.n	8003890 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	015a      	lsls	r2, r3, #5
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	4413      	add	r3, r2
 8003862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003866:	461a      	mov	r2, r3
 8003868:	2304      	movs	r3, #4
 800386a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	212c      	movs	r1, #44	; 0x2c
 8003872:	fb01 f303 	mul.w	r3, r1, r3
 8003876:	4413      	add	r3, r2
 8003878:	3361      	adds	r3, #97	; 0x61
 800387a:	2206      	movs	r2, #6
 800387c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	b2d2      	uxtb	r2, r2
 8003886:	4611      	mov	r1, r2
 8003888:	4618      	mov	r0, r3
 800388a:	f004 fca0 	bl	80081ce <USB_HC_Halt>
 800388e:	e0af      	b.n	80039f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	015a      	lsls	r2, r3, #5
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	4413      	add	r3, r2
 8003898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038a6:	d11b      	bne.n	80038e0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b4:	461a      	mov	r2, r3
 80038b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	212c      	movs	r1, #44	; 0x2c
 80038c2:	fb01 f303 	mul.w	r3, r1, r3
 80038c6:	4413      	add	r3, r2
 80038c8:	3361      	adds	r3, #97	; 0x61
 80038ca:	2207      	movs	r2, #7
 80038cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	b2d2      	uxtb	r2, r2
 80038d6:	4611      	mov	r1, r2
 80038d8:	4618      	mov	r0, r3
 80038da:	f004 fc78 	bl	80081ce <USB_HC_Halt>
 80038de:	e087      	b.n	80039f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	2b20      	cmp	r3, #32
 80038f4:	d109      	bne.n	800390a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	015a      	lsls	r2, r3, #5
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	4413      	add	r3, r2
 80038fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003902:	461a      	mov	r2, r3
 8003904:	2320      	movs	r3, #32
 8003906:	6093      	str	r3, [r2, #8]
 8003908:	e072      	b.n	80039f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	015a      	lsls	r2, r3, #5
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	4413      	add	r3, r2
 8003912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f003 0308 	and.w	r3, r3, #8
 800391c:	2b08      	cmp	r3, #8
 800391e:	d11a      	bne.n	8003956 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	4413      	add	r3, r2
 8003928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800392c:	461a      	mov	r2, r3
 800392e:	2308      	movs	r3, #8
 8003930:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	212c      	movs	r1, #44	; 0x2c
 8003938:	fb01 f303 	mul.w	r3, r1, r3
 800393c:	4413      	add	r3, r2
 800393e:	3361      	adds	r3, #97	; 0x61
 8003940:	2205      	movs	r2, #5
 8003942:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	4611      	mov	r1, r2
 800394e:	4618      	mov	r0, r3
 8003950:	f004 fc3d 	bl	80081ce <USB_HC_Halt>
 8003954:	e04c      	b.n	80039f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	015a      	lsls	r2, r3, #5
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	4413      	add	r3, r2
 800395e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800396c:	d11b      	bne.n	80039a6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	015a      	lsls	r2, r3, #5
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	4413      	add	r3, r2
 8003976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397a:	461a      	mov	r2, r3
 800397c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003980:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	212c      	movs	r1, #44	; 0x2c
 8003988:	fb01 f303 	mul.w	r3, r1, r3
 800398c:	4413      	add	r3, r2
 800398e:	3361      	adds	r3, #97	; 0x61
 8003990:	2208      	movs	r2, #8
 8003992:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	4611      	mov	r1, r2
 800399e:	4618      	mov	r0, r3
 80039a0:	f004 fc15 	bl	80081ce <USB_HC_Halt>
 80039a4:	e024      	b.n	80039f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	015a      	lsls	r2, r3, #5
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	4413      	add	r3, r2
 80039ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b8:	2b80      	cmp	r3, #128	; 0x80
 80039ba:	d119      	bne.n	80039f0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c8:	461a      	mov	r2, r3
 80039ca:	2380      	movs	r3, #128	; 0x80
 80039cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	212c      	movs	r1, #44	; 0x2c
 80039d4:	fb01 f303 	mul.w	r3, r1, r3
 80039d8:	4413      	add	r3, r2
 80039da:	3361      	adds	r3, #97	; 0x61
 80039dc:	2206      	movs	r2, #6
 80039de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	4611      	mov	r1, r2
 80039ea:	4618      	mov	r0, r3
 80039ec:	f004 fbef 	bl	80081ce <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	015a      	lsls	r2, r3, #5
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4413      	add	r3, r2
 80039f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a06:	d112      	bne.n	8003a2e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	4611      	mov	r1, r2
 8003a12:	4618      	mov	r0, r3
 8003a14:	f004 fbdb 	bl	80081ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a24:	461a      	mov	r2, r3
 8003a26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a2a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003a2c:	e24e      	b.n	8003ecc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	015a      	lsls	r2, r3, #5
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	4413      	add	r3, r2
 8003a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	f040 80df 	bne.w	8003c04 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d019      	beq.n	8003a82 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	212c      	movs	r1, #44	; 0x2c
 8003a54:	fb01 f303 	mul.w	r3, r1, r3
 8003a58:	4413      	add	r3, r2
 8003a5a:	3348      	adds	r3, #72	; 0x48
 8003a5c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	0159      	lsls	r1, r3, #5
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	440b      	add	r3, r1
 8003a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003a70:	1ad2      	subs	r2, r2, r3
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	202c      	movs	r0, #44	; 0x2c
 8003a78:	fb00 f303 	mul.w	r3, r0, r3
 8003a7c:	440b      	add	r3, r1
 8003a7e:	3350      	adds	r3, #80	; 0x50
 8003a80:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	212c      	movs	r1, #44	; 0x2c
 8003a88:	fb01 f303 	mul.w	r3, r1, r3
 8003a8c:	4413      	add	r3, r2
 8003a8e:	3361      	adds	r3, #97	; 0x61
 8003a90:	2201      	movs	r2, #1
 8003a92:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	212c      	movs	r1, #44	; 0x2c
 8003a9a:	fb01 f303 	mul.w	r3, r1, r3
 8003a9e:	4413      	add	r3, r2
 8003aa0:	335c      	adds	r3, #92	; 0x5c
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	015a      	lsls	r2, r3, #5
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	4413      	add	r3, r2
 8003aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	212c      	movs	r1, #44	; 0x2c
 8003abe:	fb01 f303 	mul.w	r3, r1, r3
 8003ac2:	4413      	add	r3, r2
 8003ac4:	333f      	adds	r3, #63	; 0x3f
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d009      	beq.n	8003ae0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	212c      	movs	r1, #44	; 0x2c
 8003ad2:	fb01 f303 	mul.w	r3, r1, r3
 8003ad6:	4413      	add	r3, r2
 8003ad8:	333f      	adds	r3, #63	; 0x3f
 8003ada:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d111      	bne.n	8003b04 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	4611      	mov	r1, r2
 8003aea:	4618      	mov	r0, r3
 8003aec:	f004 fb6f 	bl	80081ce <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003afc:	461a      	mov	r2, r3
 8003afe:	2310      	movs	r3, #16
 8003b00:	6093      	str	r3, [r2, #8]
 8003b02:	e03a      	b.n	8003b7a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	212c      	movs	r1, #44	; 0x2c
 8003b0a:	fb01 f303 	mul.w	r3, r1, r3
 8003b0e:	4413      	add	r3, r2
 8003b10:	333f      	adds	r3, #63	; 0x3f
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b03      	cmp	r3, #3
 8003b16:	d009      	beq.n	8003b2c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	212c      	movs	r1, #44	; 0x2c
 8003b1e:	fb01 f303 	mul.w	r3, r1, r3
 8003b22:	4413      	add	r3, r2
 8003b24:	333f      	adds	r3, #63	; 0x3f
 8003b26:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d126      	bne.n	8003b7a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	015a      	lsls	r2, r3, #5
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	4413      	add	r3, r2
 8003b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	0151      	lsls	r1, r2, #5
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	440a      	add	r2, r1
 8003b42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b4a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	212c      	movs	r1, #44	; 0x2c
 8003b52:	fb01 f303 	mul.w	r3, r1, r3
 8003b56:	4413      	add	r3, r2
 8003b58:	3360      	adds	r3, #96	; 0x60
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	b2d9      	uxtb	r1, r3
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	202c      	movs	r0, #44	; 0x2c
 8003b68:	fb00 f303 	mul.w	r3, r0, r3
 8003b6c:	4413      	add	r3, r2
 8003b6e:	3360      	adds	r3, #96	; 0x60
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	461a      	mov	r2, r3
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f00b f9f1 	bl	800ef5c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d12b      	bne.n	8003bda <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	212c      	movs	r1, #44	; 0x2c
 8003b88:	fb01 f303 	mul.w	r3, r1, r3
 8003b8c:	4413      	add	r3, r2
 8003b8e:	3348      	adds	r3, #72	; 0x48
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	202c      	movs	r0, #44	; 0x2c
 8003b98:	fb00 f202 	mul.w	r2, r0, r2
 8003b9c:	440a      	add	r2, r1
 8003b9e:	3240      	adds	r2, #64	; 0x40
 8003ba0:	8812      	ldrh	r2, [r2, #0]
 8003ba2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 818e 	beq.w	8003ecc <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	212c      	movs	r1, #44	; 0x2c
 8003bb6:	fb01 f303 	mul.w	r3, r1, r3
 8003bba:	4413      	add	r3, r2
 8003bbc:	3354      	adds	r3, #84	; 0x54
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	f083 0301 	eor.w	r3, r3, #1
 8003bc4:	b2d8      	uxtb	r0, r3
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	212c      	movs	r1, #44	; 0x2c
 8003bcc:	fb01 f303 	mul.w	r3, r1, r3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	3354      	adds	r3, #84	; 0x54
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	701a      	strb	r2, [r3, #0]
}
 8003bd8:	e178      	b.n	8003ecc <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	212c      	movs	r1, #44	; 0x2c
 8003be0:	fb01 f303 	mul.w	r3, r1, r3
 8003be4:	4413      	add	r3, r2
 8003be6:	3354      	adds	r3, #84	; 0x54
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	f083 0301 	eor.w	r3, r3, #1
 8003bee:	b2d8      	uxtb	r0, r3
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	212c      	movs	r1, #44	; 0x2c
 8003bf6:	fb01 f303 	mul.w	r3, r1, r3
 8003bfa:	4413      	add	r3, r2
 8003bfc:	3354      	adds	r3, #84	; 0x54
 8003bfe:	4602      	mov	r2, r0
 8003c00:	701a      	strb	r2, [r3, #0]
}
 8003c02:	e163      	b.n	8003ecc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	015a      	lsls	r2, r3, #5
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	f040 80f6 	bne.w	8003e08 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	212c      	movs	r1, #44	; 0x2c
 8003c22:	fb01 f303 	mul.w	r3, r1, r3
 8003c26:	4413      	add	r3, r2
 8003c28:	3361      	adds	r3, #97	; 0x61
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d109      	bne.n	8003c44 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	212c      	movs	r1, #44	; 0x2c
 8003c36:	fb01 f303 	mul.w	r3, r1, r3
 8003c3a:	4413      	add	r3, r2
 8003c3c:	3360      	adds	r3, #96	; 0x60
 8003c3e:	2201      	movs	r2, #1
 8003c40:	701a      	strb	r2, [r3, #0]
 8003c42:	e0c9      	b.n	8003dd8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	212c      	movs	r1, #44	; 0x2c
 8003c4a:	fb01 f303 	mul.w	r3, r1, r3
 8003c4e:	4413      	add	r3, r2
 8003c50:	3361      	adds	r3, #97	; 0x61
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2b05      	cmp	r3, #5
 8003c56:	d109      	bne.n	8003c6c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	212c      	movs	r1, #44	; 0x2c
 8003c5e:	fb01 f303 	mul.w	r3, r1, r3
 8003c62:	4413      	add	r3, r2
 8003c64:	3360      	adds	r3, #96	; 0x60
 8003c66:	2205      	movs	r2, #5
 8003c68:	701a      	strb	r2, [r3, #0]
 8003c6a:	e0b5      	b.n	8003dd8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	212c      	movs	r1, #44	; 0x2c
 8003c72:	fb01 f303 	mul.w	r3, r1, r3
 8003c76:	4413      	add	r3, r2
 8003c78:	3361      	adds	r3, #97	; 0x61
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b06      	cmp	r3, #6
 8003c7e:	d009      	beq.n	8003c94 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	212c      	movs	r1, #44	; 0x2c
 8003c86:	fb01 f303 	mul.w	r3, r1, r3
 8003c8a:	4413      	add	r3, r2
 8003c8c:	3361      	adds	r3, #97	; 0x61
 8003c8e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d150      	bne.n	8003d36 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	212c      	movs	r1, #44	; 0x2c
 8003c9a:	fb01 f303 	mul.w	r3, r1, r3
 8003c9e:	4413      	add	r3, r2
 8003ca0:	335c      	adds	r3, #92	; 0x5c
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	202c      	movs	r0, #44	; 0x2c
 8003cac:	fb00 f303 	mul.w	r3, r0, r3
 8003cb0:	440b      	add	r3, r1
 8003cb2:	335c      	adds	r3, #92	; 0x5c
 8003cb4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	212c      	movs	r1, #44	; 0x2c
 8003cbc:	fb01 f303 	mul.w	r3, r1, r3
 8003cc0:	4413      	add	r3, r2
 8003cc2:	335c      	adds	r3, #92	; 0x5c
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d912      	bls.n	8003cf0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	212c      	movs	r1, #44	; 0x2c
 8003cd0:	fb01 f303 	mul.w	r3, r1, r3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	335c      	adds	r3, #92	; 0x5c
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	212c      	movs	r1, #44	; 0x2c
 8003ce2:	fb01 f303 	mul.w	r3, r1, r3
 8003ce6:	4413      	add	r3, r2
 8003ce8:	3360      	adds	r3, #96	; 0x60
 8003cea:	2204      	movs	r2, #4
 8003cec:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003cee:	e073      	b.n	8003dd8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	212c      	movs	r1, #44	; 0x2c
 8003cf6:	fb01 f303 	mul.w	r3, r1, r3
 8003cfa:	4413      	add	r3, r2
 8003cfc:	3360      	adds	r3, #96	; 0x60
 8003cfe:	2202      	movs	r2, #2
 8003d00:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	015a      	lsls	r2, r3, #5
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	4413      	add	r3, r2
 8003d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d18:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d20:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	015a      	lsls	r2, r3, #5
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	4413      	add	r3, r2
 8003d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d2e:	461a      	mov	r2, r3
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d34:	e050      	b.n	8003dd8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	212c      	movs	r1, #44	; 0x2c
 8003d3c:	fb01 f303 	mul.w	r3, r1, r3
 8003d40:	4413      	add	r3, r2
 8003d42:	3361      	adds	r3, #97	; 0x61
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	2b03      	cmp	r3, #3
 8003d48:	d122      	bne.n	8003d90 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	212c      	movs	r1, #44	; 0x2c
 8003d50:	fb01 f303 	mul.w	r3, r1, r3
 8003d54:	4413      	add	r3, r2
 8003d56:	3360      	adds	r3, #96	; 0x60
 8003d58:	2202      	movs	r2, #2
 8003d5a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	015a      	lsls	r2, r3, #5
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	4413      	add	r3, r2
 8003d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d72:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d7a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d88:	461a      	mov	r2, r3
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	e023      	b.n	8003dd8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	212c      	movs	r1, #44	; 0x2c
 8003d96:	fb01 f303 	mul.w	r3, r1, r3
 8003d9a:	4413      	add	r3, r2
 8003d9c:	3361      	adds	r3, #97	; 0x61
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b07      	cmp	r3, #7
 8003da2:	d119      	bne.n	8003dd8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	212c      	movs	r1, #44	; 0x2c
 8003daa:	fb01 f303 	mul.w	r3, r1, r3
 8003dae:	4413      	add	r3, r2
 8003db0:	335c      	adds	r3, #92	; 0x5c
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	1c5a      	adds	r2, r3, #1
 8003db6:	6879      	ldr	r1, [r7, #4]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	202c      	movs	r0, #44	; 0x2c
 8003dbc:	fb00 f303 	mul.w	r3, r0, r3
 8003dc0:	440b      	add	r3, r1
 8003dc2:	335c      	adds	r3, #92	; 0x5c
 8003dc4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	212c      	movs	r1, #44	; 0x2c
 8003dcc:	fb01 f303 	mul.w	r3, r1, r3
 8003dd0:	4413      	add	r3, r2
 8003dd2:	3360      	adds	r3, #96	; 0x60
 8003dd4:	2204      	movs	r2, #4
 8003dd6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de4:	461a      	mov	r2, r3
 8003de6:	2302      	movs	r3, #2
 8003de8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	b2d9      	uxtb	r1, r3
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	202c      	movs	r0, #44	; 0x2c
 8003df4:	fb00 f303 	mul.w	r3, r0, r3
 8003df8:	4413      	add	r3, r2
 8003dfa:	3360      	adds	r3, #96	; 0x60
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f00b f8ab 	bl	800ef5c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003e06:	e061      	b.n	8003ecc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 0310 	and.w	r3, r3, #16
 8003e1a:	2b10      	cmp	r3, #16
 8003e1c:	d156      	bne.n	8003ecc <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	212c      	movs	r1, #44	; 0x2c
 8003e24:	fb01 f303 	mul.w	r3, r1, r3
 8003e28:	4413      	add	r3, r2
 8003e2a:	333f      	adds	r3, #63	; 0x3f
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	2b03      	cmp	r3, #3
 8003e30:	d111      	bne.n	8003e56 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	212c      	movs	r1, #44	; 0x2c
 8003e38:	fb01 f303 	mul.w	r3, r1, r3
 8003e3c:	4413      	add	r3, r2
 8003e3e:	335c      	adds	r3, #92	; 0x5c
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	4611      	mov	r1, r2
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f004 f9bd 	bl	80081ce <USB_HC_Halt>
 8003e54:	e031      	b.n	8003eba <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	212c      	movs	r1, #44	; 0x2c
 8003e5c:	fb01 f303 	mul.w	r3, r1, r3
 8003e60:	4413      	add	r3, r2
 8003e62:	333f      	adds	r3, #63	; 0x3f
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d009      	beq.n	8003e7e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	212c      	movs	r1, #44	; 0x2c
 8003e70:	fb01 f303 	mul.w	r3, r1, r3
 8003e74:	4413      	add	r3, r2
 8003e76:	333f      	adds	r3, #63	; 0x3f
 8003e78:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d11d      	bne.n	8003eba <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	212c      	movs	r1, #44	; 0x2c
 8003e84:	fb01 f303 	mul.w	r3, r1, r3
 8003e88:	4413      	add	r3, r2
 8003e8a:	335c      	adds	r3, #92	; 0x5c
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d110      	bne.n	8003eba <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	212c      	movs	r1, #44	; 0x2c
 8003e9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ea2:	4413      	add	r3, r2
 8003ea4:	3361      	adds	r3, #97	; 0x61
 8003ea6:	2203      	movs	r2, #3
 8003ea8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	b2d2      	uxtb	r2, r2
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f004 f98a 	bl	80081ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	2310      	movs	r3, #16
 8003eca:	6093      	str	r3, [r2, #8]
}
 8003ecc:	bf00      	nop
 8003ece:	3718      	adds	r7, #24
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b088      	sub	sp, #32
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	460b      	mov	r3, r1
 8003ede:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003eea:	78fb      	ldrb	r3, [r7, #3]
 8003eec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	015a      	lsls	r2, r3, #5
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f003 0304 	and.w	r3, r3, #4
 8003f00:	2b04      	cmp	r3, #4
 8003f02:	d11a      	bne.n	8003f3a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	015a      	lsls	r2, r3, #5
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f10:	461a      	mov	r2, r3
 8003f12:	2304      	movs	r3, #4
 8003f14:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	212c      	movs	r1, #44	; 0x2c
 8003f1c:	fb01 f303 	mul.w	r3, r1, r3
 8003f20:	4413      	add	r3, r2
 8003f22:	3361      	adds	r3, #97	; 0x61
 8003f24:	2206      	movs	r2, #6
 8003f26:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	4611      	mov	r1, r2
 8003f32:	4618      	mov	r0, r3
 8003f34:	f004 f94b 	bl	80081ce <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003f38:	e331      	b.n	800459e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	015a      	lsls	r2, r3, #5
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	4413      	add	r3, r2
 8003f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 0320 	and.w	r3, r3, #32
 8003f4c:	2b20      	cmp	r3, #32
 8003f4e:	d12e      	bne.n	8003fae <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	2320      	movs	r3, #32
 8003f60:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	212c      	movs	r1, #44	; 0x2c
 8003f68:	fb01 f303 	mul.w	r3, r1, r3
 8003f6c:	4413      	add	r3, r2
 8003f6e:	333d      	adds	r3, #61	; 0x3d
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	f040 8313 	bne.w	800459e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	212c      	movs	r1, #44	; 0x2c
 8003f7e:	fb01 f303 	mul.w	r3, r1, r3
 8003f82:	4413      	add	r3, r2
 8003f84:	333d      	adds	r3, #61	; 0x3d
 8003f86:	2200      	movs	r2, #0
 8003f88:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	212c      	movs	r1, #44	; 0x2c
 8003f90:	fb01 f303 	mul.w	r3, r1, r3
 8003f94:	4413      	add	r3, r2
 8003f96:	3360      	adds	r3, #96	; 0x60
 8003f98:	2202      	movs	r2, #2
 8003f9a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	b2d2      	uxtb	r2, r2
 8003fa4:	4611      	mov	r1, r2
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f004 f911 	bl	80081ce <USB_HC_Halt>
}
 8003fac:	e2f7      	b.n	800459e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fc4:	d112      	bne.n	8003fec <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	015a      	lsls	r2, r3, #5
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fd8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	b2d2      	uxtb	r2, r2
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f004 f8f2 	bl	80081ce <USB_HC_Halt>
}
 8003fea:	e2d8      	b.n	800459e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	015a      	lsls	r2, r3, #5
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d140      	bne.n	8004084 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	212c      	movs	r1, #44	; 0x2c
 8004008:	fb01 f303 	mul.w	r3, r1, r3
 800400c:	4413      	add	r3, r2
 800400e:	335c      	adds	r3, #92	; 0x5c
 8004010:	2200      	movs	r2, #0
 8004012:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	015a      	lsls	r2, r3, #5
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	4413      	add	r3, r2
 800401c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004026:	2b40      	cmp	r3, #64	; 0x40
 8004028:	d111      	bne.n	800404e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	212c      	movs	r1, #44	; 0x2c
 8004030:	fb01 f303 	mul.w	r3, r1, r3
 8004034:	4413      	add	r3, r2
 8004036:	333d      	adds	r3, #61	; 0x3d
 8004038:	2201      	movs	r2, #1
 800403a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	015a      	lsls	r2, r3, #5
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	4413      	add	r3, r2
 8004044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004048:	461a      	mov	r2, r3
 800404a:	2340      	movs	r3, #64	; 0x40
 800404c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	015a      	lsls	r2, r3, #5
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	4413      	add	r3, r2
 8004056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800405a:	461a      	mov	r2, r3
 800405c:	2301      	movs	r3, #1
 800405e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	212c      	movs	r1, #44	; 0x2c
 8004066:	fb01 f303 	mul.w	r3, r1, r3
 800406a:	4413      	add	r3, r2
 800406c:	3361      	adds	r3, #97	; 0x61
 800406e:	2201      	movs	r2, #1
 8004070:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	b2d2      	uxtb	r2, r2
 800407a:	4611      	mov	r1, r2
 800407c:	4618      	mov	r0, r3
 800407e:	f004 f8a6 	bl	80081ce <USB_HC_Halt>
}
 8004082:	e28c      	b.n	800459e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	4413      	add	r3, r2
 800408c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004096:	2b40      	cmp	r3, #64	; 0x40
 8004098:	d12c      	bne.n	80040f4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	212c      	movs	r1, #44	; 0x2c
 80040a0:	fb01 f303 	mul.w	r3, r1, r3
 80040a4:	4413      	add	r3, r2
 80040a6:	3361      	adds	r3, #97	; 0x61
 80040a8:	2204      	movs	r2, #4
 80040aa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	212c      	movs	r1, #44	; 0x2c
 80040b2:	fb01 f303 	mul.w	r3, r1, r3
 80040b6:	4413      	add	r3, r2
 80040b8:	333d      	adds	r3, #61	; 0x3d
 80040ba:	2201      	movs	r2, #1
 80040bc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	212c      	movs	r1, #44	; 0x2c
 80040c4:	fb01 f303 	mul.w	r3, r1, r3
 80040c8:	4413      	add	r3, r2
 80040ca:	335c      	adds	r3, #92	; 0x5c
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	4611      	mov	r1, r2
 80040da:	4618      	mov	r0, r3
 80040dc:	f004 f877 	bl	80081ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ec:	461a      	mov	r2, r3
 80040ee:	2340      	movs	r3, #64	; 0x40
 80040f0:	6093      	str	r3, [r2, #8]
}
 80040f2:	e254      	b.n	800459e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 0308 	and.w	r3, r3, #8
 8004106:	2b08      	cmp	r3, #8
 8004108:	d11a      	bne.n	8004140 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	015a      	lsls	r2, r3, #5
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	4413      	add	r3, r2
 8004112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004116:	461a      	mov	r2, r3
 8004118:	2308      	movs	r3, #8
 800411a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	212c      	movs	r1, #44	; 0x2c
 8004122:	fb01 f303 	mul.w	r3, r1, r3
 8004126:	4413      	add	r3, r2
 8004128:	3361      	adds	r3, #97	; 0x61
 800412a:	2205      	movs	r2, #5
 800412c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	b2d2      	uxtb	r2, r2
 8004136:	4611      	mov	r1, r2
 8004138:	4618      	mov	r0, r3
 800413a:	f004 f848 	bl	80081ce <USB_HC_Halt>
}
 800413e:	e22e      	b.n	800459e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	015a      	lsls	r2, r3, #5
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	4413      	add	r3, r2
 8004148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 0310 	and.w	r3, r3, #16
 8004152:	2b10      	cmp	r3, #16
 8004154:	d140      	bne.n	80041d8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	212c      	movs	r1, #44	; 0x2c
 800415c:	fb01 f303 	mul.w	r3, r1, r3
 8004160:	4413      	add	r3, r2
 8004162:	335c      	adds	r3, #92	; 0x5c
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	212c      	movs	r1, #44	; 0x2c
 800416e:	fb01 f303 	mul.w	r3, r1, r3
 8004172:	4413      	add	r3, r2
 8004174:	3361      	adds	r3, #97	; 0x61
 8004176:	2203      	movs	r2, #3
 8004178:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	212c      	movs	r1, #44	; 0x2c
 8004180:	fb01 f303 	mul.w	r3, r1, r3
 8004184:	4413      	add	r3, r2
 8004186:	333d      	adds	r3, #61	; 0x3d
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d112      	bne.n	80041b4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	212c      	movs	r1, #44	; 0x2c
 8004194:	fb01 f303 	mul.w	r3, r1, r3
 8004198:	4413      	add	r3, r2
 800419a:	333c      	adds	r3, #60	; 0x3c
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d108      	bne.n	80041b4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	212c      	movs	r1, #44	; 0x2c
 80041a8:	fb01 f303 	mul.w	r3, r1, r3
 80041ac:	4413      	add	r3, r2
 80041ae:	333d      	adds	r3, #61	; 0x3d
 80041b0:	2201      	movs	r2, #1
 80041b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	4611      	mov	r1, r2
 80041be:	4618      	mov	r0, r3
 80041c0:	f004 f805 	bl	80081ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d0:	461a      	mov	r2, r3
 80041d2:	2310      	movs	r3, #16
 80041d4:	6093      	str	r3, [r2, #8]
}
 80041d6:	e1e2      	b.n	800459e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	015a      	lsls	r2, r3, #5
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	4413      	add	r3, r2
 80041e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ea:	2b80      	cmp	r3, #128	; 0x80
 80041ec:	d164      	bne.n	80042b8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d111      	bne.n	800421a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	212c      	movs	r1, #44	; 0x2c
 80041fc:	fb01 f303 	mul.w	r3, r1, r3
 8004200:	4413      	add	r3, r2
 8004202:	3361      	adds	r3, #97	; 0x61
 8004204:	2206      	movs	r2, #6
 8004206:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	b2d2      	uxtb	r2, r2
 8004210:	4611      	mov	r1, r2
 8004212:	4618      	mov	r0, r3
 8004214:	f003 ffdb 	bl	80081ce <USB_HC_Halt>
 8004218:	e044      	b.n	80042a4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	212c      	movs	r1, #44	; 0x2c
 8004220:	fb01 f303 	mul.w	r3, r1, r3
 8004224:	4413      	add	r3, r2
 8004226:	335c      	adds	r3, #92	; 0x5c
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	6879      	ldr	r1, [r7, #4]
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	202c      	movs	r0, #44	; 0x2c
 8004232:	fb00 f303 	mul.w	r3, r0, r3
 8004236:	440b      	add	r3, r1
 8004238:	335c      	adds	r3, #92	; 0x5c
 800423a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	212c      	movs	r1, #44	; 0x2c
 8004242:	fb01 f303 	mul.w	r3, r1, r3
 8004246:	4413      	add	r3, r2
 8004248:	335c      	adds	r3, #92	; 0x5c
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b02      	cmp	r3, #2
 800424e:	d920      	bls.n	8004292 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	212c      	movs	r1, #44	; 0x2c
 8004256:	fb01 f303 	mul.w	r3, r1, r3
 800425a:	4413      	add	r3, r2
 800425c:	335c      	adds	r3, #92	; 0x5c
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	212c      	movs	r1, #44	; 0x2c
 8004268:	fb01 f303 	mul.w	r3, r1, r3
 800426c:	4413      	add	r3, r2
 800426e:	3360      	adds	r3, #96	; 0x60
 8004270:	2204      	movs	r2, #4
 8004272:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	b2d9      	uxtb	r1, r3
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	202c      	movs	r0, #44	; 0x2c
 800427e:	fb00 f303 	mul.w	r3, r0, r3
 8004282:	4413      	add	r3, r2
 8004284:	3360      	adds	r3, #96	; 0x60
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	461a      	mov	r2, r3
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f00a fe66 	bl	800ef5c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004290:	e008      	b.n	80042a4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	212c      	movs	r1, #44	; 0x2c
 8004298:	fb01 f303 	mul.w	r3, r1, r3
 800429c:	4413      	add	r3, r2
 800429e:	3360      	adds	r3, #96	; 0x60
 80042a0:	2202      	movs	r2, #2
 80042a2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	015a      	lsls	r2, r3, #5
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	4413      	add	r3, r2
 80042ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042b0:	461a      	mov	r2, r3
 80042b2:	2380      	movs	r3, #128	; 0x80
 80042b4:	6093      	str	r3, [r2, #8]
}
 80042b6:	e172      	b.n	800459e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ce:	d11b      	bne.n	8004308 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	212c      	movs	r1, #44	; 0x2c
 80042d6:	fb01 f303 	mul.w	r3, r1, r3
 80042da:	4413      	add	r3, r2
 80042dc:	3361      	adds	r3, #97	; 0x61
 80042de:	2208      	movs	r2, #8
 80042e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	b2d2      	uxtb	r2, r2
 80042ea:	4611      	mov	r1, r2
 80042ec:	4618      	mov	r0, r3
 80042ee:	f003 ff6e 	bl	80081ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	015a      	lsls	r2, r3, #5
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	4413      	add	r3, r2
 80042fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042fe:	461a      	mov	r2, r3
 8004300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004304:	6093      	str	r3, [r2, #8]
}
 8004306:	e14a      	b.n	800459e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	4413      	add	r3, r2
 8004310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b02      	cmp	r3, #2
 800431c:	f040 813f 	bne.w	800459e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	212c      	movs	r1, #44	; 0x2c
 8004326:	fb01 f303 	mul.w	r3, r1, r3
 800432a:	4413      	add	r3, r2
 800432c:	3361      	adds	r3, #97	; 0x61
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d17d      	bne.n	8004430 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	212c      	movs	r1, #44	; 0x2c
 800433a:	fb01 f303 	mul.w	r3, r1, r3
 800433e:	4413      	add	r3, r2
 8004340:	3360      	adds	r3, #96	; 0x60
 8004342:	2201      	movs	r2, #1
 8004344:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	212c      	movs	r1, #44	; 0x2c
 800434c:	fb01 f303 	mul.w	r3, r1, r3
 8004350:	4413      	add	r3, r2
 8004352:	333f      	adds	r3, #63	; 0x3f
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b02      	cmp	r3, #2
 8004358:	d00a      	beq.n	8004370 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	212c      	movs	r1, #44	; 0x2c
 8004360:	fb01 f303 	mul.w	r3, r1, r3
 8004364:	4413      	add	r3, r2
 8004366:	333f      	adds	r3, #63	; 0x3f
 8004368:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800436a:	2b03      	cmp	r3, #3
 800436c:	f040 8100 	bne.w	8004570 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d113      	bne.n	80043a0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	212c      	movs	r1, #44	; 0x2c
 800437e:	fb01 f303 	mul.w	r3, r1, r3
 8004382:	4413      	add	r3, r2
 8004384:	3355      	adds	r3, #85	; 0x55
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	f083 0301 	eor.w	r3, r3, #1
 800438c:	b2d8      	uxtb	r0, r3
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	212c      	movs	r1, #44	; 0x2c
 8004394:	fb01 f303 	mul.w	r3, r1, r3
 8004398:	4413      	add	r3, r2
 800439a:	3355      	adds	r3, #85	; 0x55
 800439c:	4602      	mov	r2, r0
 800439e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	f040 80e3 	bne.w	8004570 <HCD_HC_OUT_IRQHandler+0x69c>
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	212c      	movs	r1, #44	; 0x2c
 80043b0:	fb01 f303 	mul.w	r3, r1, r3
 80043b4:	4413      	add	r3, r2
 80043b6:	334c      	adds	r3, #76	; 0x4c
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f000 80d8 	beq.w	8004570 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	212c      	movs	r1, #44	; 0x2c
 80043c6:	fb01 f303 	mul.w	r3, r1, r3
 80043ca:	4413      	add	r3, r2
 80043cc:	334c      	adds	r3, #76	; 0x4c
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6879      	ldr	r1, [r7, #4]
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	202c      	movs	r0, #44	; 0x2c
 80043d6:	fb00 f202 	mul.w	r2, r0, r2
 80043da:	440a      	add	r2, r1
 80043dc:	3240      	adds	r2, #64	; 0x40
 80043de:	8812      	ldrh	r2, [r2, #0]
 80043e0:	4413      	add	r3, r2
 80043e2:	3b01      	subs	r3, #1
 80043e4:	6879      	ldr	r1, [r7, #4]
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	202c      	movs	r0, #44	; 0x2c
 80043ea:	fb00 f202 	mul.w	r2, r0, r2
 80043ee:	440a      	add	r2, r1
 80043f0:	3240      	adds	r2, #64	; 0x40
 80043f2:	8812      	ldrh	r2, [r2, #0]
 80043f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 80b5 	beq.w	8004570 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	212c      	movs	r1, #44	; 0x2c
 800440c:	fb01 f303 	mul.w	r3, r1, r3
 8004410:	4413      	add	r3, r2
 8004412:	3355      	adds	r3, #85	; 0x55
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	f083 0301 	eor.w	r3, r3, #1
 800441a:	b2d8      	uxtb	r0, r3
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	212c      	movs	r1, #44	; 0x2c
 8004422:	fb01 f303 	mul.w	r3, r1, r3
 8004426:	4413      	add	r3, r2
 8004428:	3355      	adds	r3, #85	; 0x55
 800442a:	4602      	mov	r2, r0
 800442c:	701a      	strb	r2, [r3, #0]
 800442e:	e09f      	b.n	8004570 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	212c      	movs	r1, #44	; 0x2c
 8004436:	fb01 f303 	mul.w	r3, r1, r3
 800443a:	4413      	add	r3, r2
 800443c:	3361      	adds	r3, #97	; 0x61
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	2b03      	cmp	r3, #3
 8004442:	d109      	bne.n	8004458 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	212c      	movs	r1, #44	; 0x2c
 800444a:	fb01 f303 	mul.w	r3, r1, r3
 800444e:	4413      	add	r3, r2
 8004450:	3360      	adds	r3, #96	; 0x60
 8004452:	2202      	movs	r2, #2
 8004454:	701a      	strb	r2, [r3, #0]
 8004456:	e08b      	b.n	8004570 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	212c      	movs	r1, #44	; 0x2c
 800445e:	fb01 f303 	mul.w	r3, r1, r3
 8004462:	4413      	add	r3, r2
 8004464:	3361      	adds	r3, #97	; 0x61
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	2b04      	cmp	r3, #4
 800446a:	d109      	bne.n	8004480 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	212c      	movs	r1, #44	; 0x2c
 8004472:	fb01 f303 	mul.w	r3, r1, r3
 8004476:	4413      	add	r3, r2
 8004478:	3360      	adds	r3, #96	; 0x60
 800447a:	2202      	movs	r2, #2
 800447c:	701a      	strb	r2, [r3, #0]
 800447e:	e077      	b.n	8004570 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	212c      	movs	r1, #44	; 0x2c
 8004486:	fb01 f303 	mul.w	r3, r1, r3
 800448a:	4413      	add	r3, r2
 800448c:	3361      	adds	r3, #97	; 0x61
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	2b05      	cmp	r3, #5
 8004492:	d109      	bne.n	80044a8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	212c      	movs	r1, #44	; 0x2c
 800449a:	fb01 f303 	mul.w	r3, r1, r3
 800449e:	4413      	add	r3, r2
 80044a0:	3360      	adds	r3, #96	; 0x60
 80044a2:	2205      	movs	r2, #5
 80044a4:	701a      	strb	r2, [r3, #0]
 80044a6:	e063      	b.n	8004570 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	212c      	movs	r1, #44	; 0x2c
 80044ae:	fb01 f303 	mul.w	r3, r1, r3
 80044b2:	4413      	add	r3, r2
 80044b4:	3361      	adds	r3, #97	; 0x61
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	2b06      	cmp	r3, #6
 80044ba:	d009      	beq.n	80044d0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	212c      	movs	r1, #44	; 0x2c
 80044c2:	fb01 f303 	mul.w	r3, r1, r3
 80044c6:	4413      	add	r3, r2
 80044c8:	3361      	adds	r3, #97	; 0x61
 80044ca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80044cc:	2b08      	cmp	r3, #8
 80044ce:	d14f      	bne.n	8004570 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	212c      	movs	r1, #44	; 0x2c
 80044d6:	fb01 f303 	mul.w	r3, r1, r3
 80044da:	4413      	add	r3, r2
 80044dc:	335c      	adds	r3, #92	; 0x5c
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	1c5a      	adds	r2, r3, #1
 80044e2:	6879      	ldr	r1, [r7, #4]
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	202c      	movs	r0, #44	; 0x2c
 80044e8:	fb00 f303 	mul.w	r3, r0, r3
 80044ec:	440b      	add	r3, r1
 80044ee:	335c      	adds	r3, #92	; 0x5c
 80044f0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	212c      	movs	r1, #44	; 0x2c
 80044f8:	fb01 f303 	mul.w	r3, r1, r3
 80044fc:	4413      	add	r3, r2
 80044fe:	335c      	adds	r3, #92	; 0x5c
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b02      	cmp	r3, #2
 8004504:	d912      	bls.n	800452c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	212c      	movs	r1, #44	; 0x2c
 800450c:	fb01 f303 	mul.w	r3, r1, r3
 8004510:	4413      	add	r3, r2
 8004512:	335c      	adds	r3, #92	; 0x5c
 8004514:	2200      	movs	r2, #0
 8004516:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	212c      	movs	r1, #44	; 0x2c
 800451e:	fb01 f303 	mul.w	r3, r1, r3
 8004522:	4413      	add	r3, r2
 8004524:	3360      	adds	r3, #96	; 0x60
 8004526:	2204      	movs	r2, #4
 8004528:	701a      	strb	r2, [r3, #0]
 800452a:	e021      	b.n	8004570 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	212c      	movs	r1, #44	; 0x2c
 8004532:	fb01 f303 	mul.w	r3, r1, r3
 8004536:	4413      	add	r3, r2
 8004538:	3360      	adds	r3, #96	; 0x60
 800453a:	2202      	movs	r2, #2
 800453c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	015a      	lsls	r2, r3, #5
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	4413      	add	r3, r2
 8004546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004554:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800455c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	015a      	lsls	r2, r3, #5
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	4413      	add	r3, r2
 8004566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800456a:	461a      	mov	r2, r3
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	015a      	lsls	r2, r3, #5
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	4413      	add	r3, r2
 8004578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800457c:	461a      	mov	r2, r3
 800457e:	2302      	movs	r3, #2
 8004580:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	b2d9      	uxtb	r1, r3
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	202c      	movs	r0, #44	; 0x2c
 800458c:	fb00 f303 	mul.w	r3, r0, r3
 8004590:	4413      	add	r3, r2
 8004592:	3360      	adds	r3, #96	; 0x60
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	461a      	mov	r2, r3
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f00a fcdf 	bl	800ef5c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800459e:	bf00      	nop
 80045a0:	3720      	adds	r7, #32
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b08a      	sub	sp, #40	; 0x28
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	0c5b      	lsrs	r3, r3, #17
 80045cc:	f003 030f 	and.w	r3, r3, #15
 80045d0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	091b      	lsrs	r3, r3, #4
 80045d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045da:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d004      	beq.n	80045ec <HCD_RXQLVL_IRQHandler+0x46>
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2b05      	cmp	r3, #5
 80045e6:	f000 80a9 	beq.w	800473c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80045ea:	e0aa      	b.n	8004742 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 80a6 	beq.w	8004740 <HCD_RXQLVL_IRQHandler+0x19a>
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	212c      	movs	r1, #44	; 0x2c
 80045fa:	fb01 f303 	mul.w	r3, r1, r3
 80045fe:	4413      	add	r3, r2
 8004600:	3344      	adds	r3, #68	; 0x44
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 809b 	beq.w	8004740 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	212c      	movs	r1, #44	; 0x2c
 8004610:	fb01 f303 	mul.w	r3, r1, r3
 8004614:	4413      	add	r3, r2
 8004616:	3350      	adds	r3, #80	; 0x50
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	441a      	add	r2, r3
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	202c      	movs	r0, #44	; 0x2c
 8004624:	fb00 f303 	mul.w	r3, r0, r3
 8004628:	440b      	add	r3, r1
 800462a:	334c      	adds	r3, #76	; 0x4c
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	429a      	cmp	r2, r3
 8004630:	d87a      	bhi.n	8004728 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6818      	ldr	r0, [r3, #0]
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	212c      	movs	r1, #44	; 0x2c
 800463c:	fb01 f303 	mul.w	r3, r1, r3
 8004640:	4413      	add	r3, r2
 8004642:	3344      	adds	r3, #68	; 0x44
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	b292      	uxth	r2, r2
 800464a:	4619      	mov	r1, r3
 800464c:	f003 f916 	bl	800787c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	212c      	movs	r1, #44	; 0x2c
 8004656:	fb01 f303 	mul.w	r3, r1, r3
 800465a:	4413      	add	r3, r2
 800465c:	3344      	adds	r3, #68	; 0x44
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	441a      	add	r2, r3
 8004664:	6879      	ldr	r1, [r7, #4]
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	202c      	movs	r0, #44	; 0x2c
 800466a:	fb00 f303 	mul.w	r3, r0, r3
 800466e:	440b      	add	r3, r1
 8004670:	3344      	adds	r3, #68	; 0x44
 8004672:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	212c      	movs	r1, #44	; 0x2c
 800467a:	fb01 f303 	mul.w	r3, r1, r3
 800467e:	4413      	add	r3, r2
 8004680:	3350      	adds	r3, #80	; 0x50
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	441a      	add	r2, r3
 8004688:	6879      	ldr	r1, [r7, #4]
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	202c      	movs	r0, #44	; 0x2c
 800468e:	fb00 f303 	mul.w	r3, r0, r3
 8004692:	440b      	add	r3, r1
 8004694:	3350      	adds	r3, #80	; 0x50
 8004696:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	015a      	lsls	r2, r3, #5
 800469c:	6a3b      	ldr	r3, [r7, #32]
 800469e:	4413      	add	r3, r2
 80046a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	0cdb      	lsrs	r3, r3, #19
 80046a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046ac:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	212c      	movs	r1, #44	; 0x2c
 80046b4:	fb01 f303 	mul.w	r3, r1, r3
 80046b8:	4413      	add	r3, r2
 80046ba:	3340      	adds	r3, #64	; 0x40
 80046bc:	881b      	ldrh	r3, [r3, #0]
 80046be:	461a      	mov	r2, r3
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d13c      	bne.n	8004740 <HCD_RXQLVL_IRQHandler+0x19a>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d039      	beq.n	8004740 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	015a      	lsls	r2, r3, #5
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	4413      	add	r3, r2
 80046d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046e2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046ea:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	6a3b      	ldr	r3, [r7, #32]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f8:	461a      	mov	r2, r3
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	212c      	movs	r1, #44	; 0x2c
 8004704:	fb01 f303 	mul.w	r3, r1, r3
 8004708:	4413      	add	r3, r2
 800470a:	3354      	adds	r3, #84	; 0x54
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	f083 0301 	eor.w	r3, r3, #1
 8004712:	b2d8      	uxtb	r0, r3
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	212c      	movs	r1, #44	; 0x2c
 800471a:	fb01 f303 	mul.w	r3, r1, r3
 800471e:	4413      	add	r3, r2
 8004720:	3354      	adds	r3, #84	; 0x54
 8004722:	4602      	mov	r2, r0
 8004724:	701a      	strb	r2, [r3, #0]
      break;
 8004726:	e00b      	b.n	8004740 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	212c      	movs	r1, #44	; 0x2c
 800472e:	fb01 f303 	mul.w	r3, r1, r3
 8004732:	4413      	add	r3, r2
 8004734:	3360      	adds	r3, #96	; 0x60
 8004736:	2204      	movs	r2, #4
 8004738:	701a      	strb	r2, [r3, #0]
      break;
 800473a:	e001      	b.n	8004740 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800473c:	bf00      	nop
 800473e:	e000      	b.n	8004742 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004740:	bf00      	nop
  }
}
 8004742:	bf00      	nop
 8004744:	3728      	adds	r7, #40	; 0x28
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b086      	sub	sp, #24
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004776:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b02      	cmp	r3, #2
 8004780:	d10b      	bne.n	800479a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b01      	cmp	r3, #1
 800478a:	d102      	bne.n	8004792 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f00a fbc9 	bl	800ef24 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	f043 0302 	orr.w	r3, r3, #2
 8004798:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f003 0308 	and.w	r3, r3, #8
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d132      	bne.n	800480a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f043 0308 	orr.w	r3, r3, #8
 80047aa:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f003 0304 	and.w	r3, r3, #4
 80047b2:	2b04      	cmp	r3, #4
 80047b4:	d126      	bne.n	8004804 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d113      	bne.n	80047e6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80047c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80047c8:	d106      	bne.n	80047d8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2102      	movs	r1, #2
 80047d0:	4618      	mov	r0, r3
 80047d2:	f003 f9c1 	bl	8007b58 <USB_InitFSLSPClkSel>
 80047d6:	e011      	b.n	80047fc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2101      	movs	r1, #1
 80047de:	4618      	mov	r0, r3
 80047e0:	f003 f9ba 	bl	8007b58 <USB_InitFSLSPClkSel>
 80047e4:	e00a      	b.n	80047fc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d106      	bne.n	80047fc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047f4:	461a      	mov	r2, r3
 80047f6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80047fa:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f00a fbbb 	bl	800ef78 <HAL_HCD_PortEnabled_Callback>
 8004802:	e002      	b.n	800480a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f00a fbc5 	bl	800ef94 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f003 0320 	and.w	r3, r3, #32
 8004810:	2b20      	cmp	r3, #32
 8004812:	d103      	bne.n	800481c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f043 0320 	orr.w	r3, r3, #32
 800481a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004822:	461a      	mov	r2, r3
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	6013      	str	r3, [r2, #0]
}
 8004828:	bf00      	nop
 800482a:	3718      	adds	r7, #24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e12b      	b.n	8004a9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d106      	bne.n	800485c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7fc ffc2 	bl	80017e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2224      	movs	r2, #36	; 0x24
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0201 	bic.w	r2, r2, #1
 8004872:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004882:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004892:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004894:	f002 fcda 	bl	800724c <HAL_RCC_GetPCLK1Freq>
 8004898:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	4a81      	ldr	r2, [pc, #516]	; (8004aa4 <HAL_I2C_Init+0x274>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d807      	bhi.n	80048b4 <HAL_I2C_Init+0x84>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4a80      	ldr	r2, [pc, #512]	; (8004aa8 <HAL_I2C_Init+0x278>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	bf94      	ite	ls
 80048ac:	2301      	movls	r3, #1
 80048ae:	2300      	movhi	r3, #0
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	e006      	b.n	80048c2 <HAL_I2C_Init+0x92>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4a7d      	ldr	r2, [pc, #500]	; (8004aac <HAL_I2C_Init+0x27c>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	bf94      	ite	ls
 80048bc:	2301      	movls	r3, #1
 80048be:	2300      	movhi	r3, #0
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e0e7      	b.n	8004a9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	4a78      	ldr	r2, [pc, #480]	; (8004ab0 <HAL_I2C_Init+0x280>)
 80048ce:	fba2 2303 	umull	r2, r3, r2, r3
 80048d2:	0c9b      	lsrs	r3, r3, #18
 80048d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	4a6a      	ldr	r2, [pc, #424]	; (8004aa4 <HAL_I2C_Init+0x274>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d802      	bhi.n	8004904 <HAL_I2C_Init+0xd4>
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	3301      	adds	r3, #1
 8004902:	e009      	b.n	8004918 <HAL_I2C_Init+0xe8>
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800490a:	fb02 f303 	mul.w	r3, r2, r3
 800490e:	4a69      	ldr	r2, [pc, #420]	; (8004ab4 <HAL_I2C_Init+0x284>)
 8004910:	fba2 2303 	umull	r2, r3, r2, r3
 8004914:	099b      	lsrs	r3, r3, #6
 8004916:	3301      	adds	r3, #1
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6812      	ldr	r2, [r2, #0]
 800491c:	430b      	orrs	r3, r1
 800491e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800492a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	495c      	ldr	r1, [pc, #368]	; (8004aa4 <HAL_I2C_Init+0x274>)
 8004934:	428b      	cmp	r3, r1
 8004936:	d819      	bhi.n	800496c <HAL_I2C_Init+0x13c>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	1e59      	subs	r1, r3, #1
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	fbb1 f3f3 	udiv	r3, r1, r3
 8004946:	1c59      	adds	r1, r3, #1
 8004948:	f640 73fc 	movw	r3, #4092	; 0xffc
 800494c:	400b      	ands	r3, r1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00a      	beq.n	8004968 <HAL_I2C_Init+0x138>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	1e59      	subs	r1, r3, #1
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	005b      	lsls	r3, r3, #1
 800495c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004960:	3301      	adds	r3, #1
 8004962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004966:	e051      	b.n	8004a0c <HAL_I2C_Init+0x1dc>
 8004968:	2304      	movs	r3, #4
 800496a:	e04f      	b.n	8004a0c <HAL_I2C_Init+0x1dc>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d111      	bne.n	8004998 <HAL_I2C_Init+0x168>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	1e58      	subs	r0, r3, #1
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6859      	ldr	r1, [r3, #4]
 800497c:	460b      	mov	r3, r1
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	440b      	add	r3, r1
 8004982:	fbb0 f3f3 	udiv	r3, r0, r3
 8004986:	3301      	adds	r3, #1
 8004988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800498c:	2b00      	cmp	r3, #0
 800498e:	bf0c      	ite	eq
 8004990:	2301      	moveq	r3, #1
 8004992:	2300      	movne	r3, #0
 8004994:	b2db      	uxtb	r3, r3
 8004996:	e012      	b.n	80049be <HAL_I2C_Init+0x18e>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	1e58      	subs	r0, r3, #1
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6859      	ldr	r1, [r3, #4]
 80049a0:	460b      	mov	r3, r1
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	440b      	add	r3, r1
 80049a6:	0099      	lsls	r1, r3, #2
 80049a8:	440b      	add	r3, r1
 80049aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80049ae:	3301      	adds	r3, #1
 80049b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	bf0c      	ite	eq
 80049b8:	2301      	moveq	r3, #1
 80049ba:	2300      	movne	r3, #0
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <HAL_I2C_Init+0x196>
 80049c2:	2301      	movs	r3, #1
 80049c4:	e022      	b.n	8004a0c <HAL_I2C_Init+0x1dc>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10e      	bne.n	80049ec <HAL_I2C_Init+0x1bc>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	1e58      	subs	r0, r3, #1
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6859      	ldr	r1, [r3, #4]
 80049d6:	460b      	mov	r3, r1
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	440b      	add	r3, r1
 80049dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80049e0:	3301      	adds	r3, #1
 80049e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ea:	e00f      	b.n	8004a0c <HAL_I2C_Init+0x1dc>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	1e58      	subs	r0, r3, #1
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6859      	ldr	r1, [r3, #4]
 80049f4:	460b      	mov	r3, r1
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	440b      	add	r3, r1
 80049fa:	0099      	lsls	r1, r3, #2
 80049fc:	440b      	add	r3, r1
 80049fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a02:	3301      	adds	r3, #1
 8004a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a0c:	6879      	ldr	r1, [r7, #4]
 8004a0e:	6809      	ldr	r1, [r1, #0]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	69da      	ldr	r2, [r3, #28]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	6911      	ldr	r1, [r2, #16]
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	68d2      	ldr	r2, [r2, #12]
 8004a46:	4311      	orrs	r1, r2
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6812      	ldr	r2, [r2, #0]
 8004a4c:	430b      	orrs	r3, r1
 8004a4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	695a      	ldr	r2, [r3, #20]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	431a      	orrs	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f042 0201 	orr.w	r2, r2, #1
 8004a7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2220      	movs	r2, #32
 8004a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	000186a0 	.word	0x000186a0
 8004aa8:	001e847f 	.word	0x001e847f
 8004aac:	003d08ff 	.word	0x003d08ff
 8004ab0:	431bde83 	.word	0x431bde83
 8004ab4:	10624dd3 	.word	0x10624dd3

08004ab8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e021      	b.n	8004b0e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2224      	movs	r2, #36	; 0x24
 8004ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0201 	bic.w	r2, r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7fc fec4 	bl	8001870 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
	...

08004b18 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b088      	sub	sp, #32
 8004b1c:	af02      	add	r7, sp, #8
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	4608      	mov	r0, r1
 8004b22:	4611      	mov	r1, r2
 8004b24:	461a      	mov	r2, r3
 8004b26:	4603      	mov	r3, r0
 8004b28:	817b      	strh	r3, [r7, #10]
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	813b      	strh	r3, [r7, #8]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b32:	f7fd fa59 	bl	8001fe8 <HAL_GetTick>
 8004b36:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	f040 80d9 	bne.w	8004cf8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	2319      	movs	r3, #25
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	496d      	ldr	r1, [pc, #436]	; (8004d04 <HAL_I2C_Mem_Write+0x1ec>)
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 fc8d 	bl	8005470 <I2C_WaitOnFlagUntilTimeout>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d001      	beq.n	8004b60 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	e0cc      	b.n	8004cfa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d101      	bne.n	8004b6e <HAL_I2C_Mem_Write+0x56>
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	e0c5      	b.n	8004cfa <HAL_I2C_Mem_Write+0x1e2>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d007      	beq.n	8004b94 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 0201 	orr.w	r2, r2, #1
 8004b92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ba2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2221      	movs	r2, #33	; 0x21
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2240      	movs	r2, #64	; 0x40
 8004bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6a3a      	ldr	r2, [r7, #32]
 8004bbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004bc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4a4d      	ldr	r2, [pc, #308]	; (8004d08 <HAL_I2C_Mem_Write+0x1f0>)
 8004bd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bd6:	88f8      	ldrh	r0, [r7, #6]
 8004bd8:	893a      	ldrh	r2, [r7, #8]
 8004bda:	8979      	ldrh	r1, [r7, #10]
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	9301      	str	r3, [sp, #4]
 8004be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	4603      	mov	r3, r0
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 fac4 	bl	8005174 <I2C_RequestMemoryWrite>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d052      	beq.n	8004c98 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e081      	b.n	8004cfa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f000 fd0e 	bl	800561c <I2C_WaitOnTXEFlagUntilTimeout>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00d      	beq.n	8004c22 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	d107      	bne.n	8004c1e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e06b      	b.n	8004cfa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c26:	781a      	ldrb	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	1c5a      	adds	r2, r3, #1
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b04      	cmp	r3, #4
 8004c5e:	d11b      	bne.n	8004c98 <HAL_I2C_Mem_Write+0x180>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d017      	beq.n	8004c98 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6c:	781a      	ldrb	r2, [r3, #0]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c78:	1c5a      	adds	r2, r3, #1
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c82:	3b01      	subs	r3, #1
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	3b01      	subs	r3, #1
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1aa      	bne.n	8004bf6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f000 fcfa 	bl	800569e <I2C_WaitOnBTFFlagUntilTimeout>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00d      	beq.n	8004ccc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb4:	2b04      	cmp	r3, #4
 8004cb6:	d107      	bne.n	8004cc8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cc6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e016      	b.n	8004cfa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	e000      	b.n	8004cfa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004cf8:	2302      	movs	r3, #2
  }
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3718      	adds	r7, #24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	00100002 	.word	0x00100002
 8004d08:	ffff0000 	.word	0xffff0000

08004d0c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b08c      	sub	sp, #48	; 0x30
 8004d10:	af02      	add	r7, sp, #8
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	4608      	mov	r0, r1
 8004d16:	4611      	mov	r1, r2
 8004d18:	461a      	mov	r2, r3
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	817b      	strh	r3, [r7, #10]
 8004d1e:	460b      	mov	r3, r1
 8004d20:	813b      	strh	r3, [r7, #8]
 8004d22:	4613      	mov	r3, r2
 8004d24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d26:	f7fd f95f 	bl	8001fe8 <HAL_GetTick>
 8004d2a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b20      	cmp	r3, #32
 8004d36:	f040 8208 	bne.w	800514a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	2319      	movs	r3, #25
 8004d40:	2201      	movs	r2, #1
 8004d42:	497b      	ldr	r1, [pc, #492]	; (8004f30 <HAL_I2C_Mem_Read+0x224>)
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 fb93 	bl	8005470 <I2C_WaitOnFlagUntilTimeout>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d001      	beq.n	8004d54 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004d50:	2302      	movs	r3, #2
 8004d52:	e1fb      	b.n	800514c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d101      	bne.n	8004d62 <HAL_I2C_Mem_Read+0x56>
 8004d5e:	2302      	movs	r3, #2
 8004d60:	e1f4      	b.n	800514c <HAL_I2C_Mem_Read+0x440>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d007      	beq.n	8004d88 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f042 0201 	orr.w	r2, r2, #1
 8004d86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2222      	movs	r2, #34	; 0x22
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2240      	movs	r2, #64	; 0x40
 8004da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004db2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004db8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4a5b      	ldr	r2, [pc, #364]	; (8004f34 <HAL_I2C_Mem_Read+0x228>)
 8004dc8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004dca:	88f8      	ldrh	r0, [r7, #6]
 8004dcc:	893a      	ldrh	r2, [r7, #8]
 8004dce:	8979      	ldrh	r1, [r7, #10]
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	9301      	str	r3, [sp, #4]
 8004dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd6:	9300      	str	r3, [sp, #0]
 8004dd8:	4603      	mov	r3, r0
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 fa60 	bl	80052a0 <I2C_RequestMemoryRead>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e1b0      	b.n	800514c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d113      	bne.n	8004e1a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004df2:	2300      	movs	r3, #0
 8004df4:	623b      	str	r3, [r7, #32]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	623b      	str	r3, [r7, #32]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	623b      	str	r3, [r7, #32]
 8004e06:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	e184      	b.n	8005124 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d11b      	bne.n	8004e5a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e32:	2300      	movs	r3, #0
 8004e34:	61fb      	str	r3, [r7, #28]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	61fb      	str	r3, [r7, #28]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	61fb      	str	r3, [r7, #28]
 8004e46:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e56:	601a      	str	r2, [r3, #0]
 8004e58:	e164      	b.n	8005124 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d11b      	bne.n	8004e9a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e70:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e82:	2300      	movs	r3, #0
 8004e84:	61bb      	str	r3, [r7, #24]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	61bb      	str	r3, [r7, #24]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	61bb      	str	r3, [r7, #24]
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	e144      	b.n	8005124 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	617b      	str	r3, [r7, #20]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	617b      	str	r3, [r7, #20]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	617b      	str	r3, [r7, #20]
 8004eae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004eb0:	e138      	b.n	8005124 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb6:	2b03      	cmp	r3, #3
 8004eb8:	f200 80f1 	bhi.w	800509e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d123      	bne.n	8004f0c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f000 fc29 	bl	8005720 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e139      	b.n	800514c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	691a      	ldr	r2, [r3, #16]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	b2d2      	uxtb	r2, r2
 8004ee4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	1c5a      	adds	r2, r3, #1
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	3b01      	subs	r3, #1
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f0a:	e10b      	b.n	8005124 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d14e      	bne.n	8004fb2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	4906      	ldr	r1, [pc, #24]	; (8004f38 <HAL_I2C_Mem_Read+0x22c>)
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 faa6 	bl	8005470 <I2C_WaitOnFlagUntilTimeout>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d008      	beq.n	8004f3c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e10e      	b.n	800514c <HAL_I2C_Mem_Read+0x440>
 8004f2e:	bf00      	nop
 8004f30:	00100002 	.word	0x00100002
 8004f34:	ffff0000 	.word	0xffff0000
 8004f38:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	691a      	ldr	r2, [r3, #16]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5e:	1c5a      	adds	r2, r3, #1
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	3b01      	subs	r3, #1
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	691a      	ldr	r2, [r3, #16]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	b2d2      	uxtb	r2, r2
 8004f8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	1c5a      	adds	r2, r3, #1
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fb0:	e0b8      	b.n	8005124 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb8:	2200      	movs	r2, #0
 8004fba:	4966      	ldr	r1, [pc, #408]	; (8005154 <HAL_I2C_Mem_Read+0x448>)
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 fa57 	bl	8005470 <I2C_WaitOnFlagUntilTimeout>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e0bf      	b.n	800514c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	691a      	ldr	r2, [r3, #16]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe6:	b2d2      	uxtb	r2, r2
 8004fe8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	1c5a      	adds	r2, r3, #1
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005004:	b29b      	uxth	r3, r3
 8005006:	3b01      	subs	r3, #1
 8005008:	b29a      	uxth	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005014:	2200      	movs	r2, #0
 8005016:	494f      	ldr	r1, [pc, #316]	; (8005154 <HAL_I2C_Mem_Read+0x448>)
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f000 fa29 	bl	8005470 <I2C_WaitOnFlagUntilTimeout>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d001      	beq.n	8005028 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e091      	b.n	800514c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005036:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	691a      	ldr	r2, [r3, #16]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	b2d2      	uxtb	r2, r2
 8005044:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504a:	1c5a      	adds	r2, r3, #1
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005054:	3b01      	subs	r3, #1
 8005056:	b29a      	uxth	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005060:	b29b      	uxth	r3, r3
 8005062:	3b01      	subs	r3, #1
 8005064:	b29a      	uxth	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	691a      	ldr	r2, [r3, #16]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005074:	b2d2      	uxtb	r2, r2
 8005076:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	1c5a      	adds	r2, r3, #1
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005086:	3b01      	subs	r3, #1
 8005088:	b29a      	uxth	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005092:	b29b      	uxth	r3, r3
 8005094:	3b01      	subs	r3, #1
 8005096:	b29a      	uxth	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800509c:	e042      	b.n	8005124 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800509e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f000 fb3c 	bl	8005720 <I2C_WaitOnRXNEFlagUntilTimeout>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e04c      	b.n	800514c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	691a      	ldr	r2, [r3, #16]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	b2d2      	uxtb	r2, r2
 80050be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ce:	3b01      	subs	r3, #1
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050da:	b29b      	uxth	r3, r3
 80050dc:	3b01      	subs	r3, #1
 80050de:	b29a      	uxth	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	f003 0304 	and.w	r3, r3, #4
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	d118      	bne.n	8005124 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	691a      	ldr	r2, [r3, #16]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	b2d2      	uxtb	r2, r2
 80050fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	1c5a      	adds	r2, r3, #1
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800510e:	3b01      	subs	r3, #1
 8005110:	b29a      	uxth	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511a:	b29b      	uxth	r3, r3
 800511c:	3b01      	subs	r3, #1
 800511e:	b29a      	uxth	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005128:	2b00      	cmp	r3, #0
 800512a:	f47f aec2 	bne.w	8004eb2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2220      	movs	r2, #32
 8005132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005146:	2300      	movs	r3, #0
 8005148:	e000      	b.n	800514c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800514a:	2302      	movs	r3, #2
  }
}
 800514c:	4618      	mov	r0, r3
 800514e:	3728      	adds	r7, #40	; 0x28
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	00010004 	.word	0x00010004

08005158 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005166:	b2db      	uxtb	r3, r3
}
 8005168:	4618      	mov	r0, r3
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b088      	sub	sp, #32
 8005178:	af02      	add	r7, sp, #8
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	4608      	mov	r0, r1
 800517e:	4611      	mov	r1, r2
 8005180:	461a      	mov	r2, r3
 8005182:	4603      	mov	r3, r0
 8005184:	817b      	strh	r3, [r7, #10]
 8005186:	460b      	mov	r3, r1
 8005188:	813b      	strh	r3, [r7, #8]
 800518a:	4613      	mov	r3, r2
 800518c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800519c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f000 f960 	bl	8005470 <I2C_WaitOnFlagUntilTimeout>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00d      	beq.n	80051d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051c4:	d103      	bne.n	80051ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e05f      	b.n	8005292 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051d2:	897b      	ldrh	r3, [r7, #10]
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	461a      	mov	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	6a3a      	ldr	r2, [r7, #32]
 80051e6:	492d      	ldr	r1, [pc, #180]	; (800529c <I2C_RequestMemoryWrite+0x128>)
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 f998 	bl	800551e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d001      	beq.n	80051f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e04c      	b.n	8005292 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051f8:	2300      	movs	r3, #0
 80051fa:	617b      	str	r3, [r7, #20]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	617b      	str	r3, [r7, #20]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	617b      	str	r3, [r7, #20]
 800520c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800520e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005210:	6a39      	ldr	r1, [r7, #32]
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f000 fa02 	bl	800561c <I2C_WaitOnTXEFlagUntilTimeout>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00d      	beq.n	800523a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005222:	2b04      	cmp	r3, #4
 8005224:	d107      	bne.n	8005236 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005234:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e02b      	b.n	8005292 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800523a:	88fb      	ldrh	r3, [r7, #6]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d105      	bne.n	800524c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005240:	893b      	ldrh	r3, [r7, #8]
 8005242:	b2da      	uxtb	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	611a      	str	r2, [r3, #16]
 800524a:	e021      	b.n	8005290 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800524c:	893b      	ldrh	r3, [r7, #8]
 800524e:	0a1b      	lsrs	r3, r3, #8
 8005250:	b29b      	uxth	r3, r3
 8005252:	b2da      	uxtb	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800525a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800525c:	6a39      	ldr	r1, [r7, #32]
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 f9dc 	bl	800561c <I2C_WaitOnTXEFlagUntilTimeout>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00d      	beq.n	8005286 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	2b04      	cmp	r3, #4
 8005270:	d107      	bne.n	8005282 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005280:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e005      	b.n	8005292 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005286:	893b      	ldrh	r3, [r7, #8]
 8005288:	b2da      	uxtb	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3718      	adds	r7, #24
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	00010002 	.word	0x00010002

080052a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b088      	sub	sp, #32
 80052a4:	af02      	add	r7, sp, #8
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	4608      	mov	r0, r1
 80052aa:	4611      	mov	r1, r2
 80052ac:	461a      	mov	r2, r3
 80052ae:	4603      	mov	r3, r0
 80052b0:	817b      	strh	r3, [r7, #10]
 80052b2:	460b      	mov	r3, r1
 80052b4:	813b      	strh	r3, [r7, #8]
 80052b6:	4613      	mov	r3, r2
 80052b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	6a3b      	ldr	r3, [r7, #32]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 f8c2 	bl	8005470 <I2C_WaitOnFlagUntilTimeout>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00d      	beq.n	800530e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005300:	d103      	bne.n	800530a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005308:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e0aa      	b.n	8005464 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800530e:	897b      	ldrh	r3, [r7, #10]
 8005310:	b2db      	uxtb	r3, r3
 8005312:	461a      	mov	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800531c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	6a3a      	ldr	r2, [r7, #32]
 8005322:	4952      	ldr	r1, [pc, #328]	; (800546c <I2C_RequestMemoryRead+0x1cc>)
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f000 f8fa 	bl	800551e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d001      	beq.n	8005334 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e097      	b.n	8005464 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005334:	2300      	movs	r3, #0
 8005336:	617b      	str	r3, [r7, #20]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	617b      	str	r3, [r7, #20]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800534a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800534c:	6a39      	ldr	r1, [r7, #32]
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 f964 	bl	800561c <I2C_WaitOnTXEFlagUntilTimeout>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00d      	beq.n	8005376 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535e:	2b04      	cmp	r3, #4
 8005360:	d107      	bne.n	8005372 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005370:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e076      	b.n	8005464 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005376:	88fb      	ldrh	r3, [r7, #6]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d105      	bne.n	8005388 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800537c:	893b      	ldrh	r3, [r7, #8]
 800537e:	b2da      	uxtb	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	611a      	str	r2, [r3, #16]
 8005386:	e021      	b.n	80053cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005388:	893b      	ldrh	r3, [r7, #8]
 800538a:	0a1b      	lsrs	r3, r3, #8
 800538c:	b29b      	uxth	r3, r3
 800538e:	b2da      	uxtb	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005398:	6a39      	ldr	r1, [r7, #32]
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f000 f93e 	bl	800561c <I2C_WaitOnTXEFlagUntilTimeout>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00d      	beq.n	80053c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	d107      	bne.n	80053be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e050      	b.n	8005464 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053c2:	893b      	ldrh	r3, [r7, #8]
 80053c4:	b2da      	uxtb	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ce:	6a39      	ldr	r1, [r7, #32]
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 f923 	bl	800561c <I2C_WaitOnTXEFlagUntilTimeout>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00d      	beq.n	80053f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e0:	2b04      	cmp	r3, #4
 80053e2:	d107      	bne.n	80053f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e035      	b.n	8005464 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005406:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	6a3b      	ldr	r3, [r7, #32]
 800540e:	2200      	movs	r2, #0
 8005410:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 f82b 	bl	8005470 <I2C_WaitOnFlagUntilTimeout>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00d      	beq.n	800543c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800542e:	d103      	bne.n	8005438 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005436:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e013      	b.n	8005464 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800543c:	897b      	ldrh	r3, [r7, #10]
 800543e:	b2db      	uxtb	r3, r3
 8005440:	f043 0301 	orr.w	r3, r3, #1
 8005444:	b2da      	uxtb	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	6a3a      	ldr	r2, [r7, #32]
 8005450:	4906      	ldr	r1, [pc, #24]	; (800546c <I2C_RequestMemoryRead+0x1cc>)
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f000 f863 	bl	800551e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e000      	b.n	8005464 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3718      	adds	r7, #24
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	00010002 	.word	0x00010002

08005470 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	603b      	str	r3, [r7, #0]
 800547c:	4613      	mov	r3, r2
 800547e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005480:	e025      	b.n	80054ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005488:	d021      	beq.n	80054ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800548a:	f7fc fdad 	bl	8001fe8 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	683a      	ldr	r2, [r7, #0]
 8005496:	429a      	cmp	r2, r3
 8005498:	d302      	bcc.n	80054a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d116      	bne.n	80054ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2220      	movs	r2, #32
 80054aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ba:	f043 0220 	orr.w	r2, r3, #32
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e023      	b.n	8005516 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	0c1b      	lsrs	r3, r3, #16
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d10d      	bne.n	80054f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	43da      	mvns	r2, r3
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	4013      	ands	r3, r2
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	bf0c      	ite	eq
 80054ea:	2301      	moveq	r3, #1
 80054ec:	2300      	movne	r3, #0
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	461a      	mov	r2, r3
 80054f2:	e00c      	b.n	800550e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	43da      	mvns	r2, r3
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	4013      	ands	r3, r2
 8005500:	b29b      	uxth	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	bf0c      	ite	eq
 8005506:	2301      	moveq	r3, #1
 8005508:	2300      	movne	r3, #0
 800550a:	b2db      	uxtb	r3, r3
 800550c:	461a      	mov	r2, r3
 800550e:	79fb      	ldrb	r3, [r7, #7]
 8005510:	429a      	cmp	r2, r3
 8005512:	d0b6      	beq.n	8005482 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b084      	sub	sp, #16
 8005522:	af00      	add	r7, sp, #0
 8005524:	60f8      	str	r0, [r7, #12]
 8005526:	60b9      	str	r1, [r7, #8]
 8005528:	607a      	str	r2, [r7, #4]
 800552a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800552c:	e051      	b.n	80055d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	695b      	ldr	r3, [r3, #20]
 8005534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800553c:	d123      	bne.n	8005586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800554c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005556:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2220      	movs	r2, #32
 8005562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005572:	f043 0204 	orr.w	r2, r3, #4
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e046      	b.n	8005614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800558c:	d021      	beq.n	80055d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800558e:	f7fc fd2b 	bl	8001fe8 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	429a      	cmp	r2, r3
 800559c:	d302      	bcc.n	80055a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d116      	bne.n	80055d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2220      	movs	r2, #32
 80055ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055be:	f043 0220 	orr.w	r2, r3, #32
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e020      	b.n	8005614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	0c1b      	lsrs	r3, r3, #16
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d10c      	bne.n	80055f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	43da      	mvns	r2, r3
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	4013      	ands	r3, r2
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	bf14      	ite	ne
 80055ee:	2301      	movne	r3, #1
 80055f0:	2300      	moveq	r3, #0
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	e00b      	b.n	800560e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	43da      	mvns	r2, r3
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	4013      	ands	r3, r2
 8005602:	b29b      	uxth	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	bf14      	ite	ne
 8005608:	2301      	movne	r3, #1
 800560a:	2300      	moveq	r3, #0
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d18d      	bne.n	800552e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005628:	e02d      	b.n	8005686 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f000 f8ce 	bl	80057cc <I2C_IsAcknowledgeFailed>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d001      	beq.n	800563a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e02d      	b.n	8005696 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005640:	d021      	beq.n	8005686 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005642:	f7fc fcd1 	bl	8001fe8 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	429a      	cmp	r2, r3
 8005650:	d302      	bcc.n	8005658 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d116      	bne.n	8005686 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2220      	movs	r2, #32
 8005662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005672:	f043 0220 	orr.w	r2, r3, #32
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e007      	b.n	8005696 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005690:	2b80      	cmp	r3, #128	; 0x80
 8005692:	d1ca      	bne.n	800562a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b084      	sub	sp, #16
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	60f8      	str	r0, [r7, #12]
 80056a6:	60b9      	str	r1, [r7, #8]
 80056a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056aa:	e02d      	b.n	8005708 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f000 f88d 	bl	80057cc <I2C_IsAcknowledgeFailed>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e02d      	b.n	8005718 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c2:	d021      	beq.n	8005708 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056c4:	f7fc fc90 	bl	8001fe8 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d302      	bcc.n	80056da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d116      	bne.n	8005708 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2220      	movs	r2, #32
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f4:	f043 0220 	orr.w	r2, r3, #32
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e007      	b.n	8005718 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	f003 0304 	and.w	r3, r3, #4
 8005712:	2b04      	cmp	r3, #4
 8005714:	d1ca      	bne.n	80056ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800572c:	e042      	b.n	80057b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	f003 0310 	and.w	r3, r3, #16
 8005738:	2b10      	cmp	r3, #16
 800573a:	d119      	bne.n	8005770 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f06f 0210 	mvn.w	r2, #16
 8005744:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2220      	movs	r2, #32
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e029      	b.n	80057c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005770:	f7fc fc3a 	bl	8001fe8 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	429a      	cmp	r2, r3
 800577e:	d302      	bcc.n	8005786 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d116      	bne.n	80057b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2220      	movs	r2, #32
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a0:	f043 0220 	orr.w	r2, r3, #32
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e007      	b.n	80057c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057be:	2b40      	cmp	r3, #64	; 0x40
 80057c0:	d1b5      	bne.n	800572e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057e2:	d11b      	bne.n	800581c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2220      	movs	r2, #32
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005808:	f043 0204 	orr.w	r2, r3, #4
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e000      	b.n	800581e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
	...

0800582c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b088      	sub	sp, #32
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e128      	b.n	8005a90 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d109      	bne.n	800585e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a90      	ldr	r2, [pc, #576]	; (8005a98 <HAL_I2S_Init+0x26c>)
 8005856:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f7fc f82b 	bl	80018b4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2202      	movs	r2, #2
 8005862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	69db      	ldr	r3, [r3, #28]
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	6812      	ldr	r2, [r2, #0]
 8005870:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005874:	f023 030f 	bic.w	r3, r3, #15
 8005878:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2202      	movs	r2, #2
 8005880:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	2b02      	cmp	r3, #2
 8005888:	d060      	beq.n	800594c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d102      	bne.n	8005898 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005892:	2310      	movs	r3, #16
 8005894:	617b      	str	r3, [r7, #20]
 8005896:	e001      	b.n	800589c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005898:	2320      	movs	r3, #32
 800589a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	2b20      	cmp	r3, #32
 80058a2:	d802      	bhi.n	80058aa <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	005b      	lsls	r3, r3, #1
 80058a8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80058aa:	2001      	movs	r0, #1
 80058ac:	f001 fe14 	bl	80074d8 <HAL_RCCEx_GetPeriphCLKFreq>
 80058b0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058ba:	d125      	bne.n	8005908 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d010      	beq.n	80058e6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80058ce:	4613      	mov	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	005b      	lsls	r3, r3, #1
 80058d6:	461a      	mov	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e0:	3305      	adds	r3, #5
 80058e2:	613b      	str	r3, [r7, #16]
 80058e4:	e01f      	b.n	8005926 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	00db      	lsls	r3, r3, #3
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80058f0:	4613      	mov	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4413      	add	r3, r2
 80058f6:	005b      	lsls	r3, r3, #1
 80058f8:	461a      	mov	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005902:	3305      	adds	r3, #5
 8005904:	613b      	str	r3, [r7, #16]
 8005906:	e00e      	b.n	8005926 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005910:	4613      	mov	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	461a      	mov	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005922:	3305      	adds	r3, #5
 8005924:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	4a5c      	ldr	r2, [pc, #368]	; (8005a9c <HAL_I2S_Init+0x270>)
 800592a:	fba2 2303 	umull	r2, r3, r2, r3
 800592e:	08db      	lsrs	r3, r3, #3
 8005930:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	085b      	lsrs	r3, r3, #1
 8005942:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	021b      	lsls	r3, r3, #8
 8005948:	61bb      	str	r3, [r7, #24]
 800594a:	e003      	b.n	8005954 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800594c:	2302      	movs	r3, #2
 800594e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005950:	2300      	movs	r3, #0
 8005952:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d902      	bls.n	8005960 <HAL_I2S_Init+0x134>
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	2bff      	cmp	r3, #255	; 0xff
 800595e:	d907      	bls.n	8005970 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005964:	f043 0210 	orr.w	r2, r3, #16
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e08f      	b.n	8005a90 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	691a      	ldr	r2, [r3, #16]
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	ea42 0103 	orr.w	r1, r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	69fa      	ldr	r2, [r7, #28]
 8005980:	430a      	orrs	r2, r1
 8005982:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800598e:	f023 030f 	bic.w	r3, r3, #15
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	6851      	ldr	r1, [r2, #4]
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	6892      	ldr	r2, [r2, #8]
 800599a:	4311      	orrs	r1, r2
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	68d2      	ldr	r2, [r2, #12]
 80059a0:	4311      	orrs	r1, r2
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	6992      	ldr	r2, [r2, #24]
 80059a6:	430a      	orrs	r2, r1
 80059a8:	431a      	orrs	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059b2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a1b      	ldr	r3, [r3, #32]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d161      	bne.n	8005a80 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a38      	ldr	r2, [pc, #224]	; (8005aa0 <HAL_I2S_Init+0x274>)
 80059c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a37      	ldr	r2, [pc, #220]	; (8005aa4 <HAL_I2S_Init+0x278>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d101      	bne.n	80059d0 <HAL_I2S_Init+0x1a4>
 80059cc:	4b36      	ldr	r3, [pc, #216]	; (8005aa8 <HAL_I2S_Init+0x27c>)
 80059ce:	e001      	b.n	80059d4 <HAL_I2S_Init+0x1a8>
 80059d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	6812      	ldr	r2, [r2, #0]
 80059da:	4932      	ldr	r1, [pc, #200]	; (8005aa4 <HAL_I2S_Init+0x278>)
 80059dc:	428a      	cmp	r2, r1
 80059de:	d101      	bne.n	80059e4 <HAL_I2S_Init+0x1b8>
 80059e0:	4a31      	ldr	r2, [pc, #196]	; (8005aa8 <HAL_I2S_Init+0x27c>)
 80059e2:	e001      	b.n	80059e8 <HAL_I2S_Init+0x1bc>
 80059e4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80059e8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80059ec:	f023 030f 	bic.w	r3, r3, #15
 80059f0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a2b      	ldr	r2, [pc, #172]	; (8005aa4 <HAL_I2S_Init+0x278>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d101      	bne.n	8005a00 <HAL_I2S_Init+0x1d4>
 80059fc:	4b2a      	ldr	r3, [pc, #168]	; (8005aa8 <HAL_I2S_Init+0x27c>)
 80059fe:	e001      	b.n	8005a04 <HAL_I2S_Init+0x1d8>
 8005a00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a04:	2202      	movs	r2, #2
 8005a06:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a25      	ldr	r2, [pc, #148]	; (8005aa4 <HAL_I2S_Init+0x278>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d101      	bne.n	8005a16 <HAL_I2S_Init+0x1ea>
 8005a12:	4b25      	ldr	r3, [pc, #148]	; (8005aa8 <HAL_I2S_Init+0x27c>)
 8005a14:	e001      	b.n	8005a1a <HAL_I2S_Init+0x1ee>
 8005a16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a1a:	69db      	ldr	r3, [r3, #28]
 8005a1c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a26:	d003      	beq.n	8005a30 <HAL_I2S_Init+0x204>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d103      	bne.n	8005a38 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005a30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a34:	613b      	str	r3, [r7, #16]
 8005a36:	e001      	b.n	8005a3c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005a46:	4313      	orrs	r3, r2
 8005a48:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005a50:	4313      	orrs	r3, r2
 8005a52:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	897b      	ldrh	r3, [r7, #10]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005a68:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a0d      	ldr	r2, [pc, #52]	; (8005aa4 <HAL_I2S_Init+0x278>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d101      	bne.n	8005a78 <HAL_I2S_Init+0x24c>
 8005a74:	4b0c      	ldr	r3, [pc, #48]	; (8005aa8 <HAL_I2S_Init+0x27c>)
 8005a76:	e001      	b.n	8005a7c <HAL_I2S_Init+0x250>
 8005a78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a7c:	897a      	ldrh	r2, [r7, #10]
 8005a7e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3720      	adds	r7, #32
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	08006331 	.word	0x08006331
 8005a9c:	cccccccd 	.word	0xcccccccd
 8005aa0:	080064b9 	.word	0x080064b9
 8005aa4:	40003800 	.word	0x40003800
 8005aa8:	40003400 	.word	0x40003400

08005aac <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d002      	beq.n	8005ac6 <HAL_I2S_Transmit_DMA+0x1a>
 8005ac0:	88fb      	ldrh	r3, [r7, #6]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e08e      	b.n	8005be8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d101      	bne.n	8005ada <HAL_I2S_Transmit_DMA+0x2e>
 8005ad6:	2302      	movs	r3, #2
 8005ad8:	e086      	b.n	8005be8 <HAL_I2S_Transmit_DMA+0x13c>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d005      	beq.n	8005afa <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8005af6:	2302      	movs	r3, #2
 8005af8:	e076      	b.n	8005be8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2203      	movs	r2, #3
 8005afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69db      	ldr	r3, [r3, #28]
 8005b14:	f003 0307 	and.w	r3, r3, #7
 8005b18:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	2b03      	cmp	r3, #3
 8005b1e:	d002      	beq.n	8005b26 <HAL_I2S_Transmit_DMA+0x7a>
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	2b05      	cmp	r3, #5
 8005b24:	d10a      	bne.n	8005b3c <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005b26:	88fb      	ldrh	r3, [r7, #6]
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005b30:	88fb      	ldrh	r3, [r7, #6]
 8005b32:	005b      	lsls	r3, r3, #1
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b3a:	e005      	b.n	8005b48 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	88fa      	ldrh	r2, [r7, #6]
 8005b40:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	88fa      	ldrh	r2, [r7, #6]
 8005b46:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4c:	4a28      	ldr	r2, [pc, #160]	; (8005bf0 <HAL_I2S_Transmit_DMA+0x144>)
 8005b4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b54:	4a27      	ldr	r2, [pc, #156]	; (8005bf4 <HAL_I2S_Transmit_DMA+0x148>)
 8005b56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5c:	4a26      	ldr	r2, [pc, #152]	; (8005bf8 <HAL_I2S_Transmit_DMA+0x14c>)
 8005b5e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005b68:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005b70:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b76:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005b78:	f7fc fc84 	bl	8002484 <HAL_DMA_Start_IT>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00f      	beq.n	8005ba2 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b86:	f043 0208 	orr.w	r2, r3, #8
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e022      	b.n	8005be8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	69db      	ldr	r3, [r3, #28]
 8005ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d107      	bne.n	8005bc0 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	69da      	ldr	r2, [r3, #28]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005bbe:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	f003 0302 	and.w	r3, r3, #2
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d107      	bne.n	8005bde <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	685a      	ldr	r2, [r3, #4]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f042 0202 	orr.w	r2, r2, #2
 8005bdc:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3718      	adds	r7, #24
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	0800620f 	.word	0x0800620f
 8005bf4:	080061cd 	.word	0x080061cd
 8005bf8:	0800622b 	.word	0x0800622b

08005bfc <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d101      	bne.n	8005c14 <HAL_I2S_DMAPause+0x18>
 8005c10:	2302      	movs	r3, #2
 8005c12:	e04a      	b.n	8005caa <HAL_I2S_DMAPause+0xae>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b03      	cmp	r3, #3
 8005c26:	d108      	bne.n	8005c3a <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f022 0202 	bic.w	r2, r2, #2
 8005c36:	605a      	str	r2, [r3, #4]
 8005c38:	e032      	b.n	8005ca0 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	d108      	bne.n	8005c58 <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 0201 	bic.w	r2, r2, #1
 8005c54:	605a      	str	r2, [r3, #4]
 8005c56:	e023      	b.n	8005ca0 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b05      	cmp	r3, #5
 8005c62:	d11d      	bne.n	8005ca0 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685a      	ldr	r2, [r3, #4]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f022 0203 	bic.w	r2, r2, #3
 8005c72:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a0f      	ldr	r2, [pc, #60]	; (8005cb8 <HAL_I2S_DMAPause+0xbc>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d101      	bne.n	8005c82 <HAL_I2S_DMAPause+0x86>
 8005c7e:	4b0f      	ldr	r3, [pc, #60]	; (8005cbc <HAL_I2S_DMAPause+0xc0>)
 8005c80:	e001      	b.n	8005c86 <HAL_I2S_DMAPause+0x8a>
 8005c82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	490a      	ldr	r1, [pc, #40]	; (8005cb8 <HAL_I2S_DMAPause+0xbc>)
 8005c8e:	428b      	cmp	r3, r1
 8005c90:	d101      	bne.n	8005c96 <HAL_I2S_DMAPause+0x9a>
 8005c92:	4b0a      	ldr	r3, [pc, #40]	; (8005cbc <HAL_I2S_DMAPause+0xc0>)
 8005c94:	e001      	b.n	8005c9a <HAL_I2S_DMAPause+0x9e>
 8005c96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c9a:	f022 0203 	bic.w	r2, r2, #3
 8005c9e:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	370c      	adds	r7, #12
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	40003800 	.word	0x40003800
 8005cbc:	40003400 	.word	0x40003400

08005cc0 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d101      	bne.n	8005cd8 <HAL_I2S_DMAResume+0x18>
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	e07d      	b.n	8005dd4 <HAL_I2S_DMAResume+0x114>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b03      	cmp	r3, #3
 8005cea:	d108      	bne.n	8005cfe <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f042 0202 	orr.w	r2, r2, #2
 8005cfa:	605a      	str	r2, [r3, #4]
 8005cfc:	e056      	b.n	8005dac <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	d108      	bne.n	8005d1c <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	685a      	ldr	r2, [r3, #4]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f042 0201 	orr.w	r2, r2, #1
 8005d18:	605a      	str	r2, [r3, #4]
 8005d1a:	e047      	b.n	8005dac <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b05      	cmp	r3, #5
 8005d26:	d141      	bne.n	8005dac <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685a      	ldr	r2, [r3, #4]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f042 0203 	orr.w	r2, r2, #3
 8005d36:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a28      	ldr	r2, [pc, #160]	; (8005de0 <HAL_I2S_DMAResume+0x120>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d101      	bne.n	8005d46 <HAL_I2S_DMAResume+0x86>
 8005d42:	4b28      	ldr	r3, [pc, #160]	; (8005de4 <HAL_I2S_DMAResume+0x124>)
 8005d44:	e001      	b.n	8005d4a <HAL_I2S_DMAResume+0x8a>
 8005d46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4923      	ldr	r1, [pc, #140]	; (8005de0 <HAL_I2S_DMAResume+0x120>)
 8005d52:	428b      	cmp	r3, r1
 8005d54:	d101      	bne.n	8005d5a <HAL_I2S_DMAResume+0x9a>
 8005d56:	4b23      	ldr	r3, [pc, #140]	; (8005de4 <HAL_I2S_DMAResume+0x124>)
 8005d58:	e001      	b.n	8005d5e <HAL_I2S_DMAResume+0x9e>
 8005d5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d5e:	f042 0203 	orr.w	r2, r2, #3
 8005d62:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a1d      	ldr	r2, [pc, #116]	; (8005de0 <HAL_I2S_DMAResume+0x120>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d101      	bne.n	8005d72 <HAL_I2S_DMAResume+0xb2>
 8005d6e:	4b1d      	ldr	r3, [pc, #116]	; (8005de4 <HAL_I2S_DMAResume+0x124>)
 8005d70:	e001      	b.n	8005d76 <HAL_I2S_DMAResume+0xb6>
 8005d72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d76:	69db      	ldr	r3, [r3, #28]
 8005d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d115      	bne.n	8005dac <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a16      	ldr	r2, [pc, #88]	; (8005de0 <HAL_I2S_DMAResume+0x120>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d101      	bne.n	8005d8e <HAL_I2S_DMAResume+0xce>
 8005d8a:	4b16      	ldr	r3, [pc, #88]	; (8005de4 <HAL_I2S_DMAResume+0x124>)
 8005d8c:	e001      	b.n	8005d92 <HAL_I2S_DMAResume+0xd2>
 8005d8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d92:	69da      	ldr	r2, [r3, #28]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4911      	ldr	r1, [pc, #68]	; (8005de0 <HAL_I2S_DMAResume+0x120>)
 8005d9a:	428b      	cmp	r3, r1
 8005d9c:	d101      	bne.n	8005da2 <HAL_I2S_DMAResume+0xe2>
 8005d9e:	4b11      	ldr	r3, [pc, #68]	; (8005de4 <HAL_I2S_DMAResume+0x124>)
 8005da0:	e001      	b.n	8005da6 <HAL_I2S_DMAResume+0xe6>
 8005da2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005da6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005daa:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d107      	bne.n	8005dca <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	69da      	ldr	r2, [r3, #28]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005dc8:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	40003800 	.word	0x40003800
 8005de4:	40003400 	.word	0x40003400

08005de8 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b088      	sub	sp, #32
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005df0:	2300      	movs	r3, #0
 8005df2:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dfc:	d004      	beq.n	8005e08 <HAL_I2S_DMAStop+0x20>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f040 80d1 	bne.w	8005faa <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00f      	beq.n	8005e30 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7fc fb8d 	bl	8002534 <HAL_DMA_Abort>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d007      	beq.n	8005e30 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e24:	f043 0208 	orr.w	r2, r3, #8
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005e30:	2364      	movs	r3, #100	; 0x64
 8005e32:	2201      	movs	r2, #1
 8005e34:	2102      	movs	r1, #2
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 fb04 	bl	8006444 <I2S_WaitFlagStateUntilTimeout>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00b      	beq.n	8005e5a <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e46:	f043 0201 	orr.w	r2, r3, #1
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005e5a:	2364      	movs	r3, #100	; 0x64
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	2180      	movs	r1, #128	; 0x80
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 faef 	bl	8006444 <I2S_WaitFlagStateUntilTimeout>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00b      	beq.n	8005e84 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e70:	f043 0201 	orr.w	r2, r3, #1
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	69da      	ldr	r2, [r3, #28]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e92:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005e94:	2300      	movs	r3, #0
 8005e96:	617b      	str	r3, [r7, #20]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	617b      	str	r3, [r7, #20]
 8005ea0:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f022 0202 	bic.w	r2, r2, #2
 8005eb0:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b05      	cmp	r3, #5
 8005ebc:	f040 8165 	bne.w	800618a <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00f      	beq.n	8005ee8 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7fc fb31 	bl	8002534 <HAL_DMA_Abort>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d007      	beq.n	8005ee8 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005edc:	f043 0208 	orr.w	r2, r3, #8
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a8a      	ldr	r2, [pc, #552]	; (8006118 <HAL_I2S_DMAStop+0x330>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d101      	bne.n	8005ef6 <HAL_I2S_DMAStop+0x10e>
 8005ef2:	4b8a      	ldr	r3, [pc, #552]	; (800611c <HAL_I2S_DMAStop+0x334>)
 8005ef4:	e001      	b.n	8005efa <HAL_I2S_DMAStop+0x112>
 8005ef6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005efa:	69da      	ldr	r2, [r3, #28]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4985      	ldr	r1, [pc, #532]	; (8006118 <HAL_I2S_DMAStop+0x330>)
 8005f02:	428b      	cmp	r3, r1
 8005f04:	d101      	bne.n	8005f0a <HAL_I2S_DMAStop+0x122>
 8005f06:	4b85      	ldr	r3, [pc, #532]	; (800611c <HAL_I2S_DMAStop+0x334>)
 8005f08:	e001      	b.n	8005f0e <HAL_I2S_DMAStop+0x126>
 8005f0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f12:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8005f14:	2300      	movs	r3, #0
 8005f16:	613b      	str	r3, [r7, #16]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a7e      	ldr	r2, [pc, #504]	; (8006118 <HAL_I2S_DMAStop+0x330>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d101      	bne.n	8005f26 <HAL_I2S_DMAStop+0x13e>
 8005f22:	4b7e      	ldr	r3, [pc, #504]	; (800611c <HAL_I2S_DMAStop+0x334>)
 8005f24:	e001      	b.n	8005f2a <HAL_I2S_DMAStop+0x142>
 8005f26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	613b      	str	r3, [r7, #16]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a79      	ldr	r2, [pc, #484]	; (8006118 <HAL_I2S_DMAStop+0x330>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d101      	bne.n	8005f3c <HAL_I2S_DMAStop+0x154>
 8005f38:	4b78      	ldr	r3, [pc, #480]	; (800611c <HAL_I2S_DMAStop+0x334>)
 8005f3a:	e001      	b.n	8005f40 <HAL_I2S_DMAStop+0x158>
 8005f3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	613b      	str	r3, [r7, #16]
 8005f44:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a73      	ldr	r2, [pc, #460]	; (8006118 <HAL_I2S_DMAStop+0x330>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d101      	bne.n	8005f54 <HAL_I2S_DMAStop+0x16c>
 8005f50:	4b72      	ldr	r3, [pc, #456]	; (800611c <HAL_I2S_DMAStop+0x334>)
 8005f52:	e001      	b.n	8005f58 <HAL_I2S_DMAStop+0x170>
 8005f54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	496e      	ldr	r1, [pc, #440]	; (8006118 <HAL_I2S_DMAStop+0x330>)
 8005f60:	428b      	cmp	r3, r1
 8005f62:	d101      	bne.n	8005f68 <HAL_I2S_DMAStop+0x180>
 8005f64:	4b6d      	ldr	r3, [pc, #436]	; (800611c <HAL_I2S_DMAStop+0x334>)
 8005f66:	e001      	b.n	8005f6c <HAL_I2S_DMAStop+0x184>
 8005f68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f6c:	f022 0201 	bic.w	r2, r2, #1
 8005f70:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10c      	bne.n	8005f94 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005f92:	e0fa      	b.n	800618a <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a5f      	ldr	r2, [pc, #380]	; (8006118 <HAL_I2S_DMAStop+0x330>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d101      	bne.n	8005fa2 <HAL_I2S_DMAStop+0x1ba>
 8005f9e:	4b5f      	ldr	r3, [pc, #380]	; (800611c <HAL_I2S_DMAStop+0x334>)
 8005fa0:	e001      	b.n	8005fa6 <HAL_I2S_DMAStop+0x1be>
 8005fa2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fa6:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005fa8:	e0ef      	b.n	800618a <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fb2:	d005      	beq.n	8005fc0 <HAL_I2S_DMAStop+0x1d8>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fbc:	f040 80e5 	bne.w	800618a <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00f      	beq.n	8005fe8 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7fc fab1 	bl	8002534 <HAL_DMA_Abort>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d007      	beq.n	8005fe8 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fdc:	f043 0208 	orr.w	r2, r3, #8
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b05      	cmp	r3, #5
 8005ff2:	f040 809a 	bne.w	800612a <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00f      	beq.n	800601e <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006002:	4618      	mov	r0, r3
 8006004:	f7fc fa96 	bl	8002534 <HAL_DMA_Abort>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d007      	beq.n	800601e <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006012:	f043 0208 	orr.w	r2, r3, #8
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 800601e:	f7fb ffe3 	bl	8001fe8 <HAL_GetTick>
 8006022:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006024:	e012      	b.n	800604c <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8006026:	f7fb ffdf 	bl	8001fe8 <HAL_GetTick>
 800602a:	4602      	mov	r2, r0
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	2b64      	cmp	r3, #100	; 0x64
 8006032:	d90b      	bls.n	800604c <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006038:	f043 0201 	orr.w	r2, r3, #1
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a31      	ldr	r2, [pc, #196]	; (8006118 <HAL_I2S_DMAStop+0x330>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d101      	bne.n	800605a <HAL_I2S_DMAStop+0x272>
 8006056:	4b31      	ldr	r3, [pc, #196]	; (800611c <HAL_I2S_DMAStop+0x334>)
 8006058:	e001      	b.n	800605e <HAL_I2S_DMAStop+0x276>
 800605a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f003 0302 	and.w	r3, r3, #2
 8006064:	2b02      	cmp	r3, #2
 8006066:	d1de      	bne.n	8006026 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8006068:	e012      	b.n	8006090 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800606a:	f7fb ffbd 	bl	8001fe8 <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	2b64      	cmp	r3, #100	; 0x64
 8006076:	d90b      	bls.n	8006090 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800607c:	f043 0201 	orr.w	r2, r3, #1
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a20      	ldr	r2, [pc, #128]	; (8006118 <HAL_I2S_DMAStop+0x330>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d101      	bne.n	800609e <HAL_I2S_DMAStop+0x2b6>
 800609a:	4b20      	ldr	r3, [pc, #128]	; (800611c <HAL_I2S_DMAStop+0x334>)
 800609c:	e001      	b.n	80060a2 <HAL_I2S_DMAStop+0x2ba>
 800609e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a8:	2b80      	cmp	r3, #128	; 0x80
 80060aa:	d0de      	beq.n	800606a <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a19      	ldr	r2, [pc, #100]	; (8006118 <HAL_I2S_DMAStop+0x330>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d101      	bne.n	80060ba <HAL_I2S_DMAStop+0x2d2>
 80060b6:	4b19      	ldr	r3, [pc, #100]	; (800611c <HAL_I2S_DMAStop+0x334>)
 80060b8:	e001      	b.n	80060be <HAL_I2S_DMAStop+0x2d6>
 80060ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060be:	69da      	ldr	r2, [r3, #28]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4914      	ldr	r1, [pc, #80]	; (8006118 <HAL_I2S_DMAStop+0x330>)
 80060c6:	428b      	cmp	r3, r1
 80060c8:	d101      	bne.n	80060ce <HAL_I2S_DMAStop+0x2e6>
 80060ca:	4b14      	ldr	r3, [pc, #80]	; (800611c <HAL_I2S_DMAStop+0x334>)
 80060cc:	e001      	b.n	80060d2 <HAL_I2S_DMAStop+0x2ea>
 80060ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060d6:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 80060d8:	2300      	movs	r3, #0
 80060da:	60fb      	str	r3, [r7, #12]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a0d      	ldr	r2, [pc, #52]	; (8006118 <HAL_I2S_DMAStop+0x330>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d101      	bne.n	80060ea <HAL_I2S_DMAStop+0x302>
 80060e6:	4b0d      	ldr	r3, [pc, #52]	; (800611c <HAL_I2S_DMAStop+0x334>)
 80060e8:	e001      	b.n	80060ee <HAL_I2S_DMAStop+0x306>
 80060ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	60fb      	str	r3, [r7, #12]
 80060f2:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a07      	ldr	r2, [pc, #28]	; (8006118 <HAL_I2S_DMAStop+0x330>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d101      	bne.n	8006102 <HAL_I2S_DMAStop+0x31a>
 80060fe:	4b07      	ldr	r3, [pc, #28]	; (800611c <HAL_I2S_DMAStop+0x334>)
 8006100:	e001      	b.n	8006106 <HAL_I2S_DMAStop+0x31e>
 8006102:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006106:	685a      	ldr	r2, [r3, #4]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4902      	ldr	r1, [pc, #8]	; (8006118 <HAL_I2S_DMAStop+0x330>)
 800610e:	428b      	cmp	r3, r1
 8006110:	d106      	bne.n	8006120 <HAL_I2S_DMAStop+0x338>
 8006112:	4b02      	ldr	r3, [pc, #8]	; (800611c <HAL_I2S_DMAStop+0x334>)
 8006114:	e006      	b.n	8006124 <HAL_I2S_DMAStop+0x33c>
 8006116:	bf00      	nop
 8006118:	40003800 	.word	0x40003800
 800611c:	40003400 	.word	0x40003400
 8006120:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006124:	f022 0202 	bic.w	r2, r2, #2
 8006128:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	69da      	ldr	r2, [r3, #28]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006138:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800613a:	2300      	movs	r3, #0
 800613c:	60bb      	str	r3, [r7, #8]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	60bb      	str	r3, [r7, #8]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	60bb      	str	r3, [r7, #8]
 800614e:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 0201 	bic.w	r2, r2, #1
 800615e:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006168:	d10c      	bne.n	8006184 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800616e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	77fb      	strb	r3, [r7, #31]
 8006182:	e002      	b.n	800618a <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8006192:	7ffb      	ldrb	r3, [r7, #31]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3720      	adds	r7, #32
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061be:	b2db      	uxtb	r3, r3
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	69db      	ldr	r3, [r3, #28]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10e      	bne.n	8006200 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	685a      	ldr	r2, [r3, #4]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f022 0202 	bic.w	r2, r2, #2
 80061f0:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f7fa fa4b 	bl	800069c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006206:	bf00      	nop
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b084      	sub	sp, #16
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f7fa fa4f 	bl	80006c0 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006222:	bf00      	nop
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b084      	sub	sp, #16
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006236:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f022 0203 	bic.w	r2, r2, #3
 8006246:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006260:	f043 0208 	orr.w	r2, r3, #8
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f7fa fb99 	bl	80009a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800626e:	bf00      	nop
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b082      	sub	sp, #8
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006282:	881a      	ldrh	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628e:	1c9a      	adds	r2, r3, #2
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006298:	b29b      	uxth	r3, r3
 800629a:	3b01      	subs	r3, #1
 800629c:	b29a      	uxth	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10e      	bne.n	80062ca <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	685a      	ldr	r2, [r3, #4]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80062ba:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f7fa f9e9 	bl	800069c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80062ca:	bf00      	nop
 80062cc:	3708      	adds	r7, #8
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b082      	sub	sp, #8
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68da      	ldr	r2, [r3, #12]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e4:	b292      	uxth	r2, r2
 80062e6:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ec:	1c9a      	adds	r2, r3, #2
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	3b01      	subs	r3, #1
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006304:	b29b      	uxth	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10e      	bne.n	8006328 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	685a      	ldr	r2, [r3, #4]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006318:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7ff ff3a 	bl	800619c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006328:	bf00      	nop
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006346:	b2db      	uxtb	r3, r3
 8006348:	2b04      	cmp	r3, #4
 800634a:	d13a      	bne.n	80063c2 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b01      	cmp	r3, #1
 8006354:	d109      	bne.n	800636a <I2S_IRQHandler+0x3a>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006360:	2b40      	cmp	r3, #64	; 0x40
 8006362:	d102      	bne.n	800636a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f7ff ffb4 	bl	80062d2 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006370:	2b40      	cmp	r3, #64	; 0x40
 8006372:	d126      	bne.n	80063c2 <I2S_IRQHandler+0x92>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f003 0320 	and.w	r3, r3, #32
 800637e:	2b20      	cmp	r3, #32
 8006380:	d11f      	bne.n	80063c2 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006390:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006392:	2300      	movs	r3, #0
 8006394:	613b      	str	r3, [r7, #16]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	613b      	str	r3, [r7, #16]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	613b      	str	r3, [r7, #16]
 80063a6:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b4:	f043 0202 	orr.w	r2, r3, #2
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f7fa faef 	bl	80009a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b03      	cmp	r3, #3
 80063cc:	d136      	bne.n	800643c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f003 0302 	and.w	r3, r3, #2
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d109      	bne.n	80063ec <I2S_IRQHandler+0xbc>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e2:	2b80      	cmp	r3, #128	; 0x80
 80063e4:	d102      	bne.n	80063ec <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7ff ff45 	bl	8006276 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f003 0308 	and.w	r3, r3, #8
 80063f2:	2b08      	cmp	r3, #8
 80063f4:	d122      	bne.n	800643c <I2S_IRQHandler+0x10c>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f003 0320 	and.w	r3, r3, #32
 8006400:	2b20      	cmp	r3, #32
 8006402:	d11b      	bne.n	800643c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006412:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006414:	2300      	movs	r3, #0
 8006416:	60fb      	str	r3, [r7, #12]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	60fb      	str	r3, [r7, #12]
 8006420:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800642e:	f043 0204 	orr.w	r2, r3, #4
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f7fa fab2 	bl	80009a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800643c:	bf00      	nop
 800643e:	3718      	adds	r7, #24
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	603b      	str	r3, [r7, #0]
 8006450:	4613      	mov	r3, r2
 8006452:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8006454:	f7fb fdc8 	bl	8001fe8 <HAL_GetTick>
 8006458:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800645a:	e018      	b.n	800648e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006462:	d014      	beq.n	800648e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8006464:	f7fb fdc0 	bl	8001fe8 <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	683a      	ldr	r2, [r7, #0]
 8006470:	429a      	cmp	r2, r3
 8006472:	d902      	bls.n	800647a <I2S_WaitFlagStateUntilTimeout+0x36>
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d109      	bne.n	800648e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e00f      	b.n	80064ae <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	689a      	ldr	r2, [r3, #8]
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	4013      	ands	r3, r2
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	429a      	cmp	r2, r3
 800649c:	bf0c      	ite	eq
 800649e:	2301      	moveq	r3, #1
 80064a0:	2300      	movne	r3, #0
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	461a      	mov	r2, r3
 80064a6:	79fb      	ldrb	r3, [r7, #7]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d1d7      	bne.n	800645c <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3718      	adds	r7, #24
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
	...

080064b8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b088      	sub	sp, #32
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a92      	ldr	r2, [pc, #584]	; (8006718 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d101      	bne.n	80064d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80064d2:	4b92      	ldr	r3, [pc, #584]	; (800671c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80064d4:	e001      	b.n	80064da <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80064d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a8b      	ldr	r2, [pc, #556]	; (8006718 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d101      	bne.n	80064f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80064f0:	4b8a      	ldr	r3, [pc, #552]	; (800671c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80064f2:	e001      	b.n	80064f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80064f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006504:	d004      	beq.n	8006510 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	f040 8099 	bne.w	8006642 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b02      	cmp	r3, #2
 8006518:	d107      	bne.n	800652a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006520:	2b00      	cmp	r3, #0
 8006522:	d002      	beq.n	800652a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f925 	bl	8006774 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	f003 0301 	and.w	r3, r3, #1
 8006530:	2b01      	cmp	r3, #1
 8006532:	d107      	bne.n	8006544 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800653a:	2b00      	cmp	r3, #0
 800653c:	d002      	beq.n	8006544 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f9c8 	bl	80068d4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654a:	2b40      	cmp	r3, #64	; 0x40
 800654c:	d13a      	bne.n	80065c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	f003 0320 	and.w	r3, r3, #32
 8006554:	2b00      	cmp	r3, #0
 8006556:	d035      	beq.n	80065c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a6e      	ldr	r2, [pc, #440]	; (8006718 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d101      	bne.n	8006566 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006562:	4b6e      	ldr	r3, [pc, #440]	; (800671c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006564:	e001      	b.n	800656a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006566:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4969      	ldr	r1, [pc, #420]	; (8006718 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006572:	428b      	cmp	r3, r1
 8006574:	d101      	bne.n	800657a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006576:	4b69      	ldr	r3, [pc, #420]	; (800671c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006578:	e001      	b.n	800657e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800657a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800657e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006582:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685a      	ldr	r2, [r3, #4]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006592:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006594:	2300      	movs	r3, #0
 8006596:	60fb      	str	r3, [r7, #12]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	60fb      	str	r3, [r7, #12]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	60fb      	str	r3, [r7, #12]
 80065a8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b6:	f043 0202 	orr.w	r2, r3, #2
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f7fa f9ee 	bl	80009a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	f003 0308 	and.w	r3, r3, #8
 80065ca:	2b08      	cmp	r3, #8
 80065cc:	f040 80c3 	bne.w	8006756 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	f003 0320 	and.w	r3, r3, #32
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f000 80bd 	beq.w	8006756 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685a      	ldr	r2, [r3, #4]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065ea:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a49      	ldr	r2, [pc, #292]	; (8006718 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d101      	bne.n	80065fa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80065f6:	4b49      	ldr	r3, [pc, #292]	; (800671c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80065f8:	e001      	b.n	80065fe <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80065fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065fe:	685a      	ldr	r2, [r3, #4]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4944      	ldr	r1, [pc, #272]	; (8006718 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006606:	428b      	cmp	r3, r1
 8006608:	d101      	bne.n	800660e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800660a:	4b44      	ldr	r3, [pc, #272]	; (800671c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800660c:	e001      	b.n	8006612 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800660e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006612:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006616:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006618:	2300      	movs	r3, #0
 800661a:	60bb      	str	r3, [r7, #8]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	60bb      	str	r3, [r7, #8]
 8006624:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006632:	f043 0204 	orr.w	r2, r3, #4
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7fa f9b0 	bl	80009a0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006640:	e089      	b.n	8006756 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	2b02      	cmp	r3, #2
 800664a:	d107      	bne.n	800665c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006652:	2b00      	cmp	r3, #0
 8006654:	d002      	beq.n	800665c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f8be 	bl	80067d8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	f003 0301 	and.w	r3, r3, #1
 8006662:	2b01      	cmp	r3, #1
 8006664:	d107      	bne.n	8006676 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666c:	2b00      	cmp	r3, #0
 800666e:	d002      	beq.n	8006676 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f8fd 	bl	8006870 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667c:	2b40      	cmp	r3, #64	; 0x40
 800667e:	d12f      	bne.n	80066e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f003 0320 	and.w	r3, r3, #32
 8006686:	2b00      	cmp	r3, #0
 8006688:	d02a      	beq.n	80066e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006698:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a1e      	ldr	r2, [pc, #120]	; (8006718 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d101      	bne.n	80066a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80066a4:	4b1d      	ldr	r3, [pc, #116]	; (800671c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80066a6:	e001      	b.n	80066ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80066a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066ac:	685a      	ldr	r2, [r3, #4]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4919      	ldr	r1, [pc, #100]	; (8006718 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80066b4:	428b      	cmp	r3, r1
 80066b6:	d101      	bne.n	80066bc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80066b8:	4b18      	ldr	r3, [pc, #96]	; (800671c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80066ba:	e001      	b.n	80066c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80066bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066c4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d2:	f043 0202 	orr.w	r2, r3, #2
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f7fa f960 	bl	80009a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	f003 0308 	and.w	r3, r3, #8
 80066e6:	2b08      	cmp	r3, #8
 80066e8:	d136      	bne.n	8006758 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	f003 0320 	and.w	r3, r3, #32
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d031      	beq.n	8006758 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a07      	ldr	r2, [pc, #28]	; (8006718 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d101      	bne.n	8006702 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80066fe:	4b07      	ldr	r3, [pc, #28]	; (800671c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006700:	e001      	b.n	8006706 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006702:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006706:	685a      	ldr	r2, [r3, #4]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4902      	ldr	r1, [pc, #8]	; (8006718 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800670e:	428b      	cmp	r3, r1
 8006710:	d106      	bne.n	8006720 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006712:	4b02      	ldr	r3, [pc, #8]	; (800671c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006714:	e006      	b.n	8006724 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006716:	bf00      	nop
 8006718:	40003800 	.word	0x40003800
 800671c:	40003400 	.word	0x40003400
 8006720:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006724:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006728:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	685a      	ldr	r2, [r3, #4]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006738:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2201      	movs	r2, #1
 800673e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006746:	f043 0204 	orr.w	r2, r3, #4
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7fa f926 	bl	80009a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006754:	e000      	b.n	8006758 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006756:	bf00      	nop
}
 8006758:	bf00      	nop
 800675a:	3720      	adds	r7, #32
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006780:	1c99      	adds	r1, r3, #2
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	6251      	str	r1, [r2, #36]	; 0x24
 8006786:	881a      	ldrh	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006792:	b29b      	uxth	r3, r3
 8006794:	3b01      	subs	r3, #1
 8006796:	b29a      	uxth	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d113      	bne.n	80067ce <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80067b4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d106      	bne.n	80067ce <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f7ff ffc9 	bl	8006760 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80067ce:	bf00      	nop
 80067d0:	3708      	adds	r7, #8
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
	...

080067d8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e4:	1c99      	adds	r1, r3, #2
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	6251      	str	r1, [r2, #36]	; 0x24
 80067ea:	8819      	ldrh	r1, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a1d      	ldr	r2, [pc, #116]	; (8006868 <I2SEx_TxISR_I2SExt+0x90>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d101      	bne.n	80067fa <I2SEx_TxISR_I2SExt+0x22>
 80067f6:	4b1d      	ldr	r3, [pc, #116]	; (800686c <I2SEx_TxISR_I2SExt+0x94>)
 80067f8:	e001      	b.n	80067fe <I2SEx_TxISR_I2SExt+0x26>
 80067fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067fe:	460a      	mov	r2, r1
 8006800:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006806:	b29b      	uxth	r3, r3
 8006808:	3b01      	subs	r3, #1
 800680a:	b29a      	uxth	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006814:	b29b      	uxth	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d121      	bne.n	800685e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a12      	ldr	r2, [pc, #72]	; (8006868 <I2SEx_TxISR_I2SExt+0x90>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d101      	bne.n	8006828 <I2SEx_TxISR_I2SExt+0x50>
 8006824:	4b11      	ldr	r3, [pc, #68]	; (800686c <I2SEx_TxISR_I2SExt+0x94>)
 8006826:	e001      	b.n	800682c <I2SEx_TxISR_I2SExt+0x54>
 8006828:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	490d      	ldr	r1, [pc, #52]	; (8006868 <I2SEx_TxISR_I2SExt+0x90>)
 8006834:	428b      	cmp	r3, r1
 8006836:	d101      	bne.n	800683c <I2SEx_TxISR_I2SExt+0x64>
 8006838:	4b0c      	ldr	r3, [pc, #48]	; (800686c <I2SEx_TxISR_I2SExt+0x94>)
 800683a:	e001      	b.n	8006840 <I2SEx_TxISR_I2SExt+0x68>
 800683c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006840:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006844:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800684a:	b29b      	uxth	r3, r3
 800684c:	2b00      	cmp	r3, #0
 800684e:	d106      	bne.n	800685e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f7ff ff81 	bl	8006760 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800685e:	bf00      	nop
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	40003800 	.word	0x40003800
 800686c:	40003400 	.word	0x40003400

08006870 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68d8      	ldr	r0, [r3, #12]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006882:	1c99      	adds	r1, r3, #2
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006888:	b282      	uxth	r2, r0
 800688a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006890:	b29b      	uxth	r3, r3
 8006892:	3b01      	subs	r3, #1
 8006894:	b29a      	uxth	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800689e:	b29b      	uxth	r3, r3
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d113      	bne.n	80068cc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	685a      	ldr	r2, [r3, #4]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80068b2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d106      	bne.n	80068cc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f7ff ff4a 	bl	8006760 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80068cc:	bf00      	nop
 80068ce:	3708      	adds	r7, #8
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a20      	ldr	r2, [pc, #128]	; (8006964 <I2SEx_RxISR_I2SExt+0x90>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d101      	bne.n	80068ea <I2SEx_RxISR_I2SExt+0x16>
 80068e6:	4b20      	ldr	r3, [pc, #128]	; (8006968 <I2SEx_RxISR_I2SExt+0x94>)
 80068e8:	e001      	b.n	80068ee <I2SEx_RxISR_I2SExt+0x1a>
 80068ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068ee:	68d8      	ldr	r0, [r3, #12]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f4:	1c99      	adds	r1, r3, #2
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80068fa:	b282      	uxth	r2, r0
 80068fc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006902:	b29b      	uxth	r3, r3
 8006904:	3b01      	subs	r3, #1
 8006906:	b29a      	uxth	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006910:	b29b      	uxth	r3, r3
 8006912:	2b00      	cmp	r3, #0
 8006914:	d121      	bne.n	800695a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a12      	ldr	r2, [pc, #72]	; (8006964 <I2SEx_RxISR_I2SExt+0x90>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d101      	bne.n	8006924 <I2SEx_RxISR_I2SExt+0x50>
 8006920:	4b11      	ldr	r3, [pc, #68]	; (8006968 <I2SEx_RxISR_I2SExt+0x94>)
 8006922:	e001      	b.n	8006928 <I2SEx_RxISR_I2SExt+0x54>
 8006924:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	490d      	ldr	r1, [pc, #52]	; (8006964 <I2SEx_RxISR_I2SExt+0x90>)
 8006930:	428b      	cmp	r3, r1
 8006932:	d101      	bne.n	8006938 <I2SEx_RxISR_I2SExt+0x64>
 8006934:	4b0c      	ldr	r3, [pc, #48]	; (8006968 <I2SEx_RxISR_I2SExt+0x94>)
 8006936:	e001      	b.n	800693c <I2SEx_RxISR_I2SExt+0x68>
 8006938:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800693c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006940:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006946:	b29b      	uxth	r3, r3
 8006948:	2b00      	cmp	r3, #0
 800694a:	d106      	bne.n	800695a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f7ff ff03 	bl	8006760 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800695a:	bf00      	nop
 800695c:	3708      	adds	r7, #8
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	40003800 	.word	0x40003800
 8006968:	40003400 	.word	0x40003400

0800696c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d101      	bne.n	800697e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e267      	b.n	8006e4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	2b00      	cmp	r3, #0
 8006988:	d075      	beq.n	8006a76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800698a:	4b88      	ldr	r3, [pc, #544]	; (8006bac <HAL_RCC_OscConfig+0x240>)
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f003 030c 	and.w	r3, r3, #12
 8006992:	2b04      	cmp	r3, #4
 8006994:	d00c      	beq.n	80069b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006996:	4b85      	ldr	r3, [pc, #532]	; (8006bac <HAL_RCC_OscConfig+0x240>)
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800699e:	2b08      	cmp	r3, #8
 80069a0:	d112      	bne.n	80069c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069a2:	4b82      	ldr	r3, [pc, #520]	; (8006bac <HAL_RCC_OscConfig+0x240>)
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069ae:	d10b      	bne.n	80069c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069b0:	4b7e      	ldr	r3, [pc, #504]	; (8006bac <HAL_RCC_OscConfig+0x240>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d05b      	beq.n	8006a74 <HAL_RCC_OscConfig+0x108>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d157      	bne.n	8006a74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e242      	b.n	8006e4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069d0:	d106      	bne.n	80069e0 <HAL_RCC_OscConfig+0x74>
 80069d2:	4b76      	ldr	r3, [pc, #472]	; (8006bac <HAL_RCC_OscConfig+0x240>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a75      	ldr	r2, [pc, #468]	; (8006bac <HAL_RCC_OscConfig+0x240>)
 80069d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069dc:	6013      	str	r3, [r2, #0]
 80069de:	e01d      	b.n	8006a1c <HAL_RCC_OscConfig+0xb0>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069e8:	d10c      	bne.n	8006a04 <HAL_RCC_OscConfig+0x98>
 80069ea:	4b70      	ldr	r3, [pc, #448]	; (8006bac <HAL_RCC_OscConfig+0x240>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a6f      	ldr	r2, [pc, #444]	; (8006bac <HAL_RCC_OscConfig+0x240>)
 80069f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069f4:	6013      	str	r3, [r2, #0]
 80069f6:	4b6d      	ldr	r3, [pc, #436]	; (8006bac <HAL_RCC_OscConfig+0x240>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a6c      	ldr	r2, [pc, #432]	; (8006bac <HAL_RCC_OscConfig+0x240>)
 80069fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a00:	6013      	str	r3, [r2, #0]
 8006a02:	e00b      	b.n	8006a1c <HAL_RCC_OscConfig+0xb0>
 8006a04:	4b69      	ldr	r3, [pc, #420]	; (8006bac <HAL_RCC_OscConfig+0x240>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a68      	ldr	r2, [pc, #416]	; (8006bac <HAL_RCC_OscConfig+0x240>)
 8006a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a0e:	6013      	str	r3, [r2, #0]
 8006a10:	4b66      	ldr	r3, [pc, #408]	; (8006bac <HAL_RCC_OscConfig+0x240>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a65      	ldr	r2, [pc, #404]	; (8006bac <HAL_RCC_OscConfig+0x240>)
 8006a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d013      	beq.n	8006a4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a24:	f7fb fae0 	bl	8001fe8 <HAL_GetTick>
 8006a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a2a:	e008      	b.n	8006a3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a2c:	f7fb fadc 	bl	8001fe8 <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	2b64      	cmp	r3, #100	; 0x64
 8006a38:	d901      	bls.n	8006a3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e207      	b.n	8006e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a3e:	4b5b      	ldr	r3, [pc, #364]	; (8006bac <HAL_RCC_OscConfig+0x240>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d0f0      	beq.n	8006a2c <HAL_RCC_OscConfig+0xc0>
 8006a4a:	e014      	b.n	8006a76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a4c:	f7fb facc 	bl	8001fe8 <HAL_GetTick>
 8006a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a52:	e008      	b.n	8006a66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a54:	f7fb fac8 	bl	8001fe8 <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	2b64      	cmp	r3, #100	; 0x64
 8006a60:	d901      	bls.n	8006a66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e1f3      	b.n	8006e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a66:	4b51      	ldr	r3, [pc, #324]	; (8006bac <HAL_RCC_OscConfig+0x240>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1f0      	bne.n	8006a54 <HAL_RCC_OscConfig+0xe8>
 8006a72:	e000      	b.n	8006a76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0302 	and.w	r3, r3, #2
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d063      	beq.n	8006b4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a82:	4b4a      	ldr	r3, [pc, #296]	; (8006bac <HAL_RCC_OscConfig+0x240>)
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	f003 030c 	and.w	r3, r3, #12
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00b      	beq.n	8006aa6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a8e:	4b47      	ldr	r3, [pc, #284]	; (8006bac <HAL_RCC_OscConfig+0x240>)
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a96:	2b08      	cmp	r3, #8
 8006a98:	d11c      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a9a:	4b44      	ldr	r3, [pc, #272]	; (8006bac <HAL_RCC_OscConfig+0x240>)
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d116      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006aa6:	4b41      	ldr	r3, [pc, #260]	; (8006bac <HAL_RCC_OscConfig+0x240>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0302 	and.w	r3, r3, #2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d005      	beq.n	8006abe <HAL_RCC_OscConfig+0x152>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d001      	beq.n	8006abe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e1c7      	b.n	8006e4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006abe:	4b3b      	ldr	r3, [pc, #236]	; (8006bac <HAL_RCC_OscConfig+0x240>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	00db      	lsls	r3, r3, #3
 8006acc:	4937      	ldr	r1, [pc, #220]	; (8006bac <HAL_RCC_OscConfig+0x240>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ad2:	e03a      	b.n	8006b4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d020      	beq.n	8006b1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006adc:	4b34      	ldr	r3, [pc, #208]	; (8006bb0 <HAL_RCC_OscConfig+0x244>)
 8006ade:	2201      	movs	r2, #1
 8006ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ae2:	f7fb fa81 	bl	8001fe8 <HAL_GetTick>
 8006ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ae8:	e008      	b.n	8006afc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006aea:	f7fb fa7d 	bl	8001fe8 <HAL_GetTick>
 8006aee:	4602      	mov	r2, r0
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d901      	bls.n	8006afc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e1a8      	b.n	8006e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006afc:	4b2b      	ldr	r3, [pc, #172]	; (8006bac <HAL_RCC_OscConfig+0x240>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d0f0      	beq.n	8006aea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b08:	4b28      	ldr	r3, [pc, #160]	; (8006bac <HAL_RCC_OscConfig+0x240>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	00db      	lsls	r3, r3, #3
 8006b16:	4925      	ldr	r1, [pc, #148]	; (8006bac <HAL_RCC_OscConfig+0x240>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	600b      	str	r3, [r1, #0]
 8006b1c:	e015      	b.n	8006b4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b1e:	4b24      	ldr	r3, [pc, #144]	; (8006bb0 <HAL_RCC_OscConfig+0x244>)
 8006b20:	2200      	movs	r2, #0
 8006b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b24:	f7fb fa60 	bl	8001fe8 <HAL_GetTick>
 8006b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b2a:	e008      	b.n	8006b3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b2c:	f7fb fa5c 	bl	8001fe8 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d901      	bls.n	8006b3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e187      	b.n	8006e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b3e:	4b1b      	ldr	r3, [pc, #108]	; (8006bac <HAL_RCC_OscConfig+0x240>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0302 	and.w	r3, r3, #2
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1f0      	bne.n	8006b2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0308 	and.w	r3, r3, #8
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d036      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d016      	beq.n	8006b8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b5e:	4b15      	ldr	r3, [pc, #84]	; (8006bb4 <HAL_RCC_OscConfig+0x248>)
 8006b60:	2201      	movs	r2, #1
 8006b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b64:	f7fb fa40 	bl	8001fe8 <HAL_GetTick>
 8006b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b6a:	e008      	b.n	8006b7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b6c:	f7fb fa3c 	bl	8001fe8 <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d901      	bls.n	8006b7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e167      	b.n	8006e4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b7e:	4b0b      	ldr	r3, [pc, #44]	; (8006bac <HAL_RCC_OscConfig+0x240>)
 8006b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b82:	f003 0302 	and.w	r3, r3, #2
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d0f0      	beq.n	8006b6c <HAL_RCC_OscConfig+0x200>
 8006b8a:	e01b      	b.n	8006bc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b8c:	4b09      	ldr	r3, [pc, #36]	; (8006bb4 <HAL_RCC_OscConfig+0x248>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b92:	f7fb fa29 	bl	8001fe8 <HAL_GetTick>
 8006b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b98:	e00e      	b.n	8006bb8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b9a:	f7fb fa25 	bl	8001fe8 <HAL_GetTick>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d907      	bls.n	8006bb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e150      	b.n	8006e4e <HAL_RCC_OscConfig+0x4e2>
 8006bac:	40023800 	.word	0x40023800
 8006bb0:	42470000 	.word	0x42470000
 8006bb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bb8:	4b88      	ldr	r3, [pc, #544]	; (8006ddc <HAL_RCC_OscConfig+0x470>)
 8006bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bbc:	f003 0302 	and.w	r3, r3, #2
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1ea      	bne.n	8006b9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0304 	and.w	r3, r3, #4
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f000 8097 	beq.w	8006d00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bd6:	4b81      	ldr	r3, [pc, #516]	; (8006ddc <HAL_RCC_OscConfig+0x470>)
 8006bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10f      	bne.n	8006c02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006be2:	2300      	movs	r3, #0
 8006be4:	60bb      	str	r3, [r7, #8]
 8006be6:	4b7d      	ldr	r3, [pc, #500]	; (8006ddc <HAL_RCC_OscConfig+0x470>)
 8006be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bea:	4a7c      	ldr	r2, [pc, #496]	; (8006ddc <HAL_RCC_OscConfig+0x470>)
 8006bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8006bf2:	4b7a      	ldr	r3, [pc, #488]	; (8006ddc <HAL_RCC_OscConfig+0x470>)
 8006bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bfa:	60bb      	str	r3, [r7, #8]
 8006bfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c02:	4b77      	ldr	r3, [pc, #476]	; (8006de0 <HAL_RCC_OscConfig+0x474>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d118      	bne.n	8006c40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c0e:	4b74      	ldr	r3, [pc, #464]	; (8006de0 <HAL_RCC_OscConfig+0x474>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a73      	ldr	r2, [pc, #460]	; (8006de0 <HAL_RCC_OscConfig+0x474>)
 8006c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c1a:	f7fb f9e5 	bl	8001fe8 <HAL_GetTick>
 8006c1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c20:	e008      	b.n	8006c34 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c22:	f7fb f9e1 	bl	8001fe8 <HAL_GetTick>
 8006c26:	4602      	mov	r2, r0
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d901      	bls.n	8006c34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006c30:	2303      	movs	r3, #3
 8006c32:	e10c      	b.n	8006e4e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c34:	4b6a      	ldr	r3, [pc, #424]	; (8006de0 <HAL_RCC_OscConfig+0x474>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d0f0      	beq.n	8006c22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d106      	bne.n	8006c56 <HAL_RCC_OscConfig+0x2ea>
 8006c48:	4b64      	ldr	r3, [pc, #400]	; (8006ddc <HAL_RCC_OscConfig+0x470>)
 8006c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c4c:	4a63      	ldr	r2, [pc, #396]	; (8006ddc <HAL_RCC_OscConfig+0x470>)
 8006c4e:	f043 0301 	orr.w	r3, r3, #1
 8006c52:	6713      	str	r3, [r2, #112]	; 0x70
 8006c54:	e01c      	b.n	8006c90 <HAL_RCC_OscConfig+0x324>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	2b05      	cmp	r3, #5
 8006c5c:	d10c      	bne.n	8006c78 <HAL_RCC_OscConfig+0x30c>
 8006c5e:	4b5f      	ldr	r3, [pc, #380]	; (8006ddc <HAL_RCC_OscConfig+0x470>)
 8006c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c62:	4a5e      	ldr	r2, [pc, #376]	; (8006ddc <HAL_RCC_OscConfig+0x470>)
 8006c64:	f043 0304 	orr.w	r3, r3, #4
 8006c68:	6713      	str	r3, [r2, #112]	; 0x70
 8006c6a:	4b5c      	ldr	r3, [pc, #368]	; (8006ddc <HAL_RCC_OscConfig+0x470>)
 8006c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c6e:	4a5b      	ldr	r2, [pc, #364]	; (8006ddc <HAL_RCC_OscConfig+0x470>)
 8006c70:	f043 0301 	orr.w	r3, r3, #1
 8006c74:	6713      	str	r3, [r2, #112]	; 0x70
 8006c76:	e00b      	b.n	8006c90 <HAL_RCC_OscConfig+0x324>
 8006c78:	4b58      	ldr	r3, [pc, #352]	; (8006ddc <HAL_RCC_OscConfig+0x470>)
 8006c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c7c:	4a57      	ldr	r2, [pc, #348]	; (8006ddc <HAL_RCC_OscConfig+0x470>)
 8006c7e:	f023 0301 	bic.w	r3, r3, #1
 8006c82:	6713      	str	r3, [r2, #112]	; 0x70
 8006c84:	4b55      	ldr	r3, [pc, #340]	; (8006ddc <HAL_RCC_OscConfig+0x470>)
 8006c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c88:	4a54      	ldr	r2, [pc, #336]	; (8006ddc <HAL_RCC_OscConfig+0x470>)
 8006c8a:	f023 0304 	bic.w	r3, r3, #4
 8006c8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d015      	beq.n	8006cc4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c98:	f7fb f9a6 	bl	8001fe8 <HAL_GetTick>
 8006c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c9e:	e00a      	b.n	8006cb6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ca0:	f7fb f9a2 	bl	8001fe8 <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d901      	bls.n	8006cb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	e0cb      	b.n	8006e4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cb6:	4b49      	ldr	r3, [pc, #292]	; (8006ddc <HAL_RCC_OscConfig+0x470>)
 8006cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cba:	f003 0302 	and.w	r3, r3, #2
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d0ee      	beq.n	8006ca0 <HAL_RCC_OscConfig+0x334>
 8006cc2:	e014      	b.n	8006cee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cc4:	f7fb f990 	bl	8001fe8 <HAL_GetTick>
 8006cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cca:	e00a      	b.n	8006ce2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ccc:	f7fb f98c 	bl	8001fe8 <HAL_GetTick>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d901      	bls.n	8006ce2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e0b5      	b.n	8006e4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ce2:	4b3e      	ldr	r3, [pc, #248]	; (8006ddc <HAL_RCC_OscConfig+0x470>)
 8006ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ce6:	f003 0302 	and.w	r3, r3, #2
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1ee      	bne.n	8006ccc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006cee:	7dfb      	ldrb	r3, [r7, #23]
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d105      	bne.n	8006d00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cf4:	4b39      	ldr	r3, [pc, #228]	; (8006ddc <HAL_RCC_OscConfig+0x470>)
 8006cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf8:	4a38      	ldr	r2, [pc, #224]	; (8006ddc <HAL_RCC_OscConfig+0x470>)
 8006cfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cfe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f000 80a1 	beq.w	8006e4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d0a:	4b34      	ldr	r3, [pc, #208]	; (8006ddc <HAL_RCC_OscConfig+0x470>)
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f003 030c 	and.w	r3, r3, #12
 8006d12:	2b08      	cmp	r3, #8
 8006d14:	d05c      	beq.n	8006dd0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d141      	bne.n	8006da2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d1e:	4b31      	ldr	r3, [pc, #196]	; (8006de4 <HAL_RCC_OscConfig+0x478>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d24:	f7fb f960 	bl	8001fe8 <HAL_GetTick>
 8006d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d2a:	e008      	b.n	8006d3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d2c:	f7fb f95c 	bl	8001fe8 <HAL_GetTick>
 8006d30:	4602      	mov	r2, r0
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d901      	bls.n	8006d3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e087      	b.n	8006e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d3e:	4b27      	ldr	r3, [pc, #156]	; (8006ddc <HAL_RCC_OscConfig+0x470>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1f0      	bne.n	8006d2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	69da      	ldr	r2, [r3, #28]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	431a      	orrs	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d58:	019b      	lsls	r3, r3, #6
 8006d5a:	431a      	orrs	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d60:	085b      	lsrs	r3, r3, #1
 8006d62:	3b01      	subs	r3, #1
 8006d64:	041b      	lsls	r3, r3, #16
 8006d66:	431a      	orrs	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6c:	061b      	lsls	r3, r3, #24
 8006d6e:	491b      	ldr	r1, [pc, #108]	; (8006ddc <HAL_RCC_OscConfig+0x470>)
 8006d70:	4313      	orrs	r3, r2
 8006d72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d74:	4b1b      	ldr	r3, [pc, #108]	; (8006de4 <HAL_RCC_OscConfig+0x478>)
 8006d76:	2201      	movs	r2, #1
 8006d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d7a:	f7fb f935 	bl	8001fe8 <HAL_GetTick>
 8006d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d80:	e008      	b.n	8006d94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d82:	f7fb f931 	bl	8001fe8 <HAL_GetTick>
 8006d86:	4602      	mov	r2, r0
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d901      	bls.n	8006d94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e05c      	b.n	8006e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d94:	4b11      	ldr	r3, [pc, #68]	; (8006ddc <HAL_RCC_OscConfig+0x470>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d0f0      	beq.n	8006d82 <HAL_RCC_OscConfig+0x416>
 8006da0:	e054      	b.n	8006e4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006da2:	4b10      	ldr	r3, [pc, #64]	; (8006de4 <HAL_RCC_OscConfig+0x478>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006da8:	f7fb f91e 	bl	8001fe8 <HAL_GetTick>
 8006dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dae:	e008      	b.n	8006dc2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006db0:	f7fb f91a 	bl	8001fe8 <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d901      	bls.n	8006dc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e045      	b.n	8006e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dc2:	4b06      	ldr	r3, [pc, #24]	; (8006ddc <HAL_RCC_OscConfig+0x470>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1f0      	bne.n	8006db0 <HAL_RCC_OscConfig+0x444>
 8006dce:	e03d      	b.n	8006e4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d107      	bne.n	8006de8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e038      	b.n	8006e4e <HAL_RCC_OscConfig+0x4e2>
 8006ddc:	40023800 	.word	0x40023800
 8006de0:	40007000 	.word	0x40007000
 8006de4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006de8:	4b1b      	ldr	r3, [pc, #108]	; (8006e58 <HAL_RCC_OscConfig+0x4ec>)
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d028      	beq.n	8006e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d121      	bne.n	8006e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d11a      	bne.n	8006e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e18:	4013      	ands	r3, r2
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d111      	bne.n	8006e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e2e:	085b      	lsrs	r3, r3, #1
 8006e30:	3b01      	subs	r3, #1
 8006e32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d107      	bne.n	8006e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d001      	beq.n	8006e4c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e000      	b.n	8006e4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3718      	adds	r7, #24
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	40023800 	.word	0x40023800

08006e5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d101      	bne.n	8006e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e0cc      	b.n	800700a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e70:	4b68      	ldr	r3, [pc, #416]	; (8007014 <HAL_RCC_ClockConfig+0x1b8>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0307 	and.w	r3, r3, #7
 8006e78:	683a      	ldr	r2, [r7, #0]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d90c      	bls.n	8006e98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e7e:	4b65      	ldr	r3, [pc, #404]	; (8007014 <HAL_RCC_ClockConfig+0x1b8>)
 8006e80:	683a      	ldr	r2, [r7, #0]
 8006e82:	b2d2      	uxtb	r2, r2
 8006e84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e86:	4b63      	ldr	r3, [pc, #396]	; (8007014 <HAL_RCC_ClockConfig+0x1b8>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0307 	and.w	r3, r3, #7
 8006e8e:	683a      	ldr	r2, [r7, #0]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d001      	beq.n	8006e98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e0b8      	b.n	800700a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0302 	and.w	r3, r3, #2
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d020      	beq.n	8006ee6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 0304 	and.w	r3, r3, #4
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d005      	beq.n	8006ebc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006eb0:	4b59      	ldr	r3, [pc, #356]	; (8007018 <HAL_RCC_ClockConfig+0x1bc>)
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	4a58      	ldr	r2, [pc, #352]	; (8007018 <HAL_RCC_ClockConfig+0x1bc>)
 8006eb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006eba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 0308 	and.w	r3, r3, #8
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d005      	beq.n	8006ed4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ec8:	4b53      	ldr	r3, [pc, #332]	; (8007018 <HAL_RCC_ClockConfig+0x1bc>)
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	4a52      	ldr	r2, [pc, #328]	; (8007018 <HAL_RCC_ClockConfig+0x1bc>)
 8006ece:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006ed2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ed4:	4b50      	ldr	r3, [pc, #320]	; (8007018 <HAL_RCC_ClockConfig+0x1bc>)
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	494d      	ldr	r1, [pc, #308]	; (8007018 <HAL_RCC_ClockConfig+0x1bc>)
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d044      	beq.n	8006f7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d107      	bne.n	8006f0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006efa:	4b47      	ldr	r3, [pc, #284]	; (8007018 <HAL_RCC_ClockConfig+0x1bc>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d119      	bne.n	8006f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e07f      	b.n	800700a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d003      	beq.n	8006f1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f16:	2b03      	cmp	r3, #3
 8006f18:	d107      	bne.n	8006f2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f1a:	4b3f      	ldr	r3, [pc, #252]	; (8007018 <HAL_RCC_ClockConfig+0x1bc>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d109      	bne.n	8006f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e06f      	b.n	800700a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f2a:	4b3b      	ldr	r3, [pc, #236]	; (8007018 <HAL_RCC_ClockConfig+0x1bc>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 0302 	and.w	r3, r3, #2
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d101      	bne.n	8006f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e067      	b.n	800700a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f3a:	4b37      	ldr	r3, [pc, #220]	; (8007018 <HAL_RCC_ClockConfig+0x1bc>)
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	f023 0203 	bic.w	r2, r3, #3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	4934      	ldr	r1, [pc, #208]	; (8007018 <HAL_RCC_ClockConfig+0x1bc>)
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f4c:	f7fb f84c 	bl	8001fe8 <HAL_GetTick>
 8006f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f52:	e00a      	b.n	8006f6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f54:	f7fb f848 	bl	8001fe8 <HAL_GetTick>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d901      	bls.n	8006f6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f66:	2303      	movs	r3, #3
 8006f68:	e04f      	b.n	800700a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f6a:	4b2b      	ldr	r3, [pc, #172]	; (8007018 <HAL_RCC_ClockConfig+0x1bc>)
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	f003 020c 	and.w	r2, r3, #12
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d1eb      	bne.n	8006f54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f7c:	4b25      	ldr	r3, [pc, #148]	; (8007014 <HAL_RCC_ClockConfig+0x1b8>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0307 	and.w	r3, r3, #7
 8006f84:	683a      	ldr	r2, [r7, #0]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d20c      	bcs.n	8006fa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f8a:	4b22      	ldr	r3, [pc, #136]	; (8007014 <HAL_RCC_ClockConfig+0x1b8>)
 8006f8c:	683a      	ldr	r2, [r7, #0]
 8006f8e:	b2d2      	uxtb	r2, r2
 8006f90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f92:	4b20      	ldr	r3, [pc, #128]	; (8007014 <HAL_RCC_ClockConfig+0x1b8>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0307 	and.w	r3, r3, #7
 8006f9a:	683a      	ldr	r2, [r7, #0]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d001      	beq.n	8006fa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e032      	b.n	800700a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0304 	and.w	r3, r3, #4
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d008      	beq.n	8006fc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fb0:	4b19      	ldr	r3, [pc, #100]	; (8007018 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	4916      	ldr	r1, [pc, #88]	; (8007018 <HAL_RCC_ClockConfig+0x1bc>)
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0308 	and.w	r3, r3, #8
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d009      	beq.n	8006fe2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006fce:	4b12      	ldr	r3, [pc, #72]	; (8007018 <HAL_RCC_ClockConfig+0x1bc>)
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	00db      	lsls	r3, r3, #3
 8006fdc:	490e      	ldr	r1, [pc, #56]	; (8007018 <HAL_RCC_ClockConfig+0x1bc>)
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006fe2:	f000 f821 	bl	8007028 <HAL_RCC_GetSysClockFreq>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	4b0b      	ldr	r3, [pc, #44]	; (8007018 <HAL_RCC_ClockConfig+0x1bc>)
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	091b      	lsrs	r3, r3, #4
 8006fee:	f003 030f 	and.w	r3, r3, #15
 8006ff2:	490a      	ldr	r1, [pc, #40]	; (800701c <HAL_RCC_ClockConfig+0x1c0>)
 8006ff4:	5ccb      	ldrb	r3, [r1, r3]
 8006ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8006ffa:	4a09      	ldr	r2, [pc, #36]	; (8007020 <HAL_RCC_ClockConfig+0x1c4>)
 8006ffc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006ffe:	4b09      	ldr	r3, [pc, #36]	; (8007024 <HAL_RCC_ClockConfig+0x1c8>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4618      	mov	r0, r3
 8007004:	f7fa ffac 	bl	8001f60 <HAL_InitTick>

  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	40023c00 	.word	0x40023c00
 8007018:	40023800 	.word	0x40023800
 800701c:	0800f7cc 	.word	0x0800f7cc
 8007020:	20000038 	.word	0x20000038
 8007024:	20000040 	.word	0x20000040

08007028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800702c:	b094      	sub	sp, #80	; 0x50
 800702e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007030:	2300      	movs	r3, #0
 8007032:	647b      	str	r3, [r7, #68]	; 0x44
 8007034:	2300      	movs	r3, #0
 8007036:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007038:	2300      	movs	r3, #0
 800703a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800703c:	2300      	movs	r3, #0
 800703e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007040:	4b79      	ldr	r3, [pc, #484]	; (8007228 <HAL_RCC_GetSysClockFreq+0x200>)
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f003 030c 	and.w	r3, r3, #12
 8007048:	2b08      	cmp	r3, #8
 800704a:	d00d      	beq.n	8007068 <HAL_RCC_GetSysClockFreq+0x40>
 800704c:	2b08      	cmp	r3, #8
 800704e:	f200 80e1 	bhi.w	8007214 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007052:	2b00      	cmp	r3, #0
 8007054:	d002      	beq.n	800705c <HAL_RCC_GetSysClockFreq+0x34>
 8007056:	2b04      	cmp	r3, #4
 8007058:	d003      	beq.n	8007062 <HAL_RCC_GetSysClockFreq+0x3a>
 800705a:	e0db      	b.n	8007214 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800705c:	4b73      	ldr	r3, [pc, #460]	; (800722c <HAL_RCC_GetSysClockFreq+0x204>)
 800705e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007060:	e0db      	b.n	800721a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007062:	4b73      	ldr	r3, [pc, #460]	; (8007230 <HAL_RCC_GetSysClockFreq+0x208>)
 8007064:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007066:	e0d8      	b.n	800721a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007068:	4b6f      	ldr	r3, [pc, #444]	; (8007228 <HAL_RCC_GetSysClockFreq+0x200>)
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007070:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007072:	4b6d      	ldr	r3, [pc, #436]	; (8007228 <HAL_RCC_GetSysClockFreq+0x200>)
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d063      	beq.n	8007146 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800707e:	4b6a      	ldr	r3, [pc, #424]	; (8007228 <HAL_RCC_GetSysClockFreq+0x200>)
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	099b      	lsrs	r3, r3, #6
 8007084:	2200      	movs	r2, #0
 8007086:	63bb      	str	r3, [r7, #56]	; 0x38
 8007088:	63fa      	str	r2, [r7, #60]	; 0x3c
 800708a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007090:	633b      	str	r3, [r7, #48]	; 0x30
 8007092:	2300      	movs	r3, #0
 8007094:	637b      	str	r3, [r7, #52]	; 0x34
 8007096:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800709a:	4622      	mov	r2, r4
 800709c:	462b      	mov	r3, r5
 800709e:	f04f 0000 	mov.w	r0, #0
 80070a2:	f04f 0100 	mov.w	r1, #0
 80070a6:	0159      	lsls	r1, r3, #5
 80070a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070ac:	0150      	lsls	r0, r2, #5
 80070ae:	4602      	mov	r2, r0
 80070b0:	460b      	mov	r3, r1
 80070b2:	4621      	mov	r1, r4
 80070b4:	1a51      	subs	r1, r2, r1
 80070b6:	6139      	str	r1, [r7, #16]
 80070b8:	4629      	mov	r1, r5
 80070ba:	eb63 0301 	sbc.w	r3, r3, r1
 80070be:	617b      	str	r3, [r7, #20]
 80070c0:	f04f 0200 	mov.w	r2, #0
 80070c4:	f04f 0300 	mov.w	r3, #0
 80070c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80070cc:	4659      	mov	r1, fp
 80070ce:	018b      	lsls	r3, r1, #6
 80070d0:	4651      	mov	r1, sl
 80070d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80070d6:	4651      	mov	r1, sl
 80070d8:	018a      	lsls	r2, r1, #6
 80070da:	4651      	mov	r1, sl
 80070dc:	ebb2 0801 	subs.w	r8, r2, r1
 80070e0:	4659      	mov	r1, fp
 80070e2:	eb63 0901 	sbc.w	r9, r3, r1
 80070e6:	f04f 0200 	mov.w	r2, #0
 80070ea:	f04f 0300 	mov.w	r3, #0
 80070ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80070f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80070f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80070fa:	4690      	mov	r8, r2
 80070fc:	4699      	mov	r9, r3
 80070fe:	4623      	mov	r3, r4
 8007100:	eb18 0303 	adds.w	r3, r8, r3
 8007104:	60bb      	str	r3, [r7, #8]
 8007106:	462b      	mov	r3, r5
 8007108:	eb49 0303 	adc.w	r3, r9, r3
 800710c:	60fb      	str	r3, [r7, #12]
 800710e:	f04f 0200 	mov.w	r2, #0
 8007112:	f04f 0300 	mov.w	r3, #0
 8007116:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800711a:	4629      	mov	r1, r5
 800711c:	024b      	lsls	r3, r1, #9
 800711e:	4621      	mov	r1, r4
 8007120:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007124:	4621      	mov	r1, r4
 8007126:	024a      	lsls	r2, r1, #9
 8007128:	4610      	mov	r0, r2
 800712a:	4619      	mov	r1, r3
 800712c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800712e:	2200      	movs	r2, #0
 8007130:	62bb      	str	r3, [r7, #40]	; 0x28
 8007132:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007134:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007138:	f7f9 f84e 	bl	80001d8 <__aeabi_uldivmod>
 800713c:	4602      	mov	r2, r0
 800713e:	460b      	mov	r3, r1
 8007140:	4613      	mov	r3, r2
 8007142:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007144:	e058      	b.n	80071f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007146:	4b38      	ldr	r3, [pc, #224]	; (8007228 <HAL_RCC_GetSysClockFreq+0x200>)
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	099b      	lsrs	r3, r3, #6
 800714c:	2200      	movs	r2, #0
 800714e:	4618      	mov	r0, r3
 8007150:	4611      	mov	r1, r2
 8007152:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007156:	623b      	str	r3, [r7, #32]
 8007158:	2300      	movs	r3, #0
 800715a:	627b      	str	r3, [r7, #36]	; 0x24
 800715c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007160:	4642      	mov	r2, r8
 8007162:	464b      	mov	r3, r9
 8007164:	f04f 0000 	mov.w	r0, #0
 8007168:	f04f 0100 	mov.w	r1, #0
 800716c:	0159      	lsls	r1, r3, #5
 800716e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007172:	0150      	lsls	r0, r2, #5
 8007174:	4602      	mov	r2, r0
 8007176:	460b      	mov	r3, r1
 8007178:	4641      	mov	r1, r8
 800717a:	ebb2 0a01 	subs.w	sl, r2, r1
 800717e:	4649      	mov	r1, r9
 8007180:	eb63 0b01 	sbc.w	fp, r3, r1
 8007184:	f04f 0200 	mov.w	r2, #0
 8007188:	f04f 0300 	mov.w	r3, #0
 800718c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007190:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007194:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007198:	ebb2 040a 	subs.w	r4, r2, sl
 800719c:	eb63 050b 	sbc.w	r5, r3, fp
 80071a0:	f04f 0200 	mov.w	r2, #0
 80071a4:	f04f 0300 	mov.w	r3, #0
 80071a8:	00eb      	lsls	r3, r5, #3
 80071aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071ae:	00e2      	lsls	r2, r4, #3
 80071b0:	4614      	mov	r4, r2
 80071b2:	461d      	mov	r5, r3
 80071b4:	4643      	mov	r3, r8
 80071b6:	18e3      	adds	r3, r4, r3
 80071b8:	603b      	str	r3, [r7, #0]
 80071ba:	464b      	mov	r3, r9
 80071bc:	eb45 0303 	adc.w	r3, r5, r3
 80071c0:	607b      	str	r3, [r7, #4]
 80071c2:	f04f 0200 	mov.w	r2, #0
 80071c6:	f04f 0300 	mov.w	r3, #0
 80071ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80071ce:	4629      	mov	r1, r5
 80071d0:	028b      	lsls	r3, r1, #10
 80071d2:	4621      	mov	r1, r4
 80071d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80071d8:	4621      	mov	r1, r4
 80071da:	028a      	lsls	r2, r1, #10
 80071dc:	4610      	mov	r0, r2
 80071de:	4619      	mov	r1, r3
 80071e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071e2:	2200      	movs	r2, #0
 80071e4:	61bb      	str	r3, [r7, #24]
 80071e6:	61fa      	str	r2, [r7, #28]
 80071e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071ec:	f7f8 fff4 	bl	80001d8 <__aeabi_uldivmod>
 80071f0:	4602      	mov	r2, r0
 80071f2:	460b      	mov	r3, r1
 80071f4:	4613      	mov	r3, r2
 80071f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80071f8:	4b0b      	ldr	r3, [pc, #44]	; (8007228 <HAL_RCC_GetSysClockFreq+0x200>)
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	0c1b      	lsrs	r3, r3, #16
 80071fe:	f003 0303 	and.w	r3, r3, #3
 8007202:	3301      	adds	r3, #1
 8007204:	005b      	lsls	r3, r3, #1
 8007206:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007208:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800720a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800720c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007210:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007212:	e002      	b.n	800721a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007214:	4b05      	ldr	r3, [pc, #20]	; (800722c <HAL_RCC_GetSysClockFreq+0x204>)
 8007216:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007218:	bf00      	nop
    }
  }
  return sysclockfreq;
 800721a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800721c:	4618      	mov	r0, r3
 800721e:	3750      	adds	r7, #80	; 0x50
 8007220:	46bd      	mov	sp, r7
 8007222:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007226:	bf00      	nop
 8007228:	40023800 	.word	0x40023800
 800722c:	00f42400 	.word	0x00f42400
 8007230:	007a1200 	.word	0x007a1200

08007234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007234:	b480      	push	{r7}
 8007236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007238:	4b03      	ldr	r3, [pc, #12]	; (8007248 <HAL_RCC_GetHCLKFreq+0x14>)
 800723a:	681b      	ldr	r3, [r3, #0]
}
 800723c:	4618      	mov	r0, r3
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	20000038 	.word	0x20000038

0800724c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007250:	f7ff fff0 	bl	8007234 <HAL_RCC_GetHCLKFreq>
 8007254:	4602      	mov	r2, r0
 8007256:	4b05      	ldr	r3, [pc, #20]	; (800726c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	0a9b      	lsrs	r3, r3, #10
 800725c:	f003 0307 	and.w	r3, r3, #7
 8007260:	4903      	ldr	r1, [pc, #12]	; (8007270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007262:	5ccb      	ldrb	r3, [r1, r3]
 8007264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007268:	4618      	mov	r0, r3
 800726a:	bd80      	pop	{r7, pc}
 800726c:	40023800 	.word	0x40023800
 8007270:	0800f7dc 	.word	0x0800f7dc

08007274 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800727c:	2300      	movs	r3, #0
 800727e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007280:	2300      	movs	r3, #0
 8007282:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 0301 	and.w	r3, r3, #1
 800728c:	2b00      	cmp	r3, #0
 800728e:	d105      	bne.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007298:	2b00      	cmp	r3, #0
 800729a:	d038      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800729c:	4b68      	ldr	r3, [pc, #416]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800729e:	2200      	movs	r2, #0
 80072a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80072a2:	f7fa fea1 	bl	8001fe8 <HAL_GetTick>
 80072a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072a8:	e008      	b.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80072aa:	f7fa fe9d 	bl	8001fe8 <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d901      	bls.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e0bd      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072bc:	4b61      	ldr	r3, [pc, #388]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d1f0      	bne.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	019b      	lsls	r3, r3, #6
 80072d2:	431a      	orrs	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	071b      	lsls	r3, r3, #28
 80072da:	495a      	ldr	r1, [pc, #360]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80072e2:	4b57      	ldr	r3, [pc, #348]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80072e4:	2201      	movs	r2, #1
 80072e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80072e8:	f7fa fe7e 	bl	8001fe8 <HAL_GetTick>
 80072ec:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80072ee:	e008      	b.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80072f0:	f7fa fe7a 	bl	8001fe8 <HAL_GetTick>
 80072f4:	4602      	mov	r2, r0
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	1ad3      	subs	r3, r2, r3
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d901      	bls.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072fe:	2303      	movs	r3, #3
 8007300:	e09a      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007302:	4b50      	ldr	r3, [pc, #320]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800730a:	2b00      	cmp	r3, #0
 800730c:	d0f0      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f003 0302 	and.w	r3, r3, #2
 8007316:	2b00      	cmp	r3, #0
 8007318:	f000 8083 	beq.w	8007422 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800731c:	2300      	movs	r3, #0
 800731e:	60fb      	str	r3, [r7, #12]
 8007320:	4b48      	ldr	r3, [pc, #288]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007324:	4a47      	ldr	r2, [pc, #284]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800732a:	6413      	str	r3, [r2, #64]	; 0x40
 800732c:	4b45      	ldr	r3, [pc, #276]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800732e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007334:	60fb      	str	r3, [r7, #12]
 8007336:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007338:	4b43      	ldr	r3, [pc, #268]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a42      	ldr	r2, [pc, #264]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800733e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007342:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007344:	f7fa fe50 	bl	8001fe8 <HAL_GetTick>
 8007348:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800734a:	e008      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800734c:	f7fa fe4c 	bl	8001fe8 <HAL_GetTick>
 8007350:	4602      	mov	r2, r0
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	2b02      	cmp	r3, #2
 8007358:	d901      	bls.n	800735e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e06c      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800735e:	4b3a      	ldr	r3, [pc, #232]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007366:	2b00      	cmp	r3, #0
 8007368:	d0f0      	beq.n	800734c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800736a:	4b36      	ldr	r3, [pc, #216]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800736c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800736e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007372:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d02f      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x166>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007382:	693a      	ldr	r2, [r7, #16]
 8007384:	429a      	cmp	r2, r3
 8007386:	d028      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007388:	4b2e      	ldr	r3, [pc, #184]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800738a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800738c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007390:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007392:	4b2e      	ldr	r3, [pc, #184]	; (800744c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007394:	2201      	movs	r2, #1
 8007396:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007398:	4b2c      	ldr	r3, [pc, #176]	; (800744c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800739a:	2200      	movs	r2, #0
 800739c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800739e:	4a29      	ldr	r2, [pc, #164]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80073a4:	4b27      	ldr	r3, [pc, #156]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a8:	f003 0301 	and.w	r3, r3, #1
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d114      	bne.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80073b0:	f7fa fe1a 	bl	8001fe8 <HAL_GetTick>
 80073b4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073b6:	e00a      	b.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073b8:	f7fa fe16 	bl	8001fe8 <HAL_GetTick>
 80073bc:	4602      	mov	r2, r0
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d901      	bls.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80073ca:	2303      	movs	r3, #3
 80073cc:	e034      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073ce:	4b1d      	ldr	r3, [pc, #116]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d2:	f003 0302 	and.w	r3, r3, #2
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d0ee      	beq.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073e6:	d10d      	bne.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80073e8:	4b16      	ldr	r3, [pc, #88]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80073f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073fc:	4911      	ldr	r1, [pc, #68]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073fe:	4313      	orrs	r3, r2
 8007400:	608b      	str	r3, [r1, #8]
 8007402:	e005      	b.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8007404:	4b0f      	ldr	r3, [pc, #60]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	4a0e      	ldr	r2, [pc, #56]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800740a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800740e:	6093      	str	r3, [r2, #8]
 8007410:	4b0c      	ldr	r3, [pc, #48]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007412:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800741c:	4909      	ldr	r1, [pc, #36]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800741e:	4313      	orrs	r3, r2
 8007420:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0308 	and.w	r3, r3, #8
 800742a:	2b00      	cmp	r3, #0
 800742c:	d003      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	7d1a      	ldrb	r2, [r3, #20]
 8007432:	4b07      	ldr	r3, [pc, #28]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8007434:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	3718      	adds	r7, #24
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	42470068 	.word	0x42470068
 8007444:	40023800 	.word	0x40023800
 8007448:	40007000 	.word	0x40007000
 800744c:	42470e40 	.word	0x42470e40
 8007450:	424711e0 	.word	0x424711e0

08007454 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2203      	movs	r2, #3
 8007460:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8007462:	4b1c      	ldr	r3, [pc, #112]	; (80074d4 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8007464:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007468:	099b      	lsrs	r3, r3, #6
 800746a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007472:	4b18      	ldr	r3, [pc, #96]	; (80074d4 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8007474:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007478:	0f1b      	lsrs	r3, r3, #28
 800747a:	f003 0207 	and.w	r2, r3, #7
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	60da      	str	r2, [r3, #12]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
 8007482:	4b14      	ldr	r3, [pc, #80]	; (80074d4 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8007484:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007488:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	605a      	str	r2, [r3, #4]
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8007490:	4b10      	ldr	r3, [pc, #64]	; (80074d4 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007498:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800749a:	4b0e      	ldr	r3, [pc, #56]	; (80074d4 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 800749c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800749e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	431a      	orrs	r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	611a      	str	r2, [r3, #16]

#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 80074aa:	4b0a      	ldr	r3, [pc, #40]	; (80074d4 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80074ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d103      	bne.n	80074c0 <HAL_RCCEx_GetPeriphCLKConfig+0x6c>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	751a      	strb	r2, [r3, #20]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 80074be:	e002      	b.n	80074c6 <HAL_RCCEx_GetPeriphCLKConfig+0x72>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	751a      	strb	r2, [r3, #20]
}
 80074c6:	bf00      	nop
 80074c8:	3714      	adds	r7, #20
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	40023800 	.word	0x40023800

080074d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80074d8:	b480      	push	{r7}
 80074da:	b087      	sub	sp, #28
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80074e0:	2300      	movs	r3, #0
 80074e2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80074e4:	2300      	movs	r3, #0
 80074e6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80074e8:	2300      	movs	r3, #0
 80074ea:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80074ec:	2300      	movs	r3, #0
 80074ee:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d140      	bne.n	8007578 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80074f6:	4b24      	ldr	r3, [pc, #144]	; (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074fe:	60fb      	str	r3, [r7, #12]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d005      	beq.n	8007512 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2b01      	cmp	r3, #1
 800750a:	d131      	bne.n	8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800750c:	4b1f      	ldr	r3, [pc, #124]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800750e:	617b      	str	r3, [r7, #20]
          break;
 8007510:	e031      	b.n	8007576 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007512:	4b1d      	ldr	r3, [pc, #116]	; (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800751a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800751e:	d109      	bne.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007520:	4b19      	ldr	r3, [pc, #100]	; (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007522:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007526:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800752a:	4a19      	ldr	r2, [pc, #100]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800752c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007530:	613b      	str	r3, [r7, #16]
 8007532:	e008      	b.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007534:	4b14      	ldr	r3, [pc, #80]	; (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007536:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800753a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800753e:	4a15      	ldr	r2, [pc, #84]	; (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8007540:	fbb2 f3f3 	udiv	r3, r2, r3
 8007544:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007546:	4b10      	ldr	r3, [pc, #64]	; (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800754c:	099b      	lsrs	r3, r3, #6
 800754e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	fb02 f303 	mul.w	r3, r2, r3
 8007558:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800755a:	4b0b      	ldr	r3, [pc, #44]	; (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800755c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007560:	0f1b      	lsrs	r3, r3, #28
 8007562:	f003 0307 	and.w	r3, r3, #7
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	fbb2 f3f3 	udiv	r3, r2, r3
 800756c:	617b      	str	r3, [r7, #20]
          break;
 800756e:	e002      	b.n	8007576 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007570:	2300      	movs	r3, #0
 8007572:	617b      	str	r3, [r7, #20]
          break;
 8007574:	bf00      	nop
        }
      }
      break;
 8007576:	bf00      	nop
    }
  }
  return frequency;
 8007578:	697b      	ldr	r3, [r7, #20]
}
 800757a:	4618      	mov	r0, r3
 800757c:	371c      	adds	r7, #28
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	40023800 	.word	0x40023800
 800758c:	00bb8000 	.word	0x00bb8000
 8007590:	007a1200 	.word	0x007a1200
 8007594:	00f42400 	.word	0x00f42400

08007598 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007598:	b084      	sub	sp, #16
 800759a:	b580      	push	{r7, lr}
 800759c:	b084      	sub	sp, #16
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
 80075a2:	f107 001c 	add.w	r0, r7, #28
 80075a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d122      	bne.n	80075f6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80075c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80075d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d105      	bne.n	80075ea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f9c0 	bl	8007970 <USB_CoreReset>
 80075f0:	4603      	mov	r3, r0
 80075f2:	73fb      	strb	r3, [r7, #15]
 80075f4:	e01a      	b.n	800762c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f9b4 	bl	8007970 <USB_CoreReset>
 8007608:	4603      	mov	r3, r0
 800760a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800760c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800760e:	2b00      	cmp	r3, #0
 8007610:	d106      	bne.n	8007620 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007616:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	639a      	str	r2, [r3, #56]	; 0x38
 800761e:	e005      	b.n	800762c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007624:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800762c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762e:	2b01      	cmp	r3, #1
 8007630:	d10b      	bne.n	800764a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	f043 0206 	orr.w	r2, r3, #6
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	f043 0220 	orr.w	r2, r3, #32
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800764a:	7bfb      	ldrb	r3, [r7, #15]
}
 800764c:	4618      	mov	r0, r3
 800764e:	3710      	adds	r7, #16
 8007650:	46bd      	mov	sp, r7
 8007652:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007656:	b004      	add	sp, #16
 8007658:	4770      	bx	lr

0800765a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800765a:	b480      	push	{r7}
 800765c:	b083      	sub	sp, #12
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f043 0201 	orr.w	r2, r3, #1
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	f023 0201 	bic.w	r2, r3, #1
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	370c      	adds	r7, #12
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b084      	sub	sp, #16
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
 80076a6:	460b      	mov	r3, r1
 80076a8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80076aa:	2300      	movs	r3, #0
 80076ac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80076ba:	78fb      	ldrb	r3, [r7, #3]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d115      	bne.n	80076ec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80076cc:	2001      	movs	r0, #1
 80076ce:	f7fa fc97 	bl	8002000 <HAL_Delay>
      ms++;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	3301      	adds	r3, #1
 80076d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 f93a 	bl	8007952 <USB_GetMode>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d01e      	beq.n	8007722 <USB_SetCurrentMode+0x84>
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2b31      	cmp	r3, #49	; 0x31
 80076e8:	d9f0      	bls.n	80076cc <USB_SetCurrentMode+0x2e>
 80076ea:	e01a      	b.n	8007722 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80076ec:	78fb      	ldrb	r3, [r7, #3]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d115      	bne.n	800771e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80076fe:	2001      	movs	r0, #1
 8007700:	f7fa fc7e 	bl	8002000 <HAL_Delay>
      ms++;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	3301      	adds	r3, #1
 8007708:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f921 	bl	8007952 <USB_GetMode>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d005      	beq.n	8007722 <USB_SetCurrentMode+0x84>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2b31      	cmp	r3, #49	; 0x31
 800771a:	d9f0      	bls.n	80076fe <USB_SetCurrentMode+0x60>
 800771c:	e001      	b.n	8007722 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	e005      	b.n	800772e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2b32      	cmp	r3, #50	; 0x32
 8007726:	d101      	bne.n	800772c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	e000      	b.n	800772e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
	...

08007738 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007742:	2300      	movs	r3, #0
 8007744:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	3301      	adds	r3, #1
 800774a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	4a13      	ldr	r2, [pc, #76]	; (800779c <USB_FlushTxFifo+0x64>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d901      	bls.n	8007758 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007754:	2303      	movs	r3, #3
 8007756:	e01b      	b.n	8007790 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	2b00      	cmp	r3, #0
 800775e:	daf2      	bge.n	8007746 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007760:	2300      	movs	r3, #0
 8007762:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	019b      	lsls	r3, r3, #6
 8007768:	f043 0220 	orr.w	r2, r3, #32
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	3301      	adds	r3, #1
 8007774:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	4a08      	ldr	r2, [pc, #32]	; (800779c <USB_FlushTxFifo+0x64>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d901      	bls.n	8007782 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	e006      	b.n	8007790 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	f003 0320 	and.w	r3, r3, #32
 800778a:	2b20      	cmp	r3, #32
 800778c:	d0f0      	beq.n	8007770 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3714      	adds	r7, #20
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr
 800779c:	00030d40 	.word	0x00030d40

080077a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077a8:	2300      	movs	r3, #0
 80077aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	3301      	adds	r3, #1
 80077b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	4a11      	ldr	r2, [pc, #68]	; (80077fc <USB_FlushRxFifo+0x5c>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d901      	bls.n	80077be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e018      	b.n	80077f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	daf2      	bge.n	80077ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80077c6:	2300      	movs	r3, #0
 80077c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2210      	movs	r2, #16
 80077ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	3301      	adds	r3, #1
 80077d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	4a08      	ldr	r2, [pc, #32]	; (80077fc <USB_FlushRxFifo+0x5c>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d901      	bls.n	80077e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80077de:	2303      	movs	r3, #3
 80077e0:	e006      	b.n	80077f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	f003 0310 	and.w	r3, r3, #16
 80077ea:	2b10      	cmp	r3, #16
 80077ec:	d0f0      	beq.n	80077d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3714      	adds	r7, #20
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr
 80077fc:	00030d40 	.word	0x00030d40

08007800 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007800:	b480      	push	{r7}
 8007802:	b089      	sub	sp, #36	; 0x24
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	4611      	mov	r1, r2
 800780c:	461a      	mov	r2, r3
 800780e:	460b      	mov	r3, r1
 8007810:	71fb      	strb	r3, [r7, #7]
 8007812:	4613      	mov	r3, r2
 8007814:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800781e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007822:	2b00      	cmp	r3, #0
 8007824:	d123      	bne.n	800786e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007826:	88bb      	ldrh	r3, [r7, #4]
 8007828:	3303      	adds	r3, #3
 800782a:	089b      	lsrs	r3, r3, #2
 800782c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800782e:	2300      	movs	r3, #0
 8007830:	61bb      	str	r3, [r7, #24]
 8007832:	e018      	b.n	8007866 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007834:	79fb      	ldrb	r3, [r7, #7]
 8007836:	031a      	lsls	r2, r3, #12
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	4413      	add	r3, r2
 800783c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007840:	461a      	mov	r2, r3
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	3301      	adds	r3, #1
 800784c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	3301      	adds	r3, #1
 8007852:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	3301      	adds	r3, #1
 8007858:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	3301      	adds	r3, #1
 800785e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	3301      	adds	r3, #1
 8007864:	61bb      	str	r3, [r7, #24]
 8007866:	69ba      	ldr	r2, [r7, #24]
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	429a      	cmp	r2, r3
 800786c:	d3e2      	bcc.n	8007834 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	3724      	adds	r7, #36	; 0x24
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800787c:	b480      	push	{r7}
 800787e:	b08b      	sub	sp, #44	; 0x2c
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	4613      	mov	r3, r2
 8007888:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007892:	88fb      	ldrh	r3, [r7, #6]
 8007894:	089b      	lsrs	r3, r3, #2
 8007896:	b29b      	uxth	r3, r3
 8007898:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800789a:	88fb      	ldrh	r3, [r7, #6]
 800789c:	f003 0303 	and.w	r3, r3, #3
 80078a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80078a2:	2300      	movs	r3, #0
 80078a4:	623b      	str	r3, [r7, #32]
 80078a6:	e014      	b.n	80078d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80078b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b6:	3301      	adds	r3, #1
 80078b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80078ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078bc:	3301      	adds	r3, #1
 80078be:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c2:	3301      	adds	r3, #1
 80078c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80078c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c8:	3301      	adds	r3, #1
 80078ca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80078cc:	6a3b      	ldr	r3, [r7, #32]
 80078ce:	3301      	adds	r3, #1
 80078d0:	623b      	str	r3, [r7, #32]
 80078d2:	6a3a      	ldr	r2, [r7, #32]
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d3e6      	bcc.n	80078a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80078da:	8bfb      	ldrh	r3, [r7, #30]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d01e      	beq.n	800791e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80078e0:	2300      	movs	r3, #0
 80078e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078ea:	461a      	mov	r2, r3
 80078ec:	f107 0310 	add.w	r3, r7, #16
 80078f0:	6812      	ldr	r2, [r2, #0]
 80078f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80078f4:	693a      	ldr	r2, [r7, #16]
 80078f6:	6a3b      	ldr	r3, [r7, #32]
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	00db      	lsls	r3, r3, #3
 80078fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007900:	b2da      	uxtb	r2, r3
 8007902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007904:	701a      	strb	r2, [r3, #0]
      i++;
 8007906:	6a3b      	ldr	r3, [r7, #32]
 8007908:	3301      	adds	r3, #1
 800790a:	623b      	str	r3, [r7, #32]
      pDest++;
 800790c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790e:	3301      	adds	r3, #1
 8007910:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007912:	8bfb      	ldrh	r3, [r7, #30]
 8007914:	3b01      	subs	r3, #1
 8007916:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007918:	8bfb      	ldrh	r3, [r7, #30]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1ea      	bne.n	80078f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800791e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007920:	4618      	mov	r0, r3
 8007922:	372c      	adds	r7, #44	; 0x2c
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	695b      	ldr	r3, [r3, #20]
 8007938:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	699b      	ldr	r3, [r3, #24]
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	4013      	ands	r3, r2
 8007942:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007944:	68fb      	ldr	r3, [r7, #12]
}
 8007946:	4618      	mov	r0, r3
 8007948:	3714      	adds	r7, #20
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr

08007952 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007952:	b480      	push	{r7}
 8007954:	b083      	sub	sp, #12
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	695b      	ldr	r3, [r3, #20]
 800795e:	f003 0301 	and.w	r3, r3, #1
}
 8007962:	4618      	mov	r0, r3
 8007964:	370c      	adds	r7, #12
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
	...

08007970 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007978:	2300      	movs	r3, #0
 800797a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	3301      	adds	r3, #1
 8007980:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	4a13      	ldr	r2, [pc, #76]	; (80079d4 <USB_CoreReset+0x64>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d901      	bls.n	800798e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800798a:	2303      	movs	r3, #3
 800798c:	e01b      	b.n	80079c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	2b00      	cmp	r3, #0
 8007994:	daf2      	bge.n	800797c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007996:	2300      	movs	r3, #0
 8007998:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	f043 0201 	orr.w	r2, r3, #1
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	3301      	adds	r3, #1
 80079aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	4a09      	ldr	r2, [pc, #36]	; (80079d4 <USB_CoreReset+0x64>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d901      	bls.n	80079b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e006      	b.n	80079c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	f003 0301 	and.w	r3, r3, #1
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d0f0      	beq.n	80079a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3714      	adds	r7, #20
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	00030d40 	.word	0x00030d40

080079d8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80079d8:	b084      	sub	sp, #16
 80079da:	b580      	push	{r7, lr}
 80079dc:	b086      	sub	sp, #24
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
 80079e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80079e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80079ea:	2300      	movs	r3, #0
 80079ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079f8:	461a      	mov	r2, r3
 80079fa:	2300      	movs	r3, #0
 80079fc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a02:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a0e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d018      	beq.n	8007a60 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d10a      	bne.n	8007a4a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007a42:	f043 0304 	orr.w	r3, r3, #4
 8007a46:	6013      	str	r3, [r2, #0]
 8007a48:	e014      	b.n	8007a74 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007a58:	f023 0304 	bic.w	r3, r3, #4
 8007a5c:	6013      	str	r3, [r2, #0]
 8007a5e:	e009      	b.n	8007a74 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007a6e:	f023 0304 	bic.w	r3, r3, #4
 8007a72:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007a74:	2110      	movs	r1, #16
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f7ff fe5e 	bl	8007738 <USB_FlushTxFifo>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d001      	beq.n	8007a86 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f7ff fe8a 	bl	80077a0 <USB_FlushRxFifo>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007a96:	2300      	movs	r3, #0
 8007a98:	613b      	str	r3, [r7, #16]
 8007a9a:	e015      	b.n	8007ac8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	015a      	lsls	r2, r3, #5
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8007aae:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	015a      	lsls	r2, r3, #5
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007abc:	461a      	mov	r2, r3
 8007abe:	2300      	movs	r3, #0
 8007ac0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	613b      	str	r3, [r7, #16]
 8007ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aca:	693a      	ldr	r2, [r7, #16]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d3e5      	bcc.n	8007a9c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8007adc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00b      	beq.n	8007b02 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007af0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a13      	ldr	r2, [pc, #76]	; (8007b44 <USB_HostInit+0x16c>)
 8007af6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a13      	ldr	r2, [pc, #76]	; (8007b48 <USB_HostInit+0x170>)
 8007afc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007b00:	e009      	b.n	8007b16 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2280      	movs	r2, #128	; 0x80
 8007b06:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a10      	ldr	r2, [pc, #64]	; (8007b4c <USB_HostInit+0x174>)
 8007b0c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a0f      	ldr	r2, [pc, #60]	; (8007b50 <USB_HostInit+0x178>)
 8007b12:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d105      	bne.n	8007b28 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	699b      	ldr	r3, [r3, #24]
 8007b20:	f043 0210 	orr.w	r2, r3, #16
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	699a      	ldr	r2, [r3, #24]
 8007b2c:	4b09      	ldr	r3, [pc, #36]	; (8007b54 <USB_HostInit+0x17c>)
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3718      	adds	r7, #24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b40:	b004      	add	sp, #16
 8007b42:	4770      	bx	lr
 8007b44:	01000200 	.word	0x01000200
 8007b48:	00e00300 	.word	0x00e00300
 8007b4c:	00600080 	.word	0x00600080
 8007b50:	004000e0 	.word	0x004000e0
 8007b54:	a3200008 	.word	0xa3200008

08007b58 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	460b      	mov	r3, r1
 8007b62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007b76:	f023 0303 	bic.w	r3, r3, #3
 8007b7a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	78fb      	ldrb	r3, [r7, #3]
 8007b86:	f003 0303 	and.w	r3, r3, #3
 8007b8a:	68f9      	ldr	r1, [r7, #12]
 8007b8c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007b90:	4313      	orrs	r3, r2
 8007b92:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007b94:	78fb      	ldrb	r3, [r7, #3]
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d107      	bne.n	8007baa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007ba6:	6053      	str	r3, [r2, #4]
 8007ba8:	e009      	b.n	8007bbe <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007baa:	78fb      	ldrb	r3, [r7, #3]
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	d106      	bne.n	8007bbe <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	f241 7370 	movw	r3, #6000	; 0x1770
 8007bbc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3714      	adds	r7, #20
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007bec:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bfa:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007bfc:	2064      	movs	r0, #100	; 0x64
 8007bfe:	f7fa f9ff 	bl	8002000 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007c0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c0e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007c10:	200a      	movs	r0, #10
 8007c12:	f7fa f9f5 	bl	8002000 <HAL_Delay>

  return HAL_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3710      	adds	r7, #16
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	460b      	mov	r3, r1
 8007c2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007c30:	2300      	movs	r3, #0
 8007c32:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007c44:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d109      	bne.n	8007c64 <USB_DriveVbus+0x44>
 8007c50:	78fb      	ldrb	r3, [r7, #3]
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d106      	bne.n	8007c64 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	68fa      	ldr	r2, [r7, #12]
 8007c5a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007c5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007c62:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c6e:	d109      	bne.n	8007c84 <USB_DriveVbus+0x64>
 8007c70:	78fb      	ldrb	r3, [r7, #3]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d106      	bne.n	8007c84 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007c7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c82:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007c92:	b480      	push	{r7}
 8007c94:	b085      	sub	sp, #20
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	0c5b      	lsrs	r3, r3, #17
 8007cb0:	f003 0303 	and.w	r3, r3, #3
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3714      	adds	r7, #20
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	b29b      	uxth	r3, r3
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3714      	adds	r7, #20
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
	...

08007ce4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b088      	sub	sp, #32
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	4608      	mov	r0, r1
 8007cee:	4611      	mov	r1, r2
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	70fb      	strb	r3, [r7, #3]
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	70bb      	strb	r3, [r7, #2]
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007d06:	78fb      	ldrb	r3, [r7, #3]
 8007d08:	015a      	lsls	r2, r3, #5
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d12:	461a      	mov	r2, r3
 8007d14:	f04f 33ff 	mov.w	r3, #4294967295
 8007d18:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007d1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007d1e:	2b03      	cmp	r3, #3
 8007d20:	d87e      	bhi.n	8007e20 <USB_HC_Init+0x13c>
 8007d22:	a201      	add	r2, pc, #4	; (adr r2, 8007d28 <USB_HC_Init+0x44>)
 8007d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d28:	08007d39 	.word	0x08007d39
 8007d2c:	08007de3 	.word	0x08007de3
 8007d30:	08007d39 	.word	0x08007d39
 8007d34:	08007da5 	.word	0x08007da5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007d38:	78fb      	ldrb	r3, [r7, #3]
 8007d3a:	015a      	lsls	r2, r3, #5
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	4413      	add	r3, r2
 8007d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d44:	461a      	mov	r2, r3
 8007d46:	f240 439d 	movw	r3, #1181	; 0x49d
 8007d4a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007d4c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	da10      	bge.n	8007d76 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007d54:	78fb      	ldrb	r3, [r7, #3]
 8007d56:	015a      	lsls	r2, r3, #5
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	78fa      	ldrb	r2, [r7, #3]
 8007d64:	0151      	lsls	r1, r2, #5
 8007d66:	693a      	ldr	r2, [r7, #16]
 8007d68:	440a      	add	r2, r1
 8007d6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d72:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007d74:	e057      	b.n	8007e26 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d051      	beq.n	8007e26 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007d82:	78fb      	ldrb	r3, [r7, #3]
 8007d84:	015a      	lsls	r2, r3, #5
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	4413      	add	r3, r2
 8007d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	78fa      	ldrb	r2, [r7, #3]
 8007d92:	0151      	lsls	r1, r2, #5
 8007d94:	693a      	ldr	r2, [r7, #16]
 8007d96:	440a      	add	r2, r1
 8007d98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d9c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007da0:	60d3      	str	r3, [r2, #12]
      break;
 8007da2:	e040      	b.n	8007e26 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007da4:	78fb      	ldrb	r3, [r7, #3]
 8007da6:	015a      	lsls	r2, r3, #5
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	4413      	add	r3, r2
 8007dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007db0:	461a      	mov	r2, r3
 8007db2:	f240 639d 	movw	r3, #1693	; 0x69d
 8007db6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007db8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	da34      	bge.n	8007e2a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007dc0:	78fb      	ldrb	r3, [r7, #3]
 8007dc2:	015a      	lsls	r2, r3, #5
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dcc:	68db      	ldr	r3, [r3, #12]
 8007dce:	78fa      	ldrb	r2, [r7, #3]
 8007dd0:	0151      	lsls	r1, r2, #5
 8007dd2:	693a      	ldr	r2, [r7, #16]
 8007dd4:	440a      	add	r2, r1
 8007dd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dde:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007de0:	e023      	b.n	8007e2a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007de2:	78fb      	ldrb	r3, [r7, #3]
 8007de4:	015a      	lsls	r2, r3, #5
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	4413      	add	r3, r2
 8007dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dee:	461a      	mov	r2, r3
 8007df0:	f240 2325 	movw	r3, #549	; 0x225
 8007df4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007df6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	da17      	bge.n	8007e2e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007dfe:	78fb      	ldrb	r3, [r7, #3]
 8007e00:	015a      	lsls	r2, r3, #5
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	4413      	add	r3, r2
 8007e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	78fa      	ldrb	r2, [r7, #3]
 8007e0e:	0151      	lsls	r1, r2, #5
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	440a      	add	r2, r1
 8007e14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e18:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007e1c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007e1e:	e006      	b.n	8007e2e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	77fb      	strb	r3, [r7, #31]
      break;
 8007e24:	e004      	b.n	8007e30 <USB_HC_Init+0x14c>
      break;
 8007e26:	bf00      	nop
 8007e28:	e002      	b.n	8007e30 <USB_HC_Init+0x14c>
      break;
 8007e2a:	bf00      	nop
 8007e2c:	e000      	b.n	8007e30 <USB_HC_Init+0x14c>
      break;
 8007e2e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007e30:	78fb      	ldrb	r3, [r7, #3]
 8007e32:	015a      	lsls	r2, r3, #5
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	4413      	add	r3, r2
 8007e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	78fa      	ldrb	r2, [r7, #3]
 8007e40:	0151      	lsls	r1, r2, #5
 8007e42:	693a      	ldr	r2, [r7, #16]
 8007e44:	440a      	add	r2, r1
 8007e46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e4a:	f043 0302 	orr.w	r3, r3, #2
 8007e4e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e56:	699a      	ldr	r2, [r3, #24]
 8007e58:	78fb      	ldrb	r3, [r7, #3]
 8007e5a:	f003 030f 	and.w	r3, r3, #15
 8007e5e:	2101      	movs	r1, #1
 8007e60:	fa01 f303 	lsl.w	r3, r1, r3
 8007e64:	6939      	ldr	r1, [r7, #16]
 8007e66:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	699b      	ldr	r3, [r3, #24]
 8007e72:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007e7a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	da03      	bge.n	8007e8a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007e82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e86:	61bb      	str	r3, [r7, #24]
 8007e88:	e001      	b.n	8007e8e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f7ff feff 	bl	8007c92 <USB_GetHostSpeed>
 8007e94:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007e96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d106      	bne.n	8007eac <USB_HC_Init+0x1c8>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2b02      	cmp	r3, #2
 8007ea2:	d003      	beq.n	8007eac <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007ea4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007ea8:	617b      	str	r3, [r7, #20]
 8007eaa:	e001      	b.n	8007eb0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007eac:	2300      	movs	r3, #0
 8007eae:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007eb0:	787b      	ldrb	r3, [r7, #1]
 8007eb2:	059b      	lsls	r3, r3, #22
 8007eb4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007eb8:	78bb      	ldrb	r3, [r7, #2]
 8007eba:	02db      	lsls	r3, r3, #11
 8007ebc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007ec0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007ec2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007ec6:	049b      	lsls	r3, r3, #18
 8007ec8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007ecc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007ece:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007ed0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007ed4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007eda:	78fb      	ldrb	r3, [r7, #3]
 8007edc:	0159      	lsls	r1, r3, #5
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	440b      	add	r3, r1
 8007ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ee6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007eec:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007eee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007ef2:	2b03      	cmp	r3, #3
 8007ef4:	d003      	beq.n	8007efe <USB_HC_Init+0x21a>
 8007ef6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d10f      	bne.n	8007f1e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007efe:	78fb      	ldrb	r3, [r7, #3]
 8007f00:	015a      	lsls	r2, r3, #5
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	4413      	add	r3, r2
 8007f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	78fa      	ldrb	r2, [r7, #3]
 8007f0e:	0151      	lsls	r1, r2, #5
 8007f10:	693a      	ldr	r2, [r7, #16]
 8007f12:	440a      	add	r2, r1
 8007f14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f1c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007f1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3720      	adds	r7, #32
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b08c      	sub	sp, #48	; 0x30
 8007f2c:	af02      	add	r7, sp, #8
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	4613      	mov	r3, r2
 8007f34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	785b      	ldrb	r3, [r3, #1]
 8007f3e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007f40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f44:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d02d      	beq.n	8007fae <USB_HC_StartXfer+0x86>
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	791b      	ldrb	r3, [r3, #4]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d129      	bne.n	8007fae <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007f5a:	79fb      	ldrb	r3, [r7, #7]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d117      	bne.n	8007f90 <USB_HC_StartXfer+0x68>
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	79db      	ldrb	r3, [r3, #7]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d003      	beq.n	8007f70 <USB_HC_StartXfer+0x48>
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	79db      	ldrb	r3, [r3, #7]
 8007f6c:	2b02      	cmp	r3, #2
 8007f6e:	d10f      	bne.n	8007f90 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	015a      	lsls	r2, r3, #5
 8007f74:	6a3b      	ldr	r3, [r7, #32]
 8007f76:	4413      	add	r3, r2
 8007f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	69fa      	ldr	r2, [r7, #28]
 8007f80:	0151      	lsls	r1, r2, #5
 8007f82:	6a3a      	ldr	r2, [r7, #32]
 8007f84:	440a      	add	r2, r1
 8007f86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f8e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007f90:	79fb      	ldrb	r3, [r7, #7]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d10b      	bne.n	8007fae <USB_HC_StartXfer+0x86>
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	795b      	ldrb	r3, [r3, #5]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d107      	bne.n	8007fae <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	785b      	ldrb	r3, [r3, #1]
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	68f8      	ldr	r0, [r7, #12]
 8007fa6:	f000 fa0f 	bl	80083c8 <USB_DoPing>
      return HAL_OK;
 8007faa:	2300      	movs	r3, #0
 8007fac:	e0f8      	b.n	80081a0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	695b      	ldr	r3, [r3, #20]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d018      	beq.n	8007fe8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	695b      	ldr	r3, [r3, #20]
 8007fba:	68ba      	ldr	r2, [r7, #8]
 8007fbc:	8912      	ldrh	r2, [r2, #8]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	8912      	ldrh	r2, [r2, #8]
 8007fc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fca:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007fcc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007fce:	8b7b      	ldrh	r3, [r7, #26]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d90b      	bls.n	8007fec <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007fd4:	8b7b      	ldrh	r3, [r7, #26]
 8007fd6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007fd8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007fda:	68ba      	ldr	r2, [r7, #8]
 8007fdc:	8912      	ldrh	r2, [r2, #8]
 8007fde:	fb03 f202 	mul.w	r2, r3, r2
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	611a      	str	r2, [r3, #16]
 8007fe6:	e001      	b.n	8007fec <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	78db      	ldrb	r3, [r3, #3]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d007      	beq.n	8008004 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007ff4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	8912      	ldrh	r2, [r2, #8]
 8007ffa:	fb03 f202 	mul.w	r2, r3, r2
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	611a      	str	r2, [r3, #16]
 8008002:	e003      	b.n	800800c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	695a      	ldr	r2, [r3, #20]
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008014:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008016:	04d9      	lsls	r1, r3, #19
 8008018:	4b63      	ldr	r3, [pc, #396]	; (80081a8 <USB_HC_StartXfer+0x280>)
 800801a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800801c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	7a9b      	ldrb	r3, [r3, #10]
 8008022:	075b      	lsls	r3, r3, #29
 8008024:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008028:	69f9      	ldr	r1, [r7, #28]
 800802a:	0148      	lsls	r0, r1, #5
 800802c:	6a39      	ldr	r1, [r7, #32]
 800802e:	4401      	add	r1, r0
 8008030:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008034:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008036:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008038:	79fb      	ldrb	r3, [r7, #7]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d009      	beq.n	8008052 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	68d9      	ldr	r1, [r3, #12]
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	015a      	lsls	r2, r3, #5
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	4413      	add	r3, r2
 800804a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800804e:	460a      	mov	r2, r1
 8008050:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008052:	6a3b      	ldr	r3, [r7, #32]
 8008054:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	f003 0301 	and.w	r3, r3, #1
 800805e:	2b00      	cmp	r3, #0
 8008060:	bf0c      	ite	eq
 8008062:	2301      	moveq	r3, #1
 8008064:	2300      	movne	r3, #0
 8008066:	b2db      	uxtb	r3, r3
 8008068:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	015a      	lsls	r2, r3, #5
 800806e:	6a3b      	ldr	r3, [r7, #32]
 8008070:	4413      	add	r3, r2
 8008072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	69fa      	ldr	r2, [r7, #28]
 800807a:	0151      	lsls	r1, r2, #5
 800807c:	6a3a      	ldr	r2, [r7, #32]
 800807e:	440a      	add	r2, r1
 8008080:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008084:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008088:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	015a      	lsls	r2, r3, #5
 800808e:	6a3b      	ldr	r3, [r7, #32]
 8008090:	4413      	add	r3, r2
 8008092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	7e7b      	ldrb	r3, [r7, #25]
 800809a:	075b      	lsls	r3, r3, #29
 800809c:	69f9      	ldr	r1, [r7, #28]
 800809e:	0148      	lsls	r0, r1, #5
 80080a0:	6a39      	ldr	r1, [r7, #32]
 80080a2:	4401      	add	r1, r0
 80080a4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80080a8:	4313      	orrs	r3, r2
 80080aa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	015a      	lsls	r2, r3, #5
 80080b0:	6a3b      	ldr	r3, [r7, #32]
 80080b2:	4413      	add	r3, r2
 80080b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80080c2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	78db      	ldrb	r3, [r3, #3]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d004      	beq.n	80080d6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080d2:	613b      	str	r3, [r7, #16]
 80080d4:	e003      	b.n	80080de <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80080dc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80080e4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	015a      	lsls	r2, r3, #5
 80080ea:	6a3b      	ldr	r3, [r7, #32]
 80080ec:	4413      	add	r3, r2
 80080ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080f2:	461a      	mov	r2, r3
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80080f8:	79fb      	ldrb	r3, [r7, #7]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d001      	beq.n	8008102 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80080fe:	2300      	movs	r3, #0
 8008100:	e04e      	b.n	80081a0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	78db      	ldrb	r3, [r3, #3]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d149      	bne.n	800819e <USB_HC_StartXfer+0x276>
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	695b      	ldr	r3, [r3, #20]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d045      	beq.n	800819e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	79db      	ldrb	r3, [r3, #7]
 8008116:	2b03      	cmp	r3, #3
 8008118:	d830      	bhi.n	800817c <USB_HC_StartXfer+0x254>
 800811a:	a201      	add	r2, pc, #4	; (adr r2, 8008120 <USB_HC_StartXfer+0x1f8>)
 800811c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008120:	08008131 	.word	0x08008131
 8008124:	08008155 	.word	0x08008155
 8008128:	08008131 	.word	0x08008131
 800812c:	08008155 	.word	0x08008155
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	695b      	ldr	r3, [r3, #20]
 8008134:	3303      	adds	r3, #3
 8008136:	089b      	lsrs	r3, r3, #2
 8008138:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800813a:	8afa      	ldrh	r2, [r7, #22]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008140:	b29b      	uxth	r3, r3
 8008142:	429a      	cmp	r2, r3
 8008144:	d91c      	bls.n	8008180 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	699b      	ldr	r3, [r3, #24]
 800814a:	f043 0220 	orr.w	r2, r3, #32
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	619a      	str	r2, [r3, #24]
        }
        break;
 8008152:	e015      	b.n	8008180 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	695b      	ldr	r3, [r3, #20]
 8008158:	3303      	adds	r3, #3
 800815a:	089b      	lsrs	r3, r3, #2
 800815c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800815e:	8afa      	ldrh	r2, [r7, #22]
 8008160:	6a3b      	ldr	r3, [r7, #32]
 8008162:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	b29b      	uxth	r3, r3
 800816a:	429a      	cmp	r2, r3
 800816c:	d90a      	bls.n	8008184 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	699b      	ldr	r3, [r3, #24]
 8008172:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	619a      	str	r2, [r3, #24]
        }
        break;
 800817a:	e003      	b.n	8008184 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800817c:	bf00      	nop
 800817e:	e002      	b.n	8008186 <USB_HC_StartXfer+0x25e>
        break;
 8008180:	bf00      	nop
 8008182:	e000      	b.n	8008186 <USB_HC_StartXfer+0x25e>
        break;
 8008184:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	68d9      	ldr	r1, [r3, #12]
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	785a      	ldrb	r2, [r3, #1]
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	695b      	ldr	r3, [r3, #20]
 8008192:	b29b      	uxth	r3, r3
 8008194:	2000      	movs	r0, #0
 8008196:	9000      	str	r0, [sp, #0]
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f7ff fb31 	bl	8007800 <USB_WritePacket>
  }

  return HAL_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3728      	adds	r7, #40	; 0x28
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	1ff80000 	.word	0x1ff80000

080081ac <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081be:	695b      	ldr	r3, [r3, #20]
 80081c0:	b29b      	uxth	r3, r3
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3714      	adds	r7, #20
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr

080081ce <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80081ce:	b480      	push	{r7}
 80081d0:	b089      	sub	sp, #36	; 0x24
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
 80081d6:	460b      	mov	r3, r1
 80081d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80081de:	78fb      	ldrb	r3, [r7, #3]
 80081e0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80081e2:	2300      	movs	r3, #0
 80081e4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	015a      	lsls	r2, r3, #5
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	4413      	add	r3, r2
 80081ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	0c9b      	lsrs	r3, r3, #18
 80081f6:	f003 0303 	and.w	r3, r3, #3
 80081fa:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	015a      	lsls	r2, r3, #5
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	4413      	add	r3, r2
 8008204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	0fdb      	lsrs	r3, r3, #31
 800820c:	f003 0301 	and.w	r3, r3, #1
 8008210:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	f003 0320 	and.w	r3, r3, #32
 800821a:	2b20      	cmp	r3, #32
 800821c:	d104      	bne.n	8008228 <USB_HC_Halt+0x5a>
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d101      	bne.n	8008228 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008224:	2300      	movs	r3, #0
 8008226:	e0c8      	b.n	80083ba <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d002      	beq.n	8008234 <USB_HC_Halt+0x66>
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	2b02      	cmp	r3, #2
 8008232:	d163      	bne.n	80082fc <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008234:	69bb      	ldr	r3, [r7, #24]
 8008236:	015a      	lsls	r2, r3, #5
 8008238:	69fb      	ldr	r3, [r7, #28]
 800823a:	4413      	add	r3, r2
 800823c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	69ba      	ldr	r2, [r7, #24]
 8008244:	0151      	lsls	r1, r2, #5
 8008246:	69fa      	ldr	r2, [r7, #28]
 8008248:	440a      	add	r2, r1
 800824a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800824e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008252:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	f003 0320 	and.w	r3, r3, #32
 800825c:	2b00      	cmp	r3, #0
 800825e:	f040 80ab 	bne.w	80083b8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008266:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800826a:	2b00      	cmp	r3, #0
 800826c:	d133      	bne.n	80082d6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800826e:	69bb      	ldr	r3, [r7, #24]
 8008270:	015a      	lsls	r2, r3, #5
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	4413      	add	r3, r2
 8008276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	69ba      	ldr	r2, [r7, #24]
 800827e:	0151      	lsls	r1, r2, #5
 8008280:	69fa      	ldr	r2, [r7, #28]
 8008282:	440a      	add	r2, r1
 8008284:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008288:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800828c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	015a      	lsls	r2, r3, #5
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	4413      	add	r3, r2
 8008296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	69ba      	ldr	r2, [r7, #24]
 800829e:	0151      	lsls	r1, r2, #5
 80082a0:	69fa      	ldr	r2, [r7, #28]
 80082a2:	440a      	add	r2, r1
 80082a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082ac:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	3301      	adds	r3, #1
 80082b2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082ba:	d81d      	bhi.n	80082f8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	015a      	lsls	r2, r3, #5
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	4413      	add	r3, r2
 80082c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082d2:	d0ec      	beq.n	80082ae <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80082d4:	e070      	b.n	80083b8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80082d6:	69bb      	ldr	r3, [r7, #24]
 80082d8:	015a      	lsls	r2, r3, #5
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	4413      	add	r3, r2
 80082de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	69ba      	ldr	r2, [r7, #24]
 80082e6:	0151      	lsls	r1, r2, #5
 80082e8:	69fa      	ldr	r2, [r7, #28]
 80082ea:	440a      	add	r2, r1
 80082ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082f4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80082f6:	e05f      	b.n	80083b8 <USB_HC_Halt+0x1ea>
            break;
 80082f8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80082fa:	e05d      	b.n	80083b8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	015a      	lsls	r2, r3, #5
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	4413      	add	r3, r2
 8008304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	69ba      	ldr	r2, [r7, #24]
 800830c:	0151      	lsls	r1, r2, #5
 800830e:	69fa      	ldr	r2, [r7, #28]
 8008310:	440a      	add	r2, r1
 8008312:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008316:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800831a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008328:	2b00      	cmp	r3, #0
 800832a:	d133      	bne.n	8008394 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	015a      	lsls	r2, r3, #5
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	4413      	add	r3, r2
 8008334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	69ba      	ldr	r2, [r7, #24]
 800833c:	0151      	lsls	r1, r2, #5
 800833e:	69fa      	ldr	r2, [r7, #28]
 8008340:	440a      	add	r2, r1
 8008342:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008346:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800834a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	015a      	lsls	r2, r3, #5
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	4413      	add	r3, r2
 8008354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	69ba      	ldr	r2, [r7, #24]
 800835c:	0151      	lsls	r1, r2, #5
 800835e:	69fa      	ldr	r2, [r7, #28]
 8008360:	440a      	add	r2, r1
 8008362:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008366:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800836a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	3301      	adds	r3, #1
 8008370:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008378:	d81d      	bhi.n	80083b6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	015a      	lsls	r2, r3, #5
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	4413      	add	r3, r2
 8008382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800838c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008390:	d0ec      	beq.n	800836c <USB_HC_Halt+0x19e>
 8008392:	e011      	b.n	80083b8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	015a      	lsls	r2, r3, #5
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	4413      	add	r3, r2
 800839c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	69ba      	ldr	r2, [r7, #24]
 80083a4:	0151      	lsls	r1, r2, #5
 80083a6:	69fa      	ldr	r2, [r7, #28]
 80083a8:	440a      	add	r2, r1
 80083aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80083b2:	6013      	str	r3, [r2, #0]
 80083b4:	e000      	b.n	80083b8 <USB_HC_Halt+0x1ea>
          break;
 80083b6:	bf00      	nop
    }
  }

  return HAL_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3724      	adds	r7, #36	; 0x24
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
	...

080083c8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b087      	sub	sp, #28
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	460b      	mov	r3, r1
 80083d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80083d8:	78fb      	ldrb	r3, [r7, #3]
 80083da:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80083dc:	2301      	movs	r3, #1
 80083de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	04da      	lsls	r2, r3, #19
 80083e4:	4b15      	ldr	r3, [pc, #84]	; (800843c <USB_DoPing+0x74>)
 80083e6:	4013      	ands	r3, r2
 80083e8:	693a      	ldr	r2, [r7, #16]
 80083ea:	0151      	lsls	r1, r2, #5
 80083ec:	697a      	ldr	r2, [r7, #20]
 80083ee:	440a      	add	r2, r1
 80083f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80083f8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	015a      	lsls	r2, r3, #5
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	4413      	add	r3, r2
 8008402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008410:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008418:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	015a      	lsls	r2, r3, #5
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	4413      	add	r3, r2
 8008422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008426:	461a      	mov	r2, r3
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	371c      	adds	r7, #28
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	1ff80000 	.word	0x1ff80000

08008440 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b088      	sub	sp, #32
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008448:	2300      	movs	r3, #0
 800844a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008450:	2300      	movs	r3, #0
 8008452:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f7ff f911 	bl	800767c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800845a:	2110      	movs	r1, #16
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f7ff f96b 	bl	8007738 <USB_FlushTxFifo>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d001      	beq.n	800846c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f7ff f997 	bl	80077a0 <USB_FlushRxFifo>
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d001      	beq.n	800847c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800847c:	2300      	movs	r3, #0
 800847e:	61bb      	str	r3, [r7, #24]
 8008480:	e01f      	b.n	80084c2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008482:	69bb      	ldr	r3, [r7, #24]
 8008484:	015a      	lsls	r2, r3, #5
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	4413      	add	r3, r2
 800848a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008498:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084a0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80084a8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	015a      	lsls	r2, r3, #5
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	4413      	add	r3, r2
 80084b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084b6:	461a      	mov	r2, r3
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	3301      	adds	r3, #1
 80084c0:	61bb      	str	r3, [r7, #24]
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	2b0f      	cmp	r3, #15
 80084c6:	d9dc      	bls.n	8008482 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80084c8:	2300      	movs	r3, #0
 80084ca:	61bb      	str	r3, [r7, #24]
 80084cc:	e034      	b.n	8008538 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	015a      	lsls	r2, r3, #5
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	4413      	add	r3, r2
 80084d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084e4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80084ec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80084f4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	015a      	lsls	r2, r3, #5
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	4413      	add	r3, r2
 80084fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008502:	461a      	mov	r2, r3
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	3301      	adds	r3, #1
 800850c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008514:	d80c      	bhi.n	8008530 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	015a      	lsls	r2, r3, #5
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	4413      	add	r3, r2
 800851e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008528:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800852c:	d0ec      	beq.n	8008508 <USB_StopHost+0xc8>
 800852e:	e000      	b.n	8008532 <USB_StopHost+0xf2>
        break;
 8008530:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	3301      	adds	r3, #1
 8008536:	61bb      	str	r3, [r7, #24]
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	2b0f      	cmp	r3, #15
 800853c:	d9c7      	bls.n	80084ce <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008544:	461a      	mov	r2, r3
 8008546:	f04f 33ff 	mov.w	r3, #4294967295
 800854a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f04f 32ff 	mov.w	r2, #4294967295
 8008552:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f7ff f880 	bl	800765a <USB_EnableGlobalInt>

  return ret;
 800855a:	7ffb      	ldrb	r3, [r7, #31]
}
 800855c:	4618      	mov	r0, r3
 800855e:	3720      	adds	r7, #32
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8008568:	4904      	ldr	r1, [pc, #16]	; (800857c <MX_FATFS_Init+0x18>)
 800856a:	4805      	ldr	r0, [pc, #20]	; (8008580 <MX_FATFS_Init+0x1c>)
 800856c:	f006 fb36 	bl	800ebdc <FATFS_LinkDriver>
 8008570:	4603      	mov	r3, r0
 8008572:	461a      	mov	r2, r3
 8008574:	4b03      	ldr	r3, [pc, #12]	; (8008584 <MX_FATFS_Init+0x20>)
 8008576:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008578:	bf00      	nop
 800857a:	bd80      	pop	{r7, pc}
 800857c:	2000192c 	.word	0x2000192c
 8008580:	0800f7ec 	.word	0x0800f7ec
 8008584:	20001928 	.word	0x20001928

08008588 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008588:	b480      	push	{r7}
 800858a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800858c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800858e:	4618      	mov	r0, r3
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	4603      	mov	r3, r0
 80085a0:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80085a2:	2300      	movs	r3, #0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	4603      	mov	r3, r0
 80085b8:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80085be:	79fb      	ldrb	r3, [r7, #7]
 80085c0:	4619      	mov	r1, r3
 80085c2:	4808      	ldr	r0, [pc, #32]	; (80085e4 <USBH_status+0x34>)
 80085c4:	f000 fe32 	bl	800922c <USBH_MSC_UnitIsReady>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d002      	beq.n	80085d4 <USBH_status+0x24>
  {
    res = RES_OK;
 80085ce:	2300      	movs	r3, #0
 80085d0:	73fb      	strb	r3, [r7, #15]
 80085d2:	e001      	b.n	80085d8 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 80085d4:	2301      	movs	r3, #1
 80085d6:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80085d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	20001d98 	.word	0x20001d98

080085e8 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b094      	sub	sp, #80	; 0x50
 80085ec:	af02      	add	r7, sp, #8
 80085ee:	60b9      	str	r1, [r7, #8]
 80085f0:	607a      	str	r2, [r7, #4]
 80085f2:	603b      	str	r3, [r7, #0]
 80085f4:	4603      	mov	r3, r0
 80085f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80085fe:	7bf9      	ldrb	r1, [r7, #15]
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	9300      	str	r3, [sp, #0]
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	4813      	ldr	r0, [pc, #76]	; (8008658 <USBH_read+0x70>)
 800860a:	f000 fe59 	bl	80092c0 <USBH_MSC_Read>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d103      	bne.n	800861c <USBH_read+0x34>
  {
    res = RES_OK;
 8008614:	2300      	movs	r3, #0
 8008616:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800861a:	e017      	b.n	800864c <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800861c:	f107 0210 	add.w	r2, r7, #16
 8008620:	7bfb      	ldrb	r3, [r7, #15]
 8008622:	4619      	mov	r1, r3
 8008624:	480c      	ldr	r0, [pc, #48]	; (8008658 <USBH_read+0x70>)
 8008626:	f000 fe27 	bl	8009278 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800862a:	7f7b      	ldrb	r3, [r7, #29]
 800862c:	2b3a      	cmp	r3, #58	; 0x3a
 800862e:	d005      	beq.n	800863c <USBH_read+0x54>
 8008630:	2b3a      	cmp	r3, #58	; 0x3a
 8008632:	dc07      	bgt.n	8008644 <USBH_read+0x5c>
 8008634:	2b04      	cmp	r3, #4
 8008636:	d001      	beq.n	800863c <USBH_read+0x54>
 8008638:	2b28      	cmp	r3, #40	; 0x28
 800863a:	d103      	bne.n	8008644 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800863c:	2303      	movs	r3, #3
 800863e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008642:	e003      	b.n	800864c <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8008644:	2301      	movs	r3, #1
 8008646:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800864a:	bf00      	nop
    }
  }

  return res;
 800864c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008650:	4618      	mov	r0, r3
 8008652:	3748      	adds	r7, #72	; 0x48
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	20001d98 	.word	0x20001d98

0800865c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b094      	sub	sp, #80	; 0x50
 8008660:	af02      	add	r7, sp, #8
 8008662:	60b9      	str	r1, [r7, #8]
 8008664:	607a      	str	r2, [r7, #4]
 8008666:	603b      	str	r3, [r7, #0]
 8008668:	4603      	mov	r3, r0
 800866a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8008672:	7bf9      	ldrb	r1, [r7, #15]
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	4817      	ldr	r0, [pc, #92]	; (80086dc <USBH_write+0x80>)
 800867e:	f000 fe88 	bl	8009392 <USBH_MSC_Write>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d103      	bne.n	8008690 <USBH_write+0x34>
  {
    res = RES_OK;
 8008688:	2300      	movs	r3, #0
 800868a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800868e:	e01f      	b.n	80086d0 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008690:	f107 0210 	add.w	r2, r7, #16
 8008694:	7bfb      	ldrb	r3, [r7, #15]
 8008696:	4619      	mov	r1, r3
 8008698:	4810      	ldr	r0, [pc, #64]	; (80086dc <USBH_write+0x80>)
 800869a:	f000 fded 	bl	8009278 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800869e:	7f7b      	ldrb	r3, [r7, #29]
 80086a0:	2b3a      	cmp	r3, #58	; 0x3a
 80086a2:	d00d      	beq.n	80086c0 <USBH_write+0x64>
 80086a4:	2b3a      	cmp	r3, #58	; 0x3a
 80086a6:	dc0f      	bgt.n	80086c8 <USBH_write+0x6c>
 80086a8:	2b28      	cmp	r3, #40	; 0x28
 80086aa:	d009      	beq.n	80086c0 <USBH_write+0x64>
 80086ac:	2b28      	cmp	r3, #40	; 0x28
 80086ae:	dc0b      	bgt.n	80086c8 <USBH_write+0x6c>
 80086b0:	2b04      	cmp	r3, #4
 80086b2:	d005      	beq.n	80086c0 <USBH_write+0x64>
 80086b4:	2b27      	cmp	r3, #39	; 0x27
 80086b6:	d107      	bne.n	80086c8 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80086b8:	2302      	movs	r3, #2
 80086ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80086be:	e007      	b.n	80086d0 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 80086c0:	2303      	movs	r3, #3
 80086c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80086c6:	e003      	b.n	80086d0 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80086ce:	bf00      	nop
    }
  }

  return res;
 80086d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3748      	adds	r7, #72	; 0x48
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	20001d98 	.word	0x20001d98

080086e0 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b090      	sub	sp, #64	; 0x40
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	4603      	mov	r3, r0
 80086e8:	603a      	str	r2, [r7, #0]
 80086ea:	71fb      	strb	r3, [r7, #7]
 80086ec:	460b      	mov	r3, r1
 80086ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 80086f6:	79bb      	ldrb	r3, [r7, #6]
 80086f8:	2b03      	cmp	r3, #3
 80086fa:	d852      	bhi.n	80087a2 <USBH_ioctl+0xc2>
 80086fc:	a201      	add	r2, pc, #4	; (adr r2, 8008704 <USBH_ioctl+0x24>)
 80086fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008702:	bf00      	nop
 8008704:	08008715 	.word	0x08008715
 8008708:	0800871d 	.word	0x0800871d
 800870c:	08008747 	.word	0x08008747
 8008710:	08008773 	.word	0x08008773
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8008714:	2300      	movs	r3, #0
 8008716:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800871a:	e045      	b.n	80087a8 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800871c:	f107 0208 	add.w	r2, r7, #8
 8008720:	79fb      	ldrb	r3, [r7, #7]
 8008722:	4619      	mov	r1, r3
 8008724:	4823      	ldr	r0, [pc, #140]	; (80087b4 <USBH_ioctl+0xd4>)
 8008726:	f000 fda7 	bl	8009278 <USBH_MSC_GetLUNInfo>
 800872a:	4603      	mov	r3, r0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d106      	bne.n	800873e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8008730:	68fa      	ldr	r2, [r7, #12]
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008736:	2300      	movs	r3, #0
 8008738:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800873c:	e034      	b.n	80087a8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008744:	e030      	b.n	80087a8 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008746:	f107 0208 	add.w	r2, r7, #8
 800874a:	79fb      	ldrb	r3, [r7, #7]
 800874c:	4619      	mov	r1, r3
 800874e:	4819      	ldr	r0, [pc, #100]	; (80087b4 <USBH_ioctl+0xd4>)
 8008750:	f000 fd92 	bl	8009278 <USBH_MSC_GetLUNInfo>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d107      	bne.n	800876a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800875a:	8a3b      	ldrh	r3, [r7, #16]
 800875c:	461a      	mov	r2, r3
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008762:	2300      	movs	r3, #0
 8008764:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008768:	e01e      	b.n	80087a8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008770:	e01a      	b.n	80087a8 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008772:	f107 0208 	add.w	r2, r7, #8
 8008776:	79fb      	ldrb	r3, [r7, #7]
 8008778:	4619      	mov	r1, r3
 800877a:	480e      	ldr	r0, [pc, #56]	; (80087b4 <USBH_ioctl+0xd4>)
 800877c:	f000 fd7c 	bl	8009278 <USBH_MSC_GetLUNInfo>
 8008780:	4603      	mov	r3, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	d109      	bne.n	800879a <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8008786:	8a3b      	ldrh	r3, [r7, #16]
 8008788:	0a5b      	lsrs	r3, r3, #9
 800878a:	b29b      	uxth	r3, r3
 800878c:	461a      	mov	r2, r3
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008792:	2300      	movs	r3, #0
 8008794:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008798:	e006      	b.n	80087a8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80087a0:	e002      	b.n	80087a8 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 80087a2:	2304      	movs	r3, #4
 80087a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 80087a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3740      	adds	r7, #64	; 0x40
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	20001d98 	.word	0x20001d98

080087b8 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80087b8:	b590      	push	{r4, r7, lr}
 80087ba:	b089      	sub	sp, #36	; 0x24
 80087bc:	af04      	add	r7, sp, #16
 80087be:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087c6:	7919      	ldrb	r1, [r3, #4]
 80087c8:	2350      	movs	r3, #80	; 0x50
 80087ca:	2206      	movs	r2, #6
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f001 fc6b 	bl	800a0a8 <USBH_FindInterface>
 80087d2:	4603      	mov	r3, r0
 80087d4:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 80087d6:	7bfb      	ldrb	r3, [r7, #15]
 80087d8:	2bff      	cmp	r3, #255	; 0xff
 80087da:	d002      	beq.n	80087e2 <USBH_MSC_InterfaceInit+0x2a>
 80087dc:	7bfb      	ldrb	r3, [r7, #15]
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d901      	bls.n	80087e6 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80087e2:	2302      	movs	r3, #2
 80087e4:	e106      	b.n	80089f4 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 80087e6:	7bfb      	ldrb	r3, [r7, #15]
 80087e8:	4619      	mov	r1, r3
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f001 fc40 	bl	800a070 <USBH_SelectInterface>
 80087f0:	4603      	mov	r3, r0
 80087f2:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80087f4:	7bbb      	ldrb	r3, [r7, #14]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d001      	beq.n	80087fe <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 80087fa:	2302      	movs	r3, #2
 80087fc:	e0fa      	b.n	80089f4 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008804:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008808:	f006 fdf6 	bl	800f3f8 <malloc>
 800880c:	4603      	mov	r3, r0
 800880e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008816:	69db      	ldr	r3, [r3, #28]
 8008818:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d101      	bne.n	8008824 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8008820:	2302      	movs	r3, #2
 8008822:	e0e7      	b.n	80089f4 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008824:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008828:	2100      	movs	r1, #0
 800882a:	68b8      	ldr	r0, [r7, #8]
 800882c:	f006 fea0 	bl	800f570 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008830:	7bfb      	ldrb	r3, [r7, #15]
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	211a      	movs	r1, #26
 8008836:	fb01 f303 	mul.w	r3, r1, r3
 800883a:	4413      	add	r3, r2
 800883c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	b25b      	sxtb	r3, r3
 8008844:	2b00      	cmp	r3, #0
 8008846:	da16      	bge.n	8008876 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008848:	7bfb      	ldrb	r3, [r7, #15]
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	211a      	movs	r1, #26
 800884e:	fb01 f303 	mul.w	r3, r1, r3
 8008852:	4413      	add	r3, r2
 8008854:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008858:	781a      	ldrb	r2, [r3, #0]
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800885e:	7bfb      	ldrb	r3, [r7, #15]
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	211a      	movs	r1, #26
 8008864:	fb01 f303 	mul.w	r3, r1, r3
 8008868:	4413      	add	r3, r2
 800886a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800886e:	881a      	ldrh	r2, [r3, #0]
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	815a      	strh	r2, [r3, #10]
 8008874:	e015      	b.n	80088a2 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008876:	7bfb      	ldrb	r3, [r7, #15]
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	211a      	movs	r1, #26
 800887c:	fb01 f303 	mul.w	r3, r1, r3
 8008880:	4413      	add	r3, r2
 8008882:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008886:	781a      	ldrb	r2, [r3, #0]
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800888c:	7bfb      	ldrb	r3, [r7, #15]
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	211a      	movs	r1, #26
 8008892:	fb01 f303 	mul.w	r3, r1, r3
 8008896:	4413      	add	r3, r2
 8008898:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800889c:	881a      	ldrh	r2, [r3, #0]
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80088a2:	7bfb      	ldrb	r3, [r7, #15]
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	211a      	movs	r1, #26
 80088a8:	fb01 f303 	mul.w	r3, r1, r3
 80088ac:	4413      	add	r3, r2
 80088ae:	f203 3356 	addw	r3, r3, #854	; 0x356
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	b25b      	sxtb	r3, r3
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	da16      	bge.n	80088e8 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80088ba:	7bfb      	ldrb	r3, [r7, #15]
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	211a      	movs	r1, #26
 80088c0:	fb01 f303 	mul.w	r3, r1, r3
 80088c4:	4413      	add	r3, r2
 80088c6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80088ca:	781a      	ldrb	r2, [r3, #0]
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80088d0:	7bfb      	ldrb	r3, [r7, #15]
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	211a      	movs	r1, #26
 80088d6:	fb01 f303 	mul.w	r3, r1, r3
 80088da:	4413      	add	r3, r2
 80088dc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80088e0:	881a      	ldrh	r2, [r3, #0]
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	815a      	strh	r2, [r3, #10]
 80088e6:	e015      	b.n	8008914 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80088e8:	7bfb      	ldrb	r3, [r7, #15]
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	211a      	movs	r1, #26
 80088ee:	fb01 f303 	mul.w	r3, r1, r3
 80088f2:	4413      	add	r3, r2
 80088f4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80088f8:	781a      	ldrb	r2, [r3, #0]
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80088fe:	7bfb      	ldrb	r3, [r7, #15]
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	211a      	movs	r1, #26
 8008904:	fb01 f303 	mul.w	r3, r1, r3
 8008908:	4413      	add	r3, r2
 800890a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800890e:	881a      	ldrh	r2, [r3, #0]
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	2200      	movs	r2, #0
 8008918:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	2200      	movs	r2, #0
 800891e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	2200      	movs	r2, #0
 8008924:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	799b      	ldrb	r3, [r3, #6]
 800892a:	4619      	mov	r1, r3
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f002 fed8 	bl	800b6e2 <USBH_AllocPipe>
 8008932:	4603      	mov	r3, r0
 8008934:	461a      	mov	r2, r3
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	79db      	ldrb	r3, [r3, #7]
 800893e:	4619      	mov	r1, r3
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f002 fece 	bl	800b6e2 <USBH_AllocPipe>
 8008946:	4603      	mov	r3, r0
 8008948:	461a      	mov	r2, r3
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fdc4 	bl	80094dc <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	799b      	ldrb	r3, [r3, #6]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d01e      	beq.n	800899a <USBH_MSC_InterfaceInit+0x1e2>
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	891b      	ldrh	r3, [r3, #8]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d01a      	beq.n	800899a <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	7959      	ldrb	r1, [r3, #5]
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	7998      	ldrb	r0, [r3, #6]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008978:	68ba      	ldr	r2, [r7, #8]
 800897a:	8912      	ldrh	r2, [r2, #8]
 800897c:	9202      	str	r2, [sp, #8]
 800897e:	2202      	movs	r2, #2
 8008980:	9201      	str	r2, [sp, #4]
 8008982:	9300      	str	r3, [sp, #0]
 8008984:	4623      	mov	r3, r4
 8008986:	4602      	mov	r2, r0
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f002 fe7b 	bl	800b684 <USBH_OpenPipe>
 800898e:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	79db      	ldrb	r3, [r3, #7]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d02c      	beq.n	80089f2 <USBH_MSC_InterfaceInit+0x23a>
 8008998:	e001      	b.n	800899e <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 800899a:	2303      	movs	r3, #3
 800899c:	e02a      	b.n	80089f4 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	895b      	ldrh	r3, [r3, #10]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d025      	beq.n	80089f2 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	7919      	ldrb	r1, [r3, #4]
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	79d8      	ldrb	r0, [r3, #7]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	8952      	ldrh	r2, [r2, #10]
 80089be:	9202      	str	r2, [sp, #8]
 80089c0:	2202      	movs	r2, #2
 80089c2:	9201      	str	r2, [sp, #4]
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	4623      	mov	r3, r4
 80089c8:	4602      	mov	r2, r0
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f002 fe5a 	bl	800b684 <USBH_OpenPipe>
 80089d0:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	791b      	ldrb	r3, [r3, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	4619      	mov	r1, r3
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f006 fc58 	bl	800f290 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	795b      	ldrb	r3, [r3, #5]
 80089e4:	2200      	movs	r2, #0
 80089e6:	4619      	mov	r1, r3
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f006 fc51 	bl	800f290 <USBH_LL_SetToggle>

  return USBH_OK;
 80089ee:	2300      	movs	r3, #0
 80089f0:	e000      	b.n	80089f4 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 80089f2:	2303      	movs	r3, #3
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3714      	adds	r7, #20
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd90      	pop	{r4, r7, pc}

080089fc <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a0a:	69db      	ldr	r3, [r3, #28]
 8008a0c:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	795b      	ldrb	r3, [r3, #5]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d00e      	beq.n	8008a34 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	795b      	ldrb	r3, [r3, #5]
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f002 fe50 	bl	800b6c2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	795b      	ldrb	r3, [r3, #5]
 8008a26:	4619      	mov	r1, r3
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f002 fe7b 	bl	800b724 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2200      	movs	r2, #0
 8008a32:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	791b      	ldrb	r3, [r3, #4]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d00e      	beq.n	8008a5a <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	791b      	ldrb	r3, [r3, #4]
 8008a40:	4619      	mov	r1, r3
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f002 fe3d 	bl	800b6c2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	791b      	ldrb	r3, [r3, #4]
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f002 fe68 	bl	800b724 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2200      	movs	r2, #0
 8008a58:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a60:	69db      	ldr	r3, [r3, #28]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d00b      	beq.n	8008a7e <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a6c:	69db      	ldr	r3, [r3, #28]
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f006 fcca 	bl	800f408 <free>
    phost->pActiveClass->pData = 0U;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008a7e:	2300      	movs	r3, #0
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a96:	69db      	ldr	r3, [r3, #28]
 8008a98:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	7b9b      	ldrb	r3, [r3, #14]
 8008aa2:	2b03      	cmp	r3, #3
 8008aa4:	d041      	beq.n	8008b2a <USBH_MSC_ClassRequest+0xa2>
 8008aa6:	2b03      	cmp	r3, #3
 8008aa8:	dc4b      	bgt.n	8008b42 <USBH_MSC_ClassRequest+0xba>
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d001      	beq.n	8008ab2 <USBH_MSC_ClassRequest+0x2a>
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d147      	bne.n	8008b42 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 fcf1 	bl	800949e <USBH_MSC_BOT_REQ_GetMaxLUN>
 8008abc:	4603      	mov	r3, r0
 8008abe:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8008ac0:	7bfb      	ldrb	r3, [r7, #15]
 8008ac2:	2b03      	cmp	r3, #3
 8008ac4:	d104      	bne.n	8008ad0 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8008ad0:	7bfb      	ldrb	r3, [r7, #15]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d137      	bne.n	8008b46 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d804      	bhi.n	8008ae8 <USBH_MSC_ClassRequest+0x60>
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	b2da      	uxtb	r2, r3
 8008ae6:	e000      	b.n	8008aea <USBH_MSC_ClassRequest+0x62>
 8008ae8:	2202      	movs	r2, #2
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008aee:	2300      	movs	r3, #0
 8008af0:	73bb      	strb	r3, [r7, #14]
 8008af2:	e014      	b.n	8008b1e <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8008af4:	7bbb      	ldrb	r3, [r7, #14]
 8008af6:	68ba      	ldr	r2, [r7, #8]
 8008af8:	2134      	movs	r1, #52	; 0x34
 8008afa:	fb01 f303 	mul.w	r3, r1, r3
 8008afe:	4413      	add	r3, r2
 8008b00:	3392      	adds	r3, #146	; 0x92
 8008b02:	2202      	movs	r2, #2
 8008b04:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8008b06:	7bbb      	ldrb	r3, [r7, #14]
 8008b08:	68ba      	ldr	r2, [r7, #8]
 8008b0a:	2134      	movs	r1, #52	; 0x34
 8008b0c:	fb01 f303 	mul.w	r3, r1, r3
 8008b10:	4413      	add	r3, r2
 8008b12:	33c1      	adds	r3, #193	; 0xc1
 8008b14:	2200      	movs	r2, #0
 8008b16:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008b18:	7bbb      	ldrb	r3, [r7, #14]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	73bb      	strb	r3, [r7, #14]
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	7bba      	ldrb	r2, [r7, #14]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d3e5      	bcc.n	8008af4 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8008b28:	e00d      	b.n	8008b46 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8008b2a:	2100      	movs	r1, #0
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f002 f888 	bl	800ac42 <USBH_ClrFeature>
 8008b32:	4603      	mov	r3, r0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d108      	bne.n	8008b4a <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	7bda      	ldrb	r2, [r3, #15]
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	739a      	strb	r2, [r3, #14]
      }
      break;
 8008b40:	e003      	b.n	8008b4a <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8008b42:	bf00      	nop
 8008b44:	e002      	b.n	8008b4c <USBH_MSC_ClassRequest+0xc4>
      break;
 8008b46:	bf00      	nop
 8008b48:	e000      	b.n	8008b4c <USBH_MSC_ClassRequest+0xc4>
      break;
 8008b4a:	bf00      	nop
  }

  return status;
 8008b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
	...

08008b58 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b086      	sub	sp, #24
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b66:	69db      	ldr	r3, [r3, #28]
 8008b68:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8008b72:	2301      	movs	r3, #1
 8008b74:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	7b1b      	ldrb	r3, [r3, #12]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d003      	beq.n	8008b86 <USBH_MSC_Process+0x2e>
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	f000 8271 	beq.w	8009066 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8008b84:	e272      	b.n	800906c <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	429a      	cmp	r2, r3
 8008b94:	f080 824f 	bcs.w	8009036 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	693a      	ldr	r2, [r7, #16]
 8008ba2:	2334      	movs	r3, #52	; 0x34
 8008ba4:	fb01 f303 	mul.w	r3, r1, r3
 8008ba8:	4413      	add	r3, r2
 8008baa:	3391      	adds	r3, #145	; 0x91
 8008bac:	2201      	movs	r2, #1
 8008bae:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	693a      	ldr	r2, [r7, #16]
 8008bba:	2334      	movs	r3, #52	; 0x34
 8008bbc:	fb01 f303 	mul.w	r3, r1, r3
 8008bc0:	4413      	add	r3, r2
 8008bc2:	3390      	adds	r3, #144	; 0x90
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	2b08      	cmp	r3, #8
 8008bc8:	f200 8243 	bhi.w	8009052 <USBH_MSC_Process+0x4fa>
 8008bcc:	a201      	add	r2, pc, #4	; (adr r2, 8008bd4 <USBH_MSC_Process+0x7c>)
 8008bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd2:	bf00      	nop
 8008bd4:	08008bf9 	.word	0x08008bf9
 8008bd8:	08009053 	.word	0x08009053
 8008bdc:	08008cc1 	.word	0x08008cc1
 8008be0:	08008e45 	.word	0x08008e45
 8008be4:	08008c1f 	.word	0x08008c1f
 8008be8:	08008f11 	.word	0x08008f11
 8008bec:	08009053 	.word	0x08009053
 8008bf0:	08009053 	.word	0x08009053
 8008bf4:	08009025 	.word	0x08009025
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008bfe:	4619      	mov	r1, r3
 8008c00:	693a      	ldr	r2, [r7, #16]
 8008c02:	2334      	movs	r3, #52	; 0x34
 8008c04:	fb01 f303 	mul.w	r3, r1, r3
 8008c08:	4413      	add	r3, r2
 8008c0a:	3390      	adds	r3, #144	; 0x90
 8008c0c:	2204      	movs	r2, #4
 8008c0e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8008c1c:	e222      	b.n	8009064 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c24:	b2d9      	uxtb	r1, r3
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	2334      	movs	r3, #52	; 0x34
 8008c30:	fb02 f303 	mul.w	r3, r2, r3
 8008c34:	3398      	adds	r3, #152	; 0x98
 8008c36:	693a      	ldr	r2, [r7, #16]
 8008c38:	4413      	add	r3, r2
 8008c3a:	3307      	adds	r3, #7
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 ff6a 	bl	8009b18 <USBH_MSC_SCSI_Inquiry>
 8008c44:	4603      	mov	r3, r0
 8008c46:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008c48:	7bfb      	ldrb	r3, [r7, #15]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d10b      	bne.n	8008c66 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c54:	4619      	mov	r1, r3
 8008c56:	693a      	ldr	r2, [r7, #16]
 8008c58:	2334      	movs	r3, #52	; 0x34
 8008c5a:	fb01 f303 	mul.w	r3, r1, r3
 8008c5e:	4413      	add	r3, r2
 8008c60:	3390      	adds	r3, #144	; 0x90
 8008c62:	2202      	movs	r2, #2
 8008c64:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8008c66:	7bfb      	ldrb	r3, [r7, #15]
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	d10c      	bne.n	8008c86 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c72:	4619      	mov	r1, r3
 8008c74:	693a      	ldr	r2, [r7, #16]
 8008c76:	2334      	movs	r3, #52	; 0x34
 8008c78:	fb01 f303 	mul.w	r3, r1, r3
 8008c7c:	4413      	add	r3, r2
 8008c7e:	3390      	adds	r3, #144	; 0x90
 8008c80:	2205      	movs	r2, #5
 8008c82:	701a      	strb	r2, [r3, #0]
            break;
 8008c84:	e1e7      	b.n	8009056 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008c86:	7bfb      	ldrb	r3, [r7, #15]
 8008c88:	2b04      	cmp	r3, #4
 8008c8a:	f040 81e4 	bne.w	8009056 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c94:	4619      	mov	r1, r3
 8008c96:	693a      	ldr	r2, [r7, #16]
 8008c98:	2334      	movs	r3, #52	; 0x34
 8008c9a:	fb01 f303 	mul.w	r3, r1, r3
 8008c9e:	4413      	add	r3, r2
 8008ca0:	3390      	adds	r3, #144	; 0x90
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008cac:	4619      	mov	r1, r3
 8008cae:	693a      	ldr	r2, [r7, #16]
 8008cb0:	2334      	movs	r3, #52	; 0x34
 8008cb2:	fb01 f303 	mul.w	r3, r1, r3
 8008cb6:	4413      	add	r3, r2
 8008cb8:	3391      	adds	r3, #145	; 0x91
 8008cba:	2202      	movs	r2, #2
 8008cbc:	701a      	strb	r2, [r3, #0]
            break;
 8008cbe:	e1ca      	b.n	8009056 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	4619      	mov	r1, r3
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 fe66 	bl	800999c <USBH_MSC_SCSI_TestUnitReady>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8008cd4:	7bbb      	ldrb	r3, [r7, #14]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d149      	bne.n	8008d6e <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	693a      	ldr	r2, [r7, #16]
 8008ce4:	2334      	movs	r3, #52	; 0x34
 8008ce6:	fb01 f303 	mul.w	r3, r1, r3
 8008cea:	4413      	add	r3, r2
 8008cec:	3392      	adds	r3, #146	; 0x92
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d00c      	beq.n	8008d0e <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	693a      	ldr	r2, [r7, #16]
 8008cfe:	2334      	movs	r3, #52	; 0x34
 8008d00:	fb01 f303 	mul.w	r3, r1, r3
 8008d04:	4413      	add	r3, r2
 8008d06:	33c1      	adds	r3, #193	; 0xc1
 8008d08:	2201      	movs	r2, #1
 8008d0a:	701a      	strb	r2, [r3, #0]
 8008d0c:	e00b      	b.n	8008d26 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d14:	4619      	mov	r1, r3
 8008d16:	693a      	ldr	r2, [r7, #16]
 8008d18:	2334      	movs	r3, #52	; 0x34
 8008d1a:	fb01 f303 	mul.w	r3, r1, r3
 8008d1e:	4413      	add	r3, r2
 8008d20:	33c1      	adds	r3, #193	; 0xc1
 8008d22:	2200      	movs	r2, #0
 8008d24:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	693a      	ldr	r2, [r7, #16]
 8008d30:	2334      	movs	r3, #52	; 0x34
 8008d32:	fb01 f303 	mul.w	r3, r1, r3
 8008d36:	4413      	add	r3, r2
 8008d38:	3390      	adds	r3, #144	; 0x90
 8008d3a:	2203      	movs	r2, #3
 8008d3c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d44:	4619      	mov	r1, r3
 8008d46:	693a      	ldr	r2, [r7, #16]
 8008d48:	2334      	movs	r3, #52	; 0x34
 8008d4a:	fb01 f303 	mul.w	r3, r1, r3
 8008d4e:	4413      	add	r3, r2
 8008d50:	3391      	adds	r3, #145	; 0x91
 8008d52:	2200      	movs	r2, #0
 8008d54:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	693a      	ldr	r2, [r7, #16]
 8008d60:	2334      	movs	r3, #52	; 0x34
 8008d62:	fb01 f303 	mul.w	r3, r1, r3
 8008d66:	4413      	add	r3, r2
 8008d68:	3392      	adds	r3, #146	; 0x92
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8008d6e:	7bbb      	ldrb	r3, [r7, #14]
 8008d70:	2b02      	cmp	r3, #2
 8008d72:	d14a      	bne.n	8008e0a <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	693a      	ldr	r2, [r7, #16]
 8008d7e:	2334      	movs	r3, #52	; 0x34
 8008d80:	fb01 f303 	mul.w	r3, r1, r3
 8008d84:	4413      	add	r3, r2
 8008d86:	3392      	adds	r3, #146	; 0x92
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d00c      	beq.n	8008da8 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d94:	4619      	mov	r1, r3
 8008d96:	693a      	ldr	r2, [r7, #16]
 8008d98:	2334      	movs	r3, #52	; 0x34
 8008d9a:	fb01 f303 	mul.w	r3, r1, r3
 8008d9e:	4413      	add	r3, r2
 8008da0:	33c1      	adds	r3, #193	; 0xc1
 8008da2:	2201      	movs	r2, #1
 8008da4:	701a      	strb	r2, [r3, #0]
 8008da6:	e00b      	b.n	8008dc0 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008dae:	4619      	mov	r1, r3
 8008db0:	693a      	ldr	r2, [r7, #16]
 8008db2:	2334      	movs	r3, #52	; 0x34
 8008db4:	fb01 f303 	mul.w	r3, r1, r3
 8008db8:	4413      	add	r3, r2
 8008dba:	33c1      	adds	r3, #193	; 0xc1
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	693a      	ldr	r2, [r7, #16]
 8008dca:	2334      	movs	r3, #52	; 0x34
 8008dcc:	fb01 f303 	mul.w	r3, r1, r3
 8008dd0:	4413      	add	r3, r2
 8008dd2:	3390      	adds	r3, #144	; 0x90
 8008dd4:	2205      	movs	r2, #5
 8008dd6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008dde:	4619      	mov	r1, r3
 8008de0:	693a      	ldr	r2, [r7, #16]
 8008de2:	2334      	movs	r3, #52	; 0x34
 8008de4:	fb01 f303 	mul.w	r3, r1, r3
 8008de8:	4413      	add	r3, r2
 8008dea:	3391      	adds	r3, #145	; 0x91
 8008dec:	2201      	movs	r2, #1
 8008dee:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008df6:	4619      	mov	r1, r3
 8008df8:	693a      	ldr	r2, [r7, #16]
 8008dfa:	2334      	movs	r3, #52	; 0x34
 8008dfc:	fb01 f303 	mul.w	r3, r1, r3
 8008e00:	4413      	add	r3, r2
 8008e02:	3392      	adds	r3, #146	; 0x92
 8008e04:	2202      	movs	r2, #2
 8008e06:	701a      	strb	r2, [r3, #0]
            break;
 8008e08:	e127      	b.n	800905a <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8008e0a:	7bbb      	ldrb	r3, [r7, #14]
 8008e0c:	2b04      	cmp	r3, #4
 8008e0e:	f040 8124 	bne.w	800905a <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e18:	4619      	mov	r1, r3
 8008e1a:	693a      	ldr	r2, [r7, #16]
 8008e1c:	2334      	movs	r3, #52	; 0x34
 8008e1e:	fb01 f303 	mul.w	r3, r1, r3
 8008e22:	4413      	add	r3, r2
 8008e24:	3390      	adds	r3, #144	; 0x90
 8008e26:	2201      	movs	r2, #1
 8008e28:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e30:	4619      	mov	r1, r3
 8008e32:	693a      	ldr	r2, [r7, #16]
 8008e34:	2334      	movs	r3, #52	; 0x34
 8008e36:	fb01 f303 	mul.w	r3, r1, r3
 8008e3a:	4413      	add	r3, r2
 8008e3c:	3391      	adds	r3, #145	; 0x91
 8008e3e:	2202      	movs	r2, #2
 8008e40:	701a      	strb	r2, [r3, #0]
            break;
 8008e42:	e10a      	b.n	800905a <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e4a:	b2d9      	uxtb	r1, r3
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e52:	461a      	mov	r2, r3
 8008e54:	2334      	movs	r3, #52	; 0x34
 8008e56:	fb02 f303 	mul.w	r3, r2, r3
 8008e5a:	3390      	adds	r3, #144	; 0x90
 8008e5c:	693a      	ldr	r2, [r7, #16]
 8008e5e:	4413      	add	r3, r2
 8008e60:	3304      	adds	r3, #4
 8008e62:	461a      	mov	r2, r3
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fddc 	bl	8009a22 <USBH_MSC_SCSI_ReadCapacity>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008e6e:	7bfb      	ldrb	r3, [r7, #15]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d120      	bne.n	8008eb6 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	693a      	ldr	r2, [r7, #16]
 8008e7e:	2334      	movs	r3, #52	; 0x34
 8008e80:	fb01 f303 	mul.w	r3, r1, r3
 8008e84:	4413      	add	r3, r2
 8008e86:	3390      	adds	r3, #144	; 0x90
 8008e88:	2201      	movs	r2, #1
 8008e8a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e92:	4619      	mov	r1, r3
 8008e94:	693a      	ldr	r2, [r7, #16]
 8008e96:	2334      	movs	r3, #52	; 0x34
 8008e98:	fb01 f303 	mul.w	r3, r1, r3
 8008e9c:	4413      	add	r3, r2
 8008e9e:	3391      	adds	r3, #145	; 0x91
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008eaa:	3301      	adds	r3, #1
 8008eac:	b29a      	uxth	r2, r3
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008eb4:	e0d3      	b.n	800905e <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8008eb6:	7bfb      	ldrb	r3, [r7, #15]
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	d10c      	bne.n	8008ed6 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	693a      	ldr	r2, [r7, #16]
 8008ec6:	2334      	movs	r3, #52	; 0x34
 8008ec8:	fb01 f303 	mul.w	r3, r1, r3
 8008ecc:	4413      	add	r3, r2
 8008ece:	3390      	adds	r3, #144	; 0x90
 8008ed0:	2205      	movs	r2, #5
 8008ed2:	701a      	strb	r2, [r3, #0]
            break;
 8008ed4:	e0c3      	b.n	800905e <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008ed6:	7bfb      	ldrb	r3, [r7, #15]
 8008ed8:	2b04      	cmp	r3, #4
 8008eda:	f040 80c0 	bne.w	800905e <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	693a      	ldr	r2, [r7, #16]
 8008ee8:	2334      	movs	r3, #52	; 0x34
 8008eea:	fb01 f303 	mul.w	r3, r1, r3
 8008eee:	4413      	add	r3, r2
 8008ef0:	3390      	adds	r3, #144	; 0x90
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008efc:	4619      	mov	r1, r3
 8008efe:	693a      	ldr	r2, [r7, #16]
 8008f00:	2334      	movs	r3, #52	; 0x34
 8008f02:	fb01 f303 	mul.w	r3, r1, r3
 8008f06:	4413      	add	r3, r2
 8008f08:	3391      	adds	r3, #145	; 0x91
 8008f0a:	2202      	movs	r2, #2
 8008f0c:	701a      	strb	r2, [r3, #0]
            break;
 8008f0e:	e0a6      	b.n	800905e <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f16:	b2d9      	uxtb	r1, r3
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f1e:	461a      	mov	r2, r3
 8008f20:	2334      	movs	r3, #52	; 0x34
 8008f22:	fb02 f303 	mul.w	r3, r2, r3
 8008f26:	3398      	adds	r3, #152	; 0x98
 8008f28:	693a      	ldr	r2, [r7, #16]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	3304      	adds	r3, #4
 8008f2e:	461a      	mov	r2, r3
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 fe96 	bl	8009c62 <USBH_MSC_SCSI_RequestSense>
 8008f36:	4603      	mov	r3, r0
 8008f38:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008f3a:	7bfb      	ldrb	r3, [r7, #15]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d145      	bne.n	8008fcc <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f46:	4619      	mov	r1, r3
 8008f48:	693a      	ldr	r2, [r7, #16]
 8008f4a:	2334      	movs	r3, #52	; 0x34
 8008f4c:	fb01 f303 	mul.w	r3, r1, r3
 8008f50:	4413      	add	r3, r2
 8008f52:	339c      	adds	r3, #156	; 0x9c
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	2b06      	cmp	r3, #6
 8008f58:	d00c      	beq.n	8008f74 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f60:	4619      	mov	r1, r3
 8008f62:	693a      	ldr	r2, [r7, #16]
 8008f64:	2334      	movs	r3, #52	; 0x34
 8008f66:	fb01 f303 	mul.w	r3, r1, r3
 8008f6a:	4413      	add	r3, r2
 8008f6c:	339c      	adds	r3, #156	; 0x9c
 8008f6e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008f70:	2b02      	cmp	r3, #2
 8008f72:	d117      	bne.n	8008fa4 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	f242 720f 	movw	r2, #9999	; 0x270f
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d80c      	bhi.n	8008fa4 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f90:	4619      	mov	r1, r3
 8008f92:	693a      	ldr	r2, [r7, #16]
 8008f94:	2334      	movs	r3, #52	; 0x34
 8008f96:	fb01 f303 	mul.w	r3, r1, r3
 8008f9a:	4413      	add	r3, r2
 8008f9c:	3390      	adds	r3, #144	; 0x90
 8008f9e:	2202      	movs	r2, #2
 8008fa0:	701a      	strb	r2, [r3, #0]
                  break;
 8008fa2:	e05f      	b.n	8009064 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008faa:	4619      	mov	r1, r3
 8008fac:	693a      	ldr	r2, [r7, #16]
 8008fae:	2334      	movs	r3, #52	; 0x34
 8008fb0:	fb01 f303 	mul.w	r3, r1, r3
 8008fb4:	4413      	add	r3, r2
 8008fb6:	3390      	adds	r3, #144	; 0x90
 8008fb8:	2201      	movs	r2, #1
 8008fba:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	b29a      	uxth	r2, r3
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8008fcc:	7bfb      	ldrb	r3, [r7, #15]
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	d10c      	bne.n	8008fec <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fd8:	4619      	mov	r1, r3
 8008fda:	693a      	ldr	r2, [r7, #16]
 8008fdc:	2334      	movs	r3, #52	; 0x34
 8008fde:	fb01 f303 	mul.w	r3, r1, r3
 8008fe2:	4413      	add	r3, r2
 8008fe4:	3390      	adds	r3, #144	; 0x90
 8008fe6:	2208      	movs	r2, #8
 8008fe8:	701a      	strb	r2, [r3, #0]
            break;
 8008fea:	e03a      	b.n	8009062 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008fec:	7bfb      	ldrb	r3, [r7, #15]
 8008fee:	2b04      	cmp	r3, #4
 8008ff0:	d137      	bne.n	8009062 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	693a      	ldr	r2, [r7, #16]
 8008ffc:	2334      	movs	r3, #52	; 0x34
 8008ffe:	fb01 f303 	mul.w	r3, r1, r3
 8009002:	4413      	add	r3, r2
 8009004:	3390      	adds	r3, #144	; 0x90
 8009006:	2201      	movs	r2, #1
 8009008:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009010:	4619      	mov	r1, r3
 8009012:	693a      	ldr	r2, [r7, #16]
 8009014:	2334      	movs	r3, #52	; 0x34
 8009016:	fb01 f303 	mul.w	r3, r1, r3
 800901a:	4413      	add	r3, r2
 800901c:	3391      	adds	r3, #145	; 0x91
 800901e:	2202      	movs	r2, #2
 8009020:	701a      	strb	r2, [r3, #0]
            break;
 8009022:	e01e      	b.n	8009062 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800902a:	3301      	adds	r3, #1
 800902c:	b29a      	uxth	r2, r3
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009034:	e016      	b.n	8009064 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	2200      	movs	r2, #0
 800903a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	2201      	movs	r2, #1
 8009042:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800904a:	2102      	movs	r1, #2
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	4798      	blx	r3
      break;
 8009050:	e00c      	b.n	800906c <USBH_MSC_Process+0x514>
            break;
 8009052:	bf00      	nop
 8009054:	e00a      	b.n	800906c <USBH_MSC_Process+0x514>
            break;
 8009056:	bf00      	nop
 8009058:	e008      	b.n	800906c <USBH_MSC_Process+0x514>
            break;
 800905a:	bf00      	nop
 800905c:	e006      	b.n	800906c <USBH_MSC_Process+0x514>
            break;
 800905e:	bf00      	nop
 8009060:	e004      	b.n	800906c <USBH_MSC_Process+0x514>
            break;
 8009062:	bf00      	nop
      break;
 8009064:	e002      	b.n	800906c <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8009066:	2300      	movs	r3, #0
 8009068:	75fb      	strb	r3, [r7, #23]
      break;
 800906a:	bf00      	nop
  }
  return error;
 800906c:	7dfb      	ldrb	r3, [r7, #23]
}
 800906e:	4618      	mov	r0, r3
 8009070:	3718      	adds	r7, #24
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop

08009078 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009080:	2300      	movs	r3, #0
}
 8009082:	4618      	mov	r0, r3
 8009084:	370c      	adds	r7, #12
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr

0800908e <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b088      	sub	sp, #32
 8009092:	af02      	add	r7, sp, #8
 8009094:	6078      	str	r0, [r7, #4]
 8009096:	460b      	mov	r3, r1
 8009098:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090a0:	69db      	ldr	r3, [r3, #28]
 80090a2:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 80090a4:	2301      	movs	r3, #1
 80090a6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 80090a8:	2301      	movs	r3, #1
 80090aa:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80090ac:	78fb      	ldrb	r3, [r7, #3]
 80090ae:	693a      	ldr	r2, [r7, #16]
 80090b0:	2134      	movs	r1, #52	; 0x34
 80090b2:	fb01 f303 	mul.w	r3, r1, r3
 80090b6:	4413      	add	r3, r2
 80090b8:	3390      	adds	r3, #144	; 0x90
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	2b07      	cmp	r3, #7
 80090be:	d03c      	beq.n	800913a <USBH_MSC_RdWrProcess+0xac>
 80090c0:	2b07      	cmp	r3, #7
 80090c2:	f300 80a7 	bgt.w	8009214 <USBH_MSC_RdWrProcess+0x186>
 80090c6:	2b05      	cmp	r3, #5
 80090c8:	d06c      	beq.n	80091a4 <USBH_MSC_RdWrProcess+0x116>
 80090ca:	2b06      	cmp	r3, #6
 80090cc:	f040 80a2 	bne.w	8009214 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80090d0:	78f9      	ldrb	r1, [r7, #3]
 80090d2:	2300      	movs	r3, #0
 80090d4:	9300      	str	r3, [sp, #0]
 80090d6:	2300      	movs	r3, #0
 80090d8:	2200      	movs	r2, #0
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 fea5 	bl	8009e2a <USBH_MSC_SCSI_Read>
 80090e0:	4603      	mov	r3, r0
 80090e2:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80090e4:	7bfb      	ldrb	r3, [r7, #15]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10b      	bne.n	8009102 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80090ea:	78fb      	ldrb	r3, [r7, #3]
 80090ec:	693a      	ldr	r2, [r7, #16]
 80090ee:	2134      	movs	r1, #52	; 0x34
 80090f0:	fb01 f303 	mul.w	r3, r1, r3
 80090f4:	4413      	add	r3, r2
 80090f6:	3390      	adds	r3, #144	; 0x90
 80090f8:	2201      	movs	r2, #1
 80090fa:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80090fc:	2300      	movs	r3, #0
 80090fe:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009100:	e08a      	b.n	8009218 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8009102:	7bfb      	ldrb	r3, [r7, #15]
 8009104:	2b02      	cmp	r3, #2
 8009106:	d109      	bne.n	800911c <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009108:	78fb      	ldrb	r3, [r7, #3]
 800910a:	693a      	ldr	r2, [r7, #16]
 800910c:	2134      	movs	r1, #52	; 0x34
 800910e:	fb01 f303 	mul.w	r3, r1, r3
 8009112:	4413      	add	r3, r2
 8009114:	3390      	adds	r3, #144	; 0x90
 8009116:	2205      	movs	r2, #5
 8009118:	701a      	strb	r2, [r3, #0]
      break;
 800911a:	e07d      	b.n	8009218 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800911c:	7bfb      	ldrb	r3, [r7, #15]
 800911e:	2b04      	cmp	r3, #4
 8009120:	d17a      	bne.n	8009218 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009122:	78fb      	ldrb	r3, [r7, #3]
 8009124:	693a      	ldr	r2, [r7, #16]
 8009126:	2134      	movs	r1, #52	; 0x34
 8009128:	fb01 f303 	mul.w	r3, r1, r3
 800912c:	4413      	add	r3, r2
 800912e:	3390      	adds	r3, #144	; 0x90
 8009130:	2208      	movs	r2, #8
 8009132:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009134:	2302      	movs	r3, #2
 8009136:	75fb      	strb	r3, [r7, #23]
      break;
 8009138:	e06e      	b.n	8009218 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800913a:	78f9      	ldrb	r1, [r7, #3]
 800913c:	2300      	movs	r3, #0
 800913e:	9300      	str	r3, [sp, #0]
 8009140:	2300      	movs	r3, #0
 8009142:	2200      	movs	r2, #0
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 fe05 	bl	8009d54 <USBH_MSC_SCSI_Write>
 800914a:	4603      	mov	r3, r0
 800914c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800914e:	7bfb      	ldrb	r3, [r7, #15]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d10b      	bne.n	800916c <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009154:	78fb      	ldrb	r3, [r7, #3]
 8009156:	693a      	ldr	r2, [r7, #16]
 8009158:	2134      	movs	r1, #52	; 0x34
 800915a:	fb01 f303 	mul.w	r3, r1, r3
 800915e:	4413      	add	r3, r2
 8009160:	3390      	adds	r3, #144	; 0x90
 8009162:	2201      	movs	r2, #1
 8009164:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009166:	2300      	movs	r3, #0
 8009168:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800916a:	e057      	b.n	800921c <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800916c:	7bfb      	ldrb	r3, [r7, #15]
 800916e:	2b02      	cmp	r3, #2
 8009170:	d109      	bne.n	8009186 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009172:	78fb      	ldrb	r3, [r7, #3]
 8009174:	693a      	ldr	r2, [r7, #16]
 8009176:	2134      	movs	r1, #52	; 0x34
 8009178:	fb01 f303 	mul.w	r3, r1, r3
 800917c:	4413      	add	r3, r2
 800917e:	3390      	adds	r3, #144	; 0x90
 8009180:	2205      	movs	r2, #5
 8009182:	701a      	strb	r2, [r3, #0]
      break;
 8009184:	e04a      	b.n	800921c <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009186:	7bfb      	ldrb	r3, [r7, #15]
 8009188:	2b04      	cmp	r3, #4
 800918a:	d147      	bne.n	800921c <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800918c:	78fb      	ldrb	r3, [r7, #3]
 800918e:	693a      	ldr	r2, [r7, #16]
 8009190:	2134      	movs	r1, #52	; 0x34
 8009192:	fb01 f303 	mul.w	r3, r1, r3
 8009196:	4413      	add	r3, r2
 8009198:	3390      	adds	r3, #144	; 0x90
 800919a:	2208      	movs	r2, #8
 800919c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800919e:	2302      	movs	r3, #2
 80091a0:	75fb      	strb	r3, [r7, #23]
      break;
 80091a2:	e03b      	b.n	800921c <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80091a4:	78fb      	ldrb	r3, [r7, #3]
 80091a6:	2234      	movs	r2, #52	; 0x34
 80091a8:	fb02 f303 	mul.w	r3, r2, r3
 80091ac:	3398      	adds	r3, #152	; 0x98
 80091ae:	693a      	ldr	r2, [r7, #16]
 80091b0:	4413      	add	r3, r2
 80091b2:	1d1a      	adds	r2, r3, #4
 80091b4:	78fb      	ldrb	r3, [r7, #3]
 80091b6:	4619      	mov	r1, r3
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 fd52 	bl	8009c62 <USBH_MSC_SCSI_RequestSense>
 80091be:	4603      	mov	r3, r0
 80091c0:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80091c2:	7bfb      	ldrb	r3, [r7, #15]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d113      	bne.n	80091f0 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80091c8:	78fb      	ldrb	r3, [r7, #3]
 80091ca:	693a      	ldr	r2, [r7, #16]
 80091cc:	2134      	movs	r1, #52	; 0x34
 80091ce:	fb01 f303 	mul.w	r3, r1, r3
 80091d2:	4413      	add	r3, r2
 80091d4:	3390      	adds	r3, #144	; 0x90
 80091d6:	2201      	movs	r2, #1
 80091d8:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 80091da:	78fb      	ldrb	r3, [r7, #3]
 80091dc:	693a      	ldr	r2, [r7, #16]
 80091de:	2134      	movs	r1, #52	; 0x34
 80091e0:	fb01 f303 	mul.w	r3, r1, r3
 80091e4:	4413      	add	r3, r2
 80091e6:	3391      	adds	r3, #145	; 0x91
 80091e8:	2202      	movs	r2, #2
 80091ea:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 80091ec:	2302      	movs	r3, #2
 80091ee:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 80091f0:	7bfb      	ldrb	r3, [r7, #15]
 80091f2:	2b02      	cmp	r3, #2
 80091f4:	d014      	beq.n	8009220 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80091f6:	7bfb      	ldrb	r3, [r7, #15]
 80091f8:	2b04      	cmp	r3, #4
 80091fa:	d111      	bne.n	8009220 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80091fc:	78fb      	ldrb	r3, [r7, #3]
 80091fe:	693a      	ldr	r2, [r7, #16]
 8009200:	2134      	movs	r1, #52	; 0x34
 8009202:	fb01 f303 	mul.w	r3, r1, r3
 8009206:	4413      	add	r3, r2
 8009208:	3390      	adds	r3, #144	; 0x90
 800920a:	2208      	movs	r2, #8
 800920c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800920e:	2302      	movs	r3, #2
 8009210:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009212:	e005      	b.n	8009220 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8009214:	bf00      	nop
 8009216:	e004      	b.n	8009222 <USBH_MSC_RdWrProcess+0x194>
      break;
 8009218:	bf00      	nop
 800921a:	e002      	b.n	8009222 <USBH_MSC_RdWrProcess+0x194>
      break;
 800921c:	bf00      	nop
 800921e:	e000      	b.n	8009222 <USBH_MSC_RdWrProcess+0x194>
      break;
 8009220:	bf00      	nop

  }
  return error;
 8009222:	7dfb      	ldrb	r3, [r7, #23]
}
 8009224:	4618      	mov	r0, r3
 8009226:	3718      	adds	r7, #24
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800922c:	b480      	push	{r7}
 800922e:	b085      	sub	sp, #20
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	460b      	mov	r3, r1
 8009236:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800923e:	69db      	ldr	r3, [r3, #28]
 8009240:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	b2db      	uxtb	r3, r3
 8009248:	2b0b      	cmp	r3, #11
 800924a:	d10c      	bne.n	8009266 <USBH_MSC_UnitIsReady+0x3a>
 800924c:	78fb      	ldrb	r3, [r7, #3]
 800924e:	68ba      	ldr	r2, [r7, #8]
 8009250:	2134      	movs	r1, #52	; 0x34
 8009252:	fb01 f303 	mul.w	r3, r1, r3
 8009256:	4413      	add	r3, r2
 8009258:	3391      	adds	r3, #145	; 0x91
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d102      	bne.n	8009266 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8009260:	2301      	movs	r3, #1
 8009262:	73fb      	strb	r3, [r7, #15]
 8009264:	e001      	b.n	800926a <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8009266:	2300      	movs	r3, #0
 8009268:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800926a:	7bfb      	ldrb	r3, [r7, #15]
}
 800926c:	4618      	mov	r0, r3
 800926e:	3714      	adds	r7, #20
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b086      	sub	sp, #24
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	460b      	mov	r3, r1
 8009282:	607a      	str	r2, [r7, #4]
 8009284:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800928c:	69db      	ldr	r3, [r3, #28]
 800928e:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	b2db      	uxtb	r3, r3
 8009296:	2b0b      	cmp	r3, #11
 8009298:	d10d      	bne.n	80092b6 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800929a:	7afb      	ldrb	r3, [r7, #11]
 800929c:	2234      	movs	r2, #52	; 0x34
 800929e:	fb02 f303 	mul.w	r3, r2, r3
 80092a2:	3390      	adds	r3, #144	; 0x90
 80092a4:	697a      	ldr	r2, [r7, #20]
 80092a6:	4413      	add	r3, r2
 80092a8:	2234      	movs	r2, #52	; 0x34
 80092aa:	4619      	mov	r1, r3
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f006 f9cd 	bl	800f64c <memcpy>
    return USBH_OK;
 80092b2:	2300      	movs	r3, #0
 80092b4:	e000      	b.n	80092b8 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 80092b6:	2302      	movs	r3, #2
  }
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3718      	adds	r7, #24
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b088      	sub	sp, #32
 80092c4:	af02      	add	r7, sp, #8
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	607a      	str	r2, [r7, #4]
 80092ca:	603b      	str	r3, [r7, #0]
 80092cc:	460b      	mov	r3, r1
 80092ce:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092d6:	69db      	ldr	r3, [r3, #28]
 80092d8:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00e      	beq.n	8009304 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80092ec:	2b0b      	cmp	r3, #11
 80092ee:	d109      	bne.n	8009304 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80092f0:	7afb      	ldrb	r3, [r7, #11]
 80092f2:	697a      	ldr	r2, [r7, #20]
 80092f4:	2134      	movs	r1, #52	; 0x34
 80092f6:	fb01 f303 	mul.w	r3, r1, r3
 80092fa:	4413      	add	r3, r2
 80092fc:	3390      	adds	r3, #144	; 0x90
 80092fe:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009300:	2b01      	cmp	r3, #1
 8009302:	d001      	beq.n	8009308 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8009304:	2302      	movs	r3, #2
 8009306:	e040      	b.n	800938a <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	2206      	movs	r2, #6
 800930c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800930e:	7afb      	ldrb	r3, [r7, #11]
 8009310:	697a      	ldr	r2, [r7, #20]
 8009312:	2134      	movs	r1, #52	; 0x34
 8009314:	fb01 f303 	mul.w	r3, r1, r3
 8009318:	4413      	add	r3, r2
 800931a:	3390      	adds	r3, #144	; 0x90
 800931c:	2206      	movs	r2, #6
 800931e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009320:	7afb      	ldrb	r3, [r7, #11]
 8009322:	b29a      	uxth	r2, r3
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800932a:	7af9      	ldrb	r1, [r7, #11]
 800932c:	6a3b      	ldr	r3, [r7, #32]
 800932e:	9300      	str	r3, [sp, #0]
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	68f8      	ldr	r0, [r7, #12]
 8009336:	f000 fd78 	bl	8009e2a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009340:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009342:	e016      	b.n	8009372 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	1ad2      	subs	r2, r2, r3
 800934e:	6a3b      	ldr	r3, [r7, #32]
 8009350:	f242 7110 	movw	r1, #10000	; 0x2710
 8009354:	fb01 f303 	mul.w	r3, r1, r3
 8009358:	429a      	cmp	r2, r3
 800935a:	d805      	bhi.n	8009368 <USBH_MSC_Read+0xa8>
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009362:	b2db      	uxtb	r3, r3
 8009364:	2b00      	cmp	r3, #0
 8009366:	d104      	bne.n	8009372 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	2201      	movs	r2, #1
 800936c:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800936e:	2302      	movs	r3, #2
 8009370:	e00b      	b.n	800938a <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009372:	7afb      	ldrb	r3, [r7, #11]
 8009374:	4619      	mov	r1, r3
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	f7ff fe89 	bl	800908e <USBH_MSC_RdWrProcess>
 800937c:	4603      	mov	r3, r0
 800937e:	2b01      	cmp	r3, #1
 8009380:	d0e0      	beq.n	8009344 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	2201      	movs	r2, #1
 8009386:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	3718      	adds	r7, #24
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}

08009392 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8009392:	b580      	push	{r7, lr}
 8009394:	b088      	sub	sp, #32
 8009396:	af02      	add	r7, sp, #8
 8009398:	60f8      	str	r0, [r7, #12]
 800939a:	607a      	str	r2, [r7, #4]
 800939c:	603b      	str	r3, [r7, #0]
 800939e:	460b      	mov	r3, r1
 80093a0:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093a8:	69db      	ldr	r3, [r3, #28]
 80093aa:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d00e      	beq.n	80093d6 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80093be:	2b0b      	cmp	r3, #11
 80093c0:	d109      	bne.n	80093d6 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80093c2:	7afb      	ldrb	r3, [r7, #11]
 80093c4:	697a      	ldr	r2, [r7, #20]
 80093c6:	2134      	movs	r1, #52	; 0x34
 80093c8:	fb01 f303 	mul.w	r3, r1, r3
 80093cc:	4413      	add	r3, r2
 80093ce:	3390      	adds	r3, #144	; 0x90
 80093d0:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d001      	beq.n	80093da <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 80093d6:	2302      	movs	r3, #2
 80093d8:	e040      	b.n	800945c <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	2207      	movs	r2, #7
 80093de:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80093e0:	7afb      	ldrb	r3, [r7, #11]
 80093e2:	697a      	ldr	r2, [r7, #20]
 80093e4:	2134      	movs	r1, #52	; 0x34
 80093e6:	fb01 f303 	mul.w	r3, r1, r3
 80093ea:	4413      	add	r3, r2
 80093ec:	3390      	adds	r3, #144	; 0x90
 80093ee:	2207      	movs	r2, #7
 80093f0:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80093f2:	7afb      	ldrb	r3, [r7, #11]
 80093f4:	b29a      	uxth	r2, r3
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80093fc:	7af9      	ldrb	r1, [r7, #11]
 80093fe:	6a3b      	ldr	r3, [r7, #32]
 8009400:	9300      	str	r3, [sp, #0]
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	68f8      	ldr	r0, [r7, #12]
 8009408:	f000 fca4 	bl	8009d54 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009412:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009414:	e016      	b.n	8009444 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	1ad2      	subs	r2, r2, r3
 8009420:	6a3b      	ldr	r3, [r7, #32]
 8009422:	f242 7110 	movw	r1, #10000	; 0x2710
 8009426:	fb01 f303 	mul.w	r3, r1, r3
 800942a:	429a      	cmp	r2, r3
 800942c:	d805      	bhi.n	800943a <USBH_MSC_Write+0xa8>
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009434:	b2db      	uxtb	r3, r3
 8009436:	2b00      	cmp	r3, #0
 8009438:	d104      	bne.n	8009444 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	2201      	movs	r2, #1
 800943e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009440:	2302      	movs	r3, #2
 8009442:	e00b      	b.n	800945c <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009444:	7afb      	ldrb	r3, [r7, #11]
 8009446:	4619      	mov	r1, r3
 8009448:	68f8      	ldr	r0, [r7, #12]
 800944a:	f7ff fe20 	bl	800908e <USBH_MSC_RdWrProcess>
 800944e:	4603      	mov	r3, r0
 8009450:	2b01      	cmp	r3, #1
 8009452:	d0e0      	beq.n	8009416 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	2201      	movs	r2, #1
 8009458:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3718      	adds	r7, #24
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2221      	movs	r2, #33	; 0x21
 8009470:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	22ff      	movs	r2, #255	; 0xff
 8009476:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2200      	movs	r2, #0
 8009488:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800948a:	2200      	movs	r2, #0
 800948c:	2100      	movs	r1, #0
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f001 fea6 	bl	800b1e0 <USBH_CtlReq>
 8009494:	4603      	mov	r3, r0
}
 8009496:	4618      	mov	r0, r3
 8009498:	3708      	adds	r7, #8
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b082      	sub	sp, #8
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
 80094a6:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	22a1      	movs	r2, #161	; 0xa1
 80094ac:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	22fe      	movs	r2, #254	; 0xfe
 80094b2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2201      	movs	r2, #1
 80094c4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 80094c6:	2201      	movs	r2, #1
 80094c8:	6839      	ldr	r1, [r7, #0]
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f001 fe88 	bl	800b1e0 <USBH_CtlReq>
 80094d0:	4603      	mov	r3, r0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3708      	adds	r7, #8
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
	...

080094dc <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 80094dc:	b480      	push	{r7}
 80094de:	b085      	sub	sp, #20
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094ea:	69db      	ldr	r3, [r3, #28]
 80094ec:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	4a09      	ldr	r2, [pc, #36]	; (8009518 <USBH_MSC_BOT_Init+0x3c>)
 80094f2:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	4a09      	ldr	r2, [pc, #36]	; (800951c <USBH_MSC_BOT_Init+0x40>)
 80094f8:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2201      	movs	r2, #1
 80094fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2201      	movs	r2, #1
 8009506:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	3714      	adds	r7, #20
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr
 8009518:	43425355 	.word	0x43425355
 800951c:	20304050 	.word	0x20304050

08009520 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b088      	sub	sp, #32
 8009524:	af02      	add	r7, sp, #8
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	460b      	mov	r3, r1
 800952a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800952c:	2301      	movs	r3, #1
 800952e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8009530:	2301      	movs	r3, #1
 8009532:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8009534:	2301      	movs	r3, #1
 8009536:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009538:	2300      	movs	r3, #0
 800953a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009542:	69db      	ldr	r3, [r3, #28]
 8009544:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8009546:	2300      	movs	r3, #0
 8009548:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009550:	3b01      	subs	r3, #1
 8009552:	2b0a      	cmp	r3, #10
 8009554:	f200 819e 	bhi.w	8009894 <USBH_MSC_BOT_Process+0x374>
 8009558:	a201      	add	r2, pc, #4	; (adr r2, 8009560 <USBH_MSC_BOT_Process+0x40>)
 800955a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800955e:	bf00      	nop
 8009560:	0800958d 	.word	0x0800958d
 8009564:	080095b5 	.word	0x080095b5
 8009568:	0800961f 	.word	0x0800961f
 800956c:	0800963d 	.word	0x0800963d
 8009570:	080096c1 	.word	0x080096c1
 8009574:	080096e3 	.word	0x080096e3
 8009578:	0800977b 	.word	0x0800977b
 800957c:	08009797 	.word	0x08009797
 8009580:	080097e9 	.word	0x080097e9
 8009584:	08009819 	.word	0x08009819
 8009588:	0800987b 	.word	0x0800987b
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	78fa      	ldrb	r2, [r7, #3]
 8009590:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	2202      	movs	r2, #2
 8009598:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	795b      	ldrb	r3, [r3, #5]
 80095a6:	2201      	movs	r2, #1
 80095a8:	9200      	str	r2, [sp, #0]
 80095aa:	221f      	movs	r2, #31
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f002 f826 	bl	800b5fe <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 80095b2:	e17e      	b.n	80098b2 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	795b      	ldrb	r3, [r3, #5]
 80095b8:	4619      	mov	r1, r3
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f005 fe3e 	bl	800f23c <USBH_LL_GetURBState>
 80095c0:	4603      	mov	r3, r0
 80095c2:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80095c4:	7d3b      	ldrb	r3, [r7, #20]
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d118      	bne.n	80095fc <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d00f      	beq.n	80095f2 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80095d8:	b25b      	sxtb	r3, r3
 80095da:	2b00      	cmp	r3, #0
 80095dc:	da04      	bge.n	80095e8 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	2203      	movs	r2, #3
 80095e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80095e6:	e157      	b.n	8009898 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	2205      	movs	r2, #5
 80095ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80095f0:	e152      	b.n	8009898 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	2207      	movs	r2, #7
 80095f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80095fa:	e14d      	b.n	8009898 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 80095fc:	7d3b      	ldrb	r3, [r7, #20]
 80095fe:	2b02      	cmp	r3, #2
 8009600:	d104      	bne.n	800960c <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	2201      	movs	r2, #1
 8009606:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800960a:	e145      	b.n	8009898 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800960c:	7d3b      	ldrb	r3, [r7, #20]
 800960e:	2b05      	cmp	r3, #5
 8009610:	f040 8142 	bne.w	8009898 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	220a      	movs	r2, #10
 8009618:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800961c:	e13c      	b.n	8009898 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	895a      	ldrh	r2, [r3, #10]
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	791b      	ldrb	r3, [r3, #4]
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f002 f80b 	bl	800b648 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	2204      	movs	r2, #4
 8009636:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800963a:	e13a      	b.n	80098b2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	791b      	ldrb	r3, [r3, #4]
 8009640:	4619      	mov	r1, r3
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f005 fdfa 	bl	800f23c <USBH_LL_GetURBState>
 8009648:	4603      	mov	r3, r0
 800964a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800964c:	7d3b      	ldrb	r3, [r7, #20]
 800964e:	2b01      	cmp	r3, #1
 8009650:	d12d      	bne.n	80096ae <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009656:	693a      	ldr	r2, [r7, #16]
 8009658:	8952      	ldrh	r2, [r2, #10]
 800965a:	4293      	cmp	r3, r2
 800965c:	d910      	bls.n	8009680 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009664:	693a      	ldr	r2, [r7, #16]
 8009666:	8952      	ldrh	r2, [r2, #10]
 8009668:	441a      	add	r2, r3
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009674:	693a      	ldr	r2, [r7, #16]
 8009676:	8952      	ldrh	r2, [r2, #10]
 8009678:	1a9a      	subs	r2, r3, r2
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	65da      	str	r2, [r3, #92]	; 0x5c
 800967e:	e002      	b.n	8009686 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	2200      	movs	r2, #0
 8009684:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800968a:	2b00      	cmp	r3, #0
 800968c:	d00a      	beq.n	80096a4 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	895a      	ldrh	r2, [r3, #10]
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	791b      	ldrb	r3, [r3, #4]
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f001 ffd3 	bl	800b648 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 80096a2:	e0fb      	b.n	800989c <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	2207      	movs	r2, #7
 80096a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80096ac:	e0f6      	b.n	800989c <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 80096ae:	7d3b      	ldrb	r3, [r7, #20]
 80096b0:	2b05      	cmp	r3, #5
 80096b2:	f040 80f3 	bne.w	800989c <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	2209      	movs	r2, #9
 80096ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80096be:	e0ed      	b.n	800989c <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	891a      	ldrh	r2, [r3, #8]
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	795b      	ldrb	r3, [r3, #5]
 80096ce:	2001      	movs	r0, #1
 80096d0:	9000      	str	r0, [sp, #0]
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f001 ff93 	bl	800b5fe <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	2206      	movs	r2, #6
 80096dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80096e0:	e0e7      	b.n	80098b2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	795b      	ldrb	r3, [r3, #5]
 80096e6:	4619      	mov	r1, r3
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f005 fda7 	bl	800f23c <USBH_LL_GetURBState>
 80096ee:	4603      	mov	r3, r0
 80096f0:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80096f2:	7d3b      	ldrb	r3, [r7, #20]
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d12f      	bne.n	8009758 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096fc:	693a      	ldr	r2, [r7, #16]
 80096fe:	8912      	ldrh	r2, [r2, #8]
 8009700:	4293      	cmp	r3, r2
 8009702:	d910      	bls.n	8009726 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800970a:	693a      	ldr	r2, [r7, #16]
 800970c:	8912      	ldrh	r2, [r2, #8]
 800970e:	441a      	add	r2, r3
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800971a:	693a      	ldr	r2, [r7, #16]
 800971c:	8912      	ldrh	r2, [r2, #8]
 800971e:	1a9a      	subs	r2, r3, r2
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	65da      	str	r2, [r3, #92]	; 0x5c
 8009724:	e002      	b.n	800972c <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	2200      	movs	r2, #0
 800972a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009730:	2b00      	cmp	r3, #0
 8009732:	d00c      	beq.n	800974e <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	891a      	ldrh	r2, [r3, #8]
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	795b      	ldrb	r3, [r3, #5]
 8009742:	2001      	movs	r0, #1
 8009744:	9000      	str	r0, [sp, #0]
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f001 ff59 	bl	800b5fe <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800974c:	e0a8      	b.n	80098a0 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	2207      	movs	r2, #7
 8009752:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009756:	e0a3      	b.n	80098a0 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009758:	7d3b      	ldrb	r3, [r7, #20]
 800975a:	2b02      	cmp	r3, #2
 800975c:	d104      	bne.n	8009768 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	2205      	movs	r2, #5
 8009762:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009766:	e09b      	b.n	80098a0 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8009768:	7d3b      	ldrb	r3, [r7, #20]
 800976a:	2b05      	cmp	r3, #5
 800976c:	f040 8098 	bne.w	80098a0 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	220a      	movs	r2, #10
 8009774:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009778:	e092      	b.n	80098a0 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	791b      	ldrb	r3, [r3, #4]
 8009784:	220d      	movs	r2, #13
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f001 ff5e 	bl	800b648 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	2208      	movs	r2, #8
 8009790:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009794:	e08d      	b.n	80098b2 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	791b      	ldrb	r3, [r3, #4]
 800979a:	4619      	mov	r1, r3
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f005 fd4d 	bl	800f23c <USBH_LL_GetURBState>
 80097a2:	4603      	mov	r3, r0
 80097a4:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 80097a6:	7d3b      	ldrb	r3, [r7, #20]
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d115      	bne.n	80097d8 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	2201      	movs	r2, #1
 80097b8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 f8a9 	bl	8009914 <USBH_MSC_DecodeCSW>
 80097c2:	4603      	mov	r3, r0
 80097c4:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 80097c6:	7d7b      	ldrb	r3, [r7, #21]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d102      	bne.n	80097d2 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 80097cc:	2300      	movs	r3, #0
 80097ce:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 80097d0:	e068      	b.n	80098a4 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 80097d2:	2302      	movs	r3, #2
 80097d4:	75fb      	strb	r3, [r7, #23]
      break;
 80097d6:	e065      	b.n	80098a4 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 80097d8:	7d3b      	ldrb	r3, [r7, #20]
 80097da:	2b05      	cmp	r3, #5
 80097dc:	d162      	bne.n	80098a4 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	2209      	movs	r2, #9
 80097e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80097e6:	e05d      	b.n	80098a4 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 80097e8:	78fb      	ldrb	r3, [r7, #3]
 80097ea:	2200      	movs	r2, #0
 80097ec:	4619      	mov	r1, r3
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 f864 	bl	80098bc <USBH_MSC_BOT_Abort>
 80097f4:	4603      	mov	r3, r0
 80097f6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80097f8:	7dbb      	ldrb	r3, [r7, #22]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d104      	bne.n	8009808 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	2207      	movs	r2, #7
 8009802:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009806:	e04f      	b.n	80098a8 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009808:	7dbb      	ldrb	r3, [r7, #22]
 800980a:	2b04      	cmp	r3, #4
 800980c:	d14c      	bne.n	80098a8 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	220b      	movs	r2, #11
 8009812:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009816:	e047      	b.n	80098a8 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009818:	78fb      	ldrb	r3, [r7, #3]
 800981a:	2201      	movs	r2, #1
 800981c:	4619      	mov	r1, r3
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 f84c 	bl	80098bc <USBH_MSC_BOT_Abort>
 8009824:	4603      	mov	r3, r0
 8009826:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009828:	7dbb      	ldrb	r3, [r7, #22]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d11d      	bne.n	800986a <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	795b      	ldrb	r3, [r3, #5]
 8009832:	4619      	mov	r1, r3
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f005 fd5b 	bl	800f2f0 <USBH_LL_GetToggle>
 800983a:	4603      	mov	r3, r0
 800983c:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	7959      	ldrb	r1, [r3, #5]
 8009842:	7bfb      	ldrb	r3, [r7, #15]
 8009844:	f1c3 0301 	rsb	r3, r3, #1
 8009848:	b2db      	uxtb	r3, r3
 800984a:	461a      	mov	r2, r3
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f005 fd1f 	bl	800f290 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	791b      	ldrb	r3, [r3, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	4619      	mov	r1, r3
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f005 fd18 	bl	800f290 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	2209      	movs	r2, #9
 8009864:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009868:	e020      	b.n	80098ac <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800986a:	7dbb      	ldrb	r3, [r7, #22]
 800986c:	2b04      	cmp	r3, #4
 800986e:	d11d      	bne.n	80098ac <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	220b      	movs	r2, #11
 8009874:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009878:	e018      	b.n	80098ac <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f7ff fdf2 	bl	8009464 <USBH_MSC_BOT_REQ_Reset>
 8009880:	4603      	mov	r3, r0
 8009882:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009884:	7dfb      	ldrb	r3, [r7, #23]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d112      	bne.n	80098b0 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	2201      	movs	r2, #1
 800988e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8009892:	e00d      	b.n	80098b0 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8009894:	bf00      	nop
 8009896:	e00c      	b.n	80098b2 <USBH_MSC_BOT_Process+0x392>
      break;
 8009898:	bf00      	nop
 800989a:	e00a      	b.n	80098b2 <USBH_MSC_BOT_Process+0x392>
      break;
 800989c:	bf00      	nop
 800989e:	e008      	b.n	80098b2 <USBH_MSC_BOT_Process+0x392>
      break;
 80098a0:	bf00      	nop
 80098a2:	e006      	b.n	80098b2 <USBH_MSC_BOT_Process+0x392>
      break;
 80098a4:	bf00      	nop
 80098a6:	e004      	b.n	80098b2 <USBH_MSC_BOT_Process+0x392>
      break;
 80098a8:	bf00      	nop
 80098aa:	e002      	b.n	80098b2 <USBH_MSC_BOT_Process+0x392>
      break;
 80098ac:	bf00      	nop
 80098ae:	e000      	b.n	80098b2 <USBH_MSC_BOT_Process+0x392>
      break;
 80098b0:	bf00      	nop
  }
  return status;
 80098b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3718      	adds	r7, #24
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	460b      	mov	r3, r1
 80098c6:	70fb      	strb	r3, [r7, #3]
 80098c8:	4613      	mov	r3, r2
 80098ca:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 80098cc:	2302      	movs	r3, #2
 80098ce:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098d6:	69db      	ldr	r3, [r3, #28]
 80098d8:	60bb      	str	r3, [r7, #8]

  switch (dir)
 80098da:	78bb      	ldrb	r3, [r7, #2]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d002      	beq.n	80098e6 <USBH_MSC_BOT_Abort+0x2a>
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d009      	beq.n	80098f8 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 80098e4:	e011      	b.n	800990a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	79db      	ldrb	r3, [r3, #7]
 80098ea:	4619      	mov	r1, r3
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f001 f9a8 	bl	800ac42 <USBH_ClrFeature>
 80098f2:	4603      	mov	r3, r0
 80098f4:	73fb      	strb	r3, [r7, #15]
      break;
 80098f6:	e008      	b.n	800990a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	799b      	ldrb	r3, [r3, #6]
 80098fc:	4619      	mov	r1, r3
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f001 f99f 	bl	800ac42 <USBH_ClrFeature>
 8009904:	4603      	mov	r3, r0
 8009906:	73fb      	strb	r3, [r7, #15]
      break;
 8009908:	bf00      	nop
  }
  return status;
 800990a:	7bfb      	ldrb	r3, [r7, #15]
}
 800990c:	4618      	mov	r0, r3
 800990e:	3710      	adds	r7, #16
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009922:	69db      	ldr	r3, [r3, #28]
 8009924:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8009926:	2301      	movs	r3, #1
 8009928:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	791b      	ldrb	r3, [r3, #4]
 800992e:	4619      	mov	r1, r3
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f005 fbf1 	bl	800f118 <USBH_LL_GetLastXferSize>
 8009936:	4603      	mov	r3, r0
 8009938:	2b0d      	cmp	r3, #13
 800993a:	d002      	beq.n	8009942 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800993c:	2302      	movs	r3, #2
 800993e:	73fb      	strb	r3, [r7, #15]
 8009940:	e024      	b.n	800998c <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009946:	4a14      	ldr	r2, [pc, #80]	; (8009998 <USBH_MSC_DecodeCSW+0x84>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d11d      	bne.n	8009988 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009954:	429a      	cmp	r2, r3
 8009956:	d119      	bne.n	800998c <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800995e:	2b00      	cmp	r3, #0
 8009960:	d102      	bne.n	8009968 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8009962:	2300      	movs	r3, #0
 8009964:	73fb      	strb	r3, [r7, #15]
 8009966:	e011      	b.n	800998c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800996e:	2b01      	cmp	r3, #1
 8009970:	d102      	bne.n	8009978 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8009972:	2301      	movs	r3, #1
 8009974:	73fb      	strb	r3, [r7, #15]
 8009976:	e009      	b.n	800998c <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800997e:	2b02      	cmp	r3, #2
 8009980:	d104      	bne.n	800998c <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8009982:	2302      	movs	r3, #2
 8009984:	73fb      	strb	r3, [r7, #15]
 8009986:	e001      	b.n	800998c <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8009988:	2302      	movs	r3, #2
 800998a:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800998c:	7bfb      	ldrb	r3, [r7, #15]
}
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	53425355 	.word	0x53425355

0800999c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	460b      	mov	r3, r1
 80099a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80099a8:	2302      	movs	r3, #2
 80099aa:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099b2:	69db      	ldr	r3, [r3, #28]
 80099b4:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d002      	beq.n	80099c6 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 80099c0:	2b02      	cmp	r3, #2
 80099c2:	d021      	beq.n	8009a08 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80099c4:	e028      	b.n	8009a18 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	2200      	movs	r2, #0
 80099ca:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	220a      	movs	r2, #10
 80099d8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	3363      	adds	r3, #99	; 0x63
 80099e0:	2210      	movs	r2, #16
 80099e2:	2100      	movs	r1, #0
 80099e4:	4618      	mov	r0, r3
 80099e6:	f005 fdc3 	bl	800f570 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	2200      	movs	r2, #0
 80099ee:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	2201      	movs	r2, #1
 80099f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	2202      	movs	r2, #2
 80099fe:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8009a02:	2301      	movs	r3, #1
 8009a04:	73fb      	strb	r3, [r7, #15]
      break;
 8009a06:	e007      	b.n	8009a18 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009a08:	78fb      	ldrb	r3, [r7, #3]
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f7ff fd87 	bl	8009520 <USBH_MSC_BOT_Process>
 8009a12:	4603      	mov	r3, r0
 8009a14:	73fb      	strb	r3, [r7, #15]
      break;
 8009a16:	bf00      	nop
  }

  return error;
 8009a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b086      	sub	sp, #24
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	60f8      	str	r0, [r7, #12]
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	607a      	str	r2, [r7, #4]
 8009a2e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8009a30:	2301      	movs	r3, #1
 8009a32:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a3a:	69db      	ldr	r3, [r3, #28]
 8009a3c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d002      	beq.n	8009a4e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8009a48:	2b02      	cmp	r3, #2
 8009a4a:	d027      	beq.n	8009a9c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8009a4c:	e05f      	b.n	8009b0e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	2208      	movs	r2, #8
 8009a52:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	2280      	movs	r2, #128	; 0x80
 8009a58:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	220a      	movs	r2, #10
 8009a60:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	3363      	adds	r3, #99	; 0x63
 8009a68:	2210      	movs	r2, #16
 8009a6a:	2100      	movs	r1, #0
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f005 fd7f 	bl	800f570 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	2225      	movs	r2, #37	; 0x25
 8009a76:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	2202      	movs	r2, #2
 8009a86:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	f103 0210 	add.w	r2, r3, #16
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009a96:	2301      	movs	r3, #1
 8009a98:	75fb      	strb	r3, [r7, #23]
      break;
 8009a9a:	e038      	b.n	8009b0e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009a9c:	7afb      	ldrb	r3, [r7, #11]
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	68f8      	ldr	r0, [r7, #12]
 8009aa2:	f7ff fd3d 	bl	8009520 <USBH_MSC_BOT_Process>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009aaa:	7dfb      	ldrb	r3, [r7, #23]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d12d      	bne.n	8009b0c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ab6:	3303      	adds	r3, #3
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	461a      	mov	r2, r3
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ac2:	3302      	adds	r3, #2
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	021b      	lsls	r3, r3, #8
 8009ac8:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009ad6:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	061b      	lsls	r3, r3, #24
 8009ae2:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009aee:	3307      	adds	r3, #7
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	b29a      	uxth	r2, r3
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009afa:	3306      	adds	r3, #6
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	021b      	lsls	r3, r3, #8
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	4313      	orrs	r3, r2
 8009b06:	b29a      	uxth	r2, r3
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	809a      	strh	r2, [r3, #4]
      break;
 8009b0c:	bf00      	nop
  }

  return error;
 8009b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3718      	adds	r7, #24
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b086      	sub	sp, #24
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	60f8      	str	r0, [r7, #12]
 8009b20:	460b      	mov	r3, r1
 8009b22:	607a      	str	r2, [r7, #4]
 8009b24:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8009b26:	2302      	movs	r3, #2
 8009b28:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b30:	69db      	ldr	r3, [r3, #28]
 8009b32:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d002      	beq.n	8009b44 <USBH_MSC_SCSI_Inquiry+0x2c>
 8009b3e:	2b02      	cmp	r3, #2
 8009b40:	d03d      	beq.n	8009bbe <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8009b42:	e089      	b.n	8009c58 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	2224      	movs	r2, #36	; 0x24
 8009b48:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	2280      	movs	r2, #128	; 0x80
 8009b4e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	220a      	movs	r2, #10
 8009b56:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	3363      	adds	r3, #99	; 0x63
 8009b5e:	220a      	movs	r2, #10
 8009b60:	2100      	movs	r1, #0
 8009b62:	4618      	mov	r0, r3
 8009b64:	f005 fd04 	bl	800f570 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	2212      	movs	r2, #18
 8009b6c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009b70:	7afb      	ldrb	r3, [r7, #11]
 8009b72:	015b      	lsls	r3, r3, #5
 8009b74:	b2da      	uxtb	r2, r3
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	2200      	movs	r2, #0
 8009b88:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	2224      	movs	r2, #36	; 0x24
 8009b90:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	2200      	movs	r2, #0
 8009b98:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	2202      	movs	r2, #2
 8009ba8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	f103 0210 	add.w	r2, r3, #16
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	75fb      	strb	r3, [r7, #23]
      break;
 8009bbc:	e04c      	b.n	8009c58 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009bbe:	7afb      	ldrb	r3, [r7, #11]
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	68f8      	ldr	r0, [r7, #12]
 8009bc4:	f7ff fcac 	bl	8009520 <USBH_MSC_BOT_Process>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009bcc:	7dfb      	ldrb	r3, [r7, #23]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d141      	bne.n	8009c56 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8009bd2:	2222      	movs	r2, #34	; 0x22
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f005 fcca 	bl	800f570 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	f003 031f 	and.w	r3, r3, #31
 8009be8:	b2da      	uxtb	r2, r3
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	095b      	lsrs	r3, r3, #5
 8009bf8:	b2da      	uxtb	r2, r3
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c04:	3301      	adds	r3, #1
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	b25b      	sxtb	r3, r3
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	da03      	bge.n	8009c16 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2201      	movs	r2, #1
 8009c12:	709a      	strb	r2, [r3, #2]
 8009c14:	e002      	b.n	8009c1c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	1cd8      	adds	r0, r3, #3
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c26:	3308      	adds	r3, #8
 8009c28:	2208      	movs	r2, #8
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	f005 fd0e 	bl	800f64c <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f103 000c 	add.w	r0, r3, #12
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c3c:	3310      	adds	r3, #16
 8009c3e:	2210      	movs	r2, #16
 8009c40:	4619      	mov	r1, r3
 8009c42:	f005 fd03 	bl	800f64c <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	331d      	adds	r3, #29
 8009c4a:	693a      	ldr	r2, [r7, #16]
 8009c4c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8009c50:	3220      	adds	r2, #32
 8009c52:	6812      	ldr	r2, [r2, #0]
 8009c54:	601a      	str	r2, [r3, #0]
      break;
 8009c56:	bf00      	nop
  }

  return error;
 8009c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3718      	adds	r7, #24
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}

08009c62 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b086      	sub	sp, #24
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	60f8      	str	r0, [r7, #12]
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	607a      	str	r2, [r7, #4]
 8009c6e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009c70:	2302      	movs	r3, #2
 8009c72:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c7a:	69db      	ldr	r3, [r3, #28]
 8009c7c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d002      	beq.n	8009c8e <USBH_MSC_SCSI_RequestSense+0x2c>
 8009c88:	2b02      	cmp	r3, #2
 8009c8a:	d03d      	beq.n	8009d08 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8009c8c:	e05d      	b.n	8009d4a <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	220e      	movs	r2, #14
 8009c92:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	2280      	movs	r2, #128	; 0x80
 8009c98:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	220a      	movs	r2, #10
 8009ca0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	3363      	adds	r3, #99	; 0x63
 8009ca8:	2210      	movs	r2, #16
 8009caa:	2100      	movs	r1, #0
 8009cac:	4618      	mov	r0, r3
 8009cae:	f005 fc5f 	bl	800f570 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	2203      	movs	r2, #3
 8009cb6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009cba:	7afb      	ldrb	r3, [r7, #11]
 8009cbc:	015b      	lsls	r3, r3, #5
 8009cbe:	b2da      	uxtb	r2, r3
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	220e      	movs	r2, #14
 8009cda:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	2201      	movs	r2, #1
 8009cea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	2202      	movs	r2, #2
 8009cf2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	f103 0210 	add.w	r2, r3, #16
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009d02:	2301      	movs	r3, #1
 8009d04:	75fb      	strb	r3, [r7, #23]
      break;
 8009d06:	e020      	b.n	8009d4a <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009d08:	7afb      	ldrb	r3, [r7, #11]
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	68f8      	ldr	r0, [r7, #12]
 8009d0e:	f7ff fc07 	bl	8009520 <USBH_MSC_BOT_Process>
 8009d12:	4603      	mov	r3, r0
 8009d14:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009d16:	7dfb      	ldrb	r3, [r7, #23]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d115      	bne.n	8009d48 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d22:	3302      	adds	r3, #2
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	f003 030f 	and.w	r3, r3, #15
 8009d2a:	b2da      	uxtb	r2, r3
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d36:	7b1a      	ldrb	r2, [r3, #12]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d42:	7b5a      	ldrb	r2, [r3, #13]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	709a      	strb	r2, [r3, #2]
      break;
 8009d48:	bf00      	nop
  }

  return error;
 8009d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3718      	adds	r7, #24
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b086      	sub	sp, #24
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	60f8      	str	r0, [r7, #12]
 8009d5c:	607a      	str	r2, [r7, #4]
 8009d5e:	603b      	str	r3, [r7, #0]
 8009d60:	460b      	mov	r3, r1
 8009d62:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009d64:	2302      	movs	r3, #2
 8009d66:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d6e:	69db      	ldr	r3, [r3, #28]
 8009d70:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	d002      	beq.n	8009d82 <USBH_MSC_SCSI_Write+0x2e>
 8009d7c:	2b02      	cmp	r3, #2
 8009d7e:	d047      	beq.n	8009e10 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009d80:	e04e      	b.n	8009e20 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009d88:	461a      	mov	r2, r3
 8009d8a:	6a3b      	ldr	r3, [r7, #32]
 8009d8c:	fb03 f202 	mul.w	r2, r3, r2
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	2200      	movs	r2, #0
 8009d98:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	220a      	movs	r2, #10
 8009da0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	3363      	adds	r3, #99	; 0x63
 8009da8:	2210      	movs	r2, #16
 8009daa:	2100      	movs	r1, #0
 8009dac:	4618      	mov	r0, r3
 8009dae:	f005 fbdf 	bl	800f570 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	222a      	movs	r2, #42	; 0x2a
 8009db6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009dba:	79fa      	ldrb	r2, [r7, #7]
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009dc2:	79ba      	ldrb	r2, [r7, #6]
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009dca:	797a      	ldrb	r2, [r7, #5]
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009dd2:	1d3b      	adds	r3, r7, #4
 8009dd4:	781a      	ldrb	r2, [r3, #0]
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009ddc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009de6:	f107 0320 	add.w	r3, r7, #32
 8009dea:	781a      	ldrb	r2, [r3, #0]
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	2201      	movs	r2, #1
 8009df6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	2202      	movs	r2, #2
 8009dfe:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	683a      	ldr	r2, [r7, #0]
 8009e06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	75fb      	strb	r3, [r7, #23]
      break;
 8009e0e:	e007      	b.n	8009e20 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009e10:	7afb      	ldrb	r3, [r7, #11]
 8009e12:	4619      	mov	r1, r3
 8009e14:	68f8      	ldr	r0, [r7, #12]
 8009e16:	f7ff fb83 	bl	8009520 <USBH_MSC_BOT_Process>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	75fb      	strb	r3, [r7, #23]
      break;
 8009e1e:	bf00      	nop
  }

  return error;
 8009e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3718      	adds	r7, #24
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}

08009e2a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b086      	sub	sp, #24
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	60f8      	str	r0, [r7, #12]
 8009e32:	607a      	str	r2, [r7, #4]
 8009e34:	603b      	str	r3, [r7, #0]
 8009e36:	460b      	mov	r3, r1
 8009e38:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009e3a:	2302      	movs	r3, #2
 8009e3c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e44:	69db      	ldr	r3, [r3, #28]
 8009e46:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d002      	beq.n	8009e58 <USBH_MSC_SCSI_Read+0x2e>
 8009e52:	2b02      	cmp	r3, #2
 8009e54:	d047      	beq.n	8009ee6 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009e56:	e04e      	b.n	8009ef6 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009e5e:	461a      	mov	r2, r3
 8009e60:	6a3b      	ldr	r3, [r7, #32]
 8009e62:	fb03 f202 	mul.w	r2, r3, r2
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	2280      	movs	r2, #128	; 0x80
 8009e6e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	220a      	movs	r2, #10
 8009e76:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	3363      	adds	r3, #99	; 0x63
 8009e7e:	2210      	movs	r2, #16
 8009e80:	2100      	movs	r1, #0
 8009e82:	4618      	mov	r0, r3
 8009e84:	f005 fb74 	bl	800f570 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	2228      	movs	r2, #40	; 0x28
 8009e8c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009e90:	79fa      	ldrb	r2, [r7, #7]
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009e98:	79ba      	ldrb	r2, [r7, #6]
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009ea0:	797a      	ldrb	r2, [r7, #5]
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009ea8:	1d3b      	adds	r3, r7, #4
 8009eaa:	781a      	ldrb	r2, [r3, #0]
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009eb2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009ebc:	f107 0320 	add.w	r3, r7, #32
 8009ec0:	781a      	ldrb	r2, [r3, #0]
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	2201      	movs	r2, #1
 8009ecc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	2202      	movs	r2, #2
 8009ed4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	683a      	ldr	r2, [r7, #0]
 8009edc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ee4:	e007      	b.n	8009ef6 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009ee6:	7afb      	ldrb	r3, [r7, #11]
 8009ee8:	4619      	mov	r1, r3
 8009eea:	68f8      	ldr	r0, [r7, #12]
 8009eec:	f7ff fb18 	bl	8009520 <USBH_MSC_BOT_Process>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ef4:	bf00      	nop
  }

  return error;
 8009ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3718      	adds	r7, #24
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	4613      	mov	r3, r2
 8009f0c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d101      	bne.n	8009f18 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009f14:	2302      	movs	r3, #2
 8009f16:	e029      	b.n	8009f6c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	79fa      	ldrb	r2, [r7, #7]
 8009f1c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2200      	movs	r2, #0
 8009f24:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009f30:	68f8      	ldr	r0, [r7, #12]
 8009f32:	f000 f81f 	bl	8009f74 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2200      	movs	r2, #0
 8009f42:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2200      	movs	r2, #0
 8009f52:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d003      	beq.n	8009f64 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	68ba      	ldr	r2, [r7, #8]
 8009f60:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009f64:	68f8      	ldr	r0, [r7, #12]
 8009f66:	f005 f823 	bl	800efb0 <USBH_LL_Init>

  return USBH_OK;
 8009f6a:	2300      	movs	r3, #0
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3710      	adds	r7, #16
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b085      	sub	sp, #20
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009f80:	2300      	movs	r3, #0
 8009f82:	60fb      	str	r3, [r7, #12]
 8009f84:	e009      	b.n	8009f9a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	33e0      	adds	r3, #224	; 0xe0
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	4413      	add	r3, r2
 8009f90:	2200      	movs	r2, #0
 8009f92:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	3301      	adds	r3, #1
 8009f98:	60fb      	str	r3, [r7, #12]
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2b0f      	cmp	r3, #15
 8009f9e:	d9f2      	bls.n	8009f86 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	60fb      	str	r3, [r7, #12]
 8009fa4:	e009      	b.n	8009fba <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	4413      	add	r3, r2
 8009fac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	60fb      	str	r3, [r7, #12]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fc0:	d3f1      	bcc.n	8009fa6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2240      	movs	r2, #64	; 0x40
 8009fe6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2200      	movs	r2, #0
 800a002:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a00e:	2300      	movs	r3, #0
}
 800a010:	4618      	mov	r0, r3
 800a012:	3714      	adds	r7, #20
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr

0800a01c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b085      	sub	sp, #20
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a026:	2300      	movs	r3, #0
 800a028:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d016      	beq.n	800a05e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a036:	2b00      	cmp	r3, #0
 800a038:	d10e      	bne.n	800a058 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a040:	1c59      	adds	r1, r3, #1
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a048:	687a      	ldr	r2, [r7, #4]
 800a04a:	33de      	adds	r3, #222	; 0xde
 800a04c:	6839      	ldr	r1, [r7, #0]
 800a04e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a052:	2300      	movs	r3, #0
 800a054:	73fb      	strb	r3, [r7, #15]
 800a056:	e004      	b.n	800a062 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a058:	2302      	movs	r3, #2
 800a05a:	73fb      	strb	r3, [r7, #15]
 800a05c:	e001      	b.n	800a062 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a05e:	2302      	movs	r3, #2
 800a060:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a062:	7bfb      	ldrb	r3, [r7, #15]
}
 800a064:	4618      	mov	r0, r3
 800a066:	3714      	adds	r7, #20
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a070:	b480      	push	{r7}
 800a072:	b085      	sub	sp, #20
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	460b      	mov	r3, r1
 800a07a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a07c:	2300      	movs	r3, #0
 800a07e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a086:	78fa      	ldrb	r2, [r7, #3]
 800a088:	429a      	cmp	r2, r3
 800a08a:	d204      	bcs.n	800a096 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	78fa      	ldrb	r2, [r7, #3]
 800a090:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a094:	e001      	b.n	800a09a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a096:	2302      	movs	r3, #2
 800a098:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a09a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3714      	adds	r7, #20
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr

0800a0a8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b087      	sub	sp, #28
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	4608      	mov	r0, r1
 800a0b2:	4611      	mov	r1, r2
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	70fb      	strb	r3, [r7, #3]
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	70bb      	strb	r3, [r7, #2]
 800a0be:	4613      	mov	r3, r2
 800a0c0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a0d0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a0d2:	e025      	b.n	800a120 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a0d4:	7dfb      	ldrb	r3, [r7, #23]
 800a0d6:	221a      	movs	r2, #26
 800a0d8:	fb02 f303 	mul.w	r3, r2, r3
 800a0dc:	3308      	adds	r3, #8
 800a0de:	68fa      	ldr	r2, [r7, #12]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	3302      	adds	r3, #2
 800a0e4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	795b      	ldrb	r3, [r3, #5]
 800a0ea:	78fa      	ldrb	r2, [r7, #3]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d002      	beq.n	800a0f6 <USBH_FindInterface+0x4e>
 800a0f0:	78fb      	ldrb	r3, [r7, #3]
 800a0f2:	2bff      	cmp	r3, #255	; 0xff
 800a0f4:	d111      	bne.n	800a11a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a0fa:	78ba      	ldrb	r2, [r7, #2]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d002      	beq.n	800a106 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a100:	78bb      	ldrb	r3, [r7, #2]
 800a102:	2bff      	cmp	r3, #255	; 0xff
 800a104:	d109      	bne.n	800a11a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a10a:	787a      	ldrb	r2, [r7, #1]
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d002      	beq.n	800a116 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a110:	787b      	ldrb	r3, [r7, #1]
 800a112:	2bff      	cmp	r3, #255	; 0xff
 800a114:	d101      	bne.n	800a11a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a116:	7dfb      	ldrb	r3, [r7, #23]
 800a118:	e006      	b.n	800a128 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a11a:	7dfb      	ldrb	r3, [r7, #23]
 800a11c:	3301      	adds	r3, #1
 800a11e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a120:	7dfb      	ldrb	r3, [r7, #23]
 800a122:	2b01      	cmp	r3, #1
 800a124:	d9d6      	bls.n	800a0d4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a126:	23ff      	movs	r3, #255	; 0xff
}
 800a128:	4618      	mov	r0, r3
 800a12a:	371c      	adds	r7, #28
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr

0800a134 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f004 ff73 	bl	800f028 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a142:	2101      	movs	r1, #1
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f005 f88c 	bl	800f262 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a14a:	2300      	movs	r3, #0
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3708      	adds	r7, #8
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b088      	sub	sp, #32
 800a158:	af04      	add	r7, sp, #16
 800a15a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a15c:	2302      	movs	r3, #2
 800a15e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a160:	2300      	movs	r3, #0
 800a162:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d102      	bne.n	800a176 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2203      	movs	r2, #3
 800a174:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	2b0b      	cmp	r3, #11
 800a17e:	f200 81be 	bhi.w	800a4fe <USBH_Process+0x3aa>
 800a182:	a201      	add	r2, pc, #4	; (adr r2, 800a188 <USBH_Process+0x34>)
 800a184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a188:	0800a1b9 	.word	0x0800a1b9
 800a18c:	0800a1eb 	.word	0x0800a1eb
 800a190:	0800a253 	.word	0x0800a253
 800a194:	0800a499 	.word	0x0800a499
 800a198:	0800a4ff 	.word	0x0800a4ff
 800a19c:	0800a2f7 	.word	0x0800a2f7
 800a1a0:	0800a43f 	.word	0x0800a43f
 800a1a4:	0800a32d 	.word	0x0800a32d
 800a1a8:	0800a34d 	.word	0x0800a34d
 800a1ac:	0800a36d 	.word	0x0800a36d
 800a1b0:	0800a3b1 	.word	0x0800a3b1
 800a1b4:	0800a481 	.word	0x0800a481
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a1be:	b2db      	uxtb	r3, r3
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	f000 819e 	beq.w	800a502 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a1cc:	20c8      	movs	r0, #200	; 0xc8
 800a1ce:	f005 f8bf 	bl	800f350 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f004 ff85 	bl	800f0e2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a1e8:	e18b      	b.n	800a502 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d107      	bne.n	800a204 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2202      	movs	r2, #2
 800a200:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a202:	e18d      	b.n	800a520 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a20a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a20e:	d914      	bls.n	800a23a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a216:	3301      	adds	r3, #1
 800a218:	b2da      	uxtb	r2, r3
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a226:	2b03      	cmp	r3, #3
 800a228:	d903      	bls.n	800a232 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	220d      	movs	r2, #13
 800a22e:	701a      	strb	r2, [r3, #0]
      break;
 800a230:	e176      	b.n	800a520 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2200      	movs	r2, #0
 800a236:	701a      	strb	r2, [r3, #0]
      break;
 800a238:	e172      	b.n	800a520 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a240:	f103 020a 	add.w	r2, r3, #10
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a24a:	200a      	movs	r0, #10
 800a24c:	f005 f880 	bl	800f350 <USBH_Delay>
      break;
 800a250:	e166      	b.n	800a520 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d005      	beq.n	800a268 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a262:	2104      	movs	r1, #4
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a268:	2064      	movs	r0, #100	; 0x64
 800a26a:	f005 f871 	bl	800f350 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f004 ff10 	bl	800f094 <USBH_LL_GetSpeed>
 800a274:	4603      	mov	r3, r0
 800a276:	461a      	mov	r2, r3
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2205      	movs	r2, #5
 800a282:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a284:	2100      	movs	r1, #0
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f001 fa2b 	bl	800b6e2 <USBH_AllocPipe>
 800a28c:	4603      	mov	r3, r0
 800a28e:	461a      	mov	r2, r3
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a294:	2180      	movs	r1, #128	; 0x80
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f001 fa23 	bl	800b6e2 <USBH_AllocPipe>
 800a29c:	4603      	mov	r3, r0
 800a29e:	461a      	mov	r2, r3
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	7919      	ldrb	r1, [r3, #4]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a2b8:	b292      	uxth	r2, r2
 800a2ba:	9202      	str	r2, [sp, #8]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	9201      	str	r2, [sp, #4]
 800a2c0:	9300      	str	r3, [sp, #0]
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2280      	movs	r2, #128	; 0x80
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f001 f9dc 	bl	800b684 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	7959      	ldrb	r1, [r3, #5]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a2e0:	b292      	uxth	r2, r2
 800a2e2:	9202      	str	r2, [sp, #8]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	9201      	str	r2, [sp, #4]
 800a2e8:	9300      	str	r3, [sp, #0]
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f001 f9c8 	bl	800b684 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a2f4:	e114      	b.n	800a520 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 f918 	bl	800a52c <USBH_HandleEnum>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a300:	7bbb      	ldrb	r3, [r7, #14]
 800a302:	b2db      	uxtb	r3, r3
 800a304:	2b00      	cmp	r3, #0
 800a306:	f040 80fe 	bne.w	800a506 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2200      	movs	r2, #0
 800a30e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a318:	2b01      	cmp	r3, #1
 800a31a:	d103      	bne.n	800a324 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2208      	movs	r2, #8
 800a320:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a322:	e0f0      	b.n	800a506 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2207      	movs	r2, #7
 800a328:	701a      	strb	r2, [r3, #0]
      break;
 800a32a:	e0ec      	b.n	800a506 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a332:	2b00      	cmp	r3, #0
 800a334:	f000 80e9 	beq.w	800a50a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a33e:	2101      	movs	r1, #1
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2208      	movs	r2, #8
 800a348:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800a34a:	e0de      	b.n	800a50a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a352:	b29b      	uxth	r3, r3
 800a354:	4619      	mov	r1, r3
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 fc2c 	bl	800abb4 <USBH_SetCfg>
 800a35c:	4603      	mov	r3, r0
 800a35e:	2b00      	cmp	r3, #0
 800a360:	f040 80d5 	bne.w	800a50e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2209      	movs	r2, #9
 800a368:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a36a:	e0d0      	b.n	800a50e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a372:	f003 0320 	and.w	r3, r3, #32
 800a376:	2b00      	cmp	r3, #0
 800a378:	d016      	beq.n	800a3a8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a37a:	2101      	movs	r1, #1
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 fc3c 	bl	800abfa <USBH_SetFeature>
 800a382:	4603      	mov	r3, r0
 800a384:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a386:	7bbb      	ldrb	r3, [r7, #14]
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d103      	bne.n	800a396 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	220a      	movs	r2, #10
 800a392:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a394:	e0bd      	b.n	800a512 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800a396:	7bbb      	ldrb	r3, [r7, #14]
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	2b03      	cmp	r3, #3
 800a39c:	f040 80b9 	bne.w	800a512 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	220a      	movs	r2, #10
 800a3a4:	701a      	strb	r2, [r3, #0]
      break;
 800a3a6:	e0b4      	b.n	800a512 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	220a      	movs	r2, #10
 800a3ac:	701a      	strb	r2, [r3, #0]
      break;
 800a3ae:	e0b0      	b.n	800a512 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	f000 80ad 	beq.w	800a516 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	73fb      	strb	r3, [r7, #15]
 800a3c8:	e016      	b.n	800a3f8 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a3ca:	7bfa      	ldrb	r2, [r7, #15]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	32de      	adds	r2, #222	; 0xde
 800a3d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3d4:	791a      	ldrb	r2, [r3, #4]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d108      	bne.n	800a3f2 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a3e0:	7bfa      	ldrb	r2, [r7, #15]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	32de      	adds	r2, #222	; 0xde
 800a3e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a3f0:	e005      	b.n	800a3fe <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a3f2:	7bfb      	ldrb	r3, [r7, #15]
 800a3f4:	3301      	adds	r3, #1
 800a3f6:	73fb      	strb	r3, [r7, #15]
 800a3f8:	7bfb      	ldrb	r3, [r7, #15]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d0e5      	beq.n	800a3ca <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a404:	2b00      	cmp	r3, #0
 800a406:	d016      	beq.n	800a436 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	4798      	blx	r3
 800a414:	4603      	mov	r3, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d109      	bne.n	800a42e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2206      	movs	r2, #6
 800a41e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a426:	2103      	movs	r1, #3
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a42c:	e073      	b.n	800a516 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	220d      	movs	r2, #13
 800a432:	701a      	strb	r2, [r3, #0]
      break;
 800a434:	e06f      	b.n	800a516 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	220d      	movs	r2, #13
 800a43a:	701a      	strb	r2, [r3, #0]
      break;
 800a43c:	e06b      	b.n	800a516 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a444:	2b00      	cmp	r3, #0
 800a446:	d017      	beq.n	800a478 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a44e:	691b      	ldr	r3, [r3, #16]
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	4798      	blx	r3
 800a454:	4603      	mov	r3, r0
 800a456:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a458:	7bbb      	ldrb	r3, [r7, #14]
 800a45a:	b2db      	uxtb	r3, r3
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d103      	bne.n	800a468 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	220b      	movs	r2, #11
 800a464:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a466:	e058      	b.n	800a51a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800a468:	7bbb      	ldrb	r3, [r7, #14]
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	2b02      	cmp	r3, #2
 800a46e:	d154      	bne.n	800a51a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	220d      	movs	r2, #13
 800a474:	701a      	strb	r2, [r3, #0]
      break;
 800a476:	e050      	b.n	800a51a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	220d      	movs	r2, #13
 800a47c:	701a      	strb	r2, [r3, #0]
      break;
 800a47e:	e04c      	b.n	800a51a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a486:	2b00      	cmp	r3, #0
 800a488:	d049      	beq.n	800a51e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a490:	695b      	ldr	r3, [r3, #20]
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	4798      	blx	r3
      }
      break;
 800a496:	e042      	b.n	800a51e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2200      	movs	r2, #0
 800a49c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f7ff fd67 	bl	8009f74 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d009      	beq.n	800a4c4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4b6:	68db      	ldr	r3, [r3, #12]
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d005      	beq.n	800a4da <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a4d4:	2105      	movs	r1, #5
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d107      	bne.n	800a4f6 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f7ff fe20 	bl	800a134 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a4f4:	e014      	b.n	800a520 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f004 fd96 	bl	800f028 <USBH_LL_Start>
      break;
 800a4fc:	e010      	b.n	800a520 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800a4fe:	bf00      	nop
 800a500:	e00e      	b.n	800a520 <USBH_Process+0x3cc>
      break;
 800a502:	bf00      	nop
 800a504:	e00c      	b.n	800a520 <USBH_Process+0x3cc>
      break;
 800a506:	bf00      	nop
 800a508:	e00a      	b.n	800a520 <USBH_Process+0x3cc>
    break;
 800a50a:	bf00      	nop
 800a50c:	e008      	b.n	800a520 <USBH_Process+0x3cc>
      break;
 800a50e:	bf00      	nop
 800a510:	e006      	b.n	800a520 <USBH_Process+0x3cc>
      break;
 800a512:	bf00      	nop
 800a514:	e004      	b.n	800a520 <USBH_Process+0x3cc>
      break;
 800a516:	bf00      	nop
 800a518:	e002      	b.n	800a520 <USBH_Process+0x3cc>
      break;
 800a51a:	bf00      	nop
 800a51c:	e000      	b.n	800a520 <USBH_Process+0x3cc>
      break;
 800a51e:	bf00      	nop
  }
  return USBH_OK;
 800a520:	2300      	movs	r3, #0
}
 800a522:	4618      	mov	r0, r3
 800a524:	3710      	adds	r7, #16
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop

0800a52c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b088      	sub	sp, #32
 800a530:	af04      	add	r7, sp, #16
 800a532:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a534:	2301      	movs	r3, #1
 800a536:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a538:	2301      	movs	r3, #1
 800a53a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	785b      	ldrb	r3, [r3, #1]
 800a540:	2b07      	cmp	r3, #7
 800a542:	f200 81c1 	bhi.w	800a8c8 <USBH_HandleEnum+0x39c>
 800a546:	a201      	add	r2, pc, #4	; (adr r2, 800a54c <USBH_HandleEnum+0x20>)
 800a548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a54c:	0800a56d 	.word	0x0800a56d
 800a550:	0800a62b 	.word	0x0800a62b
 800a554:	0800a695 	.word	0x0800a695
 800a558:	0800a723 	.word	0x0800a723
 800a55c:	0800a78d 	.word	0x0800a78d
 800a560:	0800a7fd 	.word	0x0800a7fd
 800a564:	0800a843 	.word	0x0800a843
 800a568:	0800a889 	.word	0x0800a889
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a56c:	2108      	movs	r1, #8
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 fa50 	bl	800aa14 <USBH_Get_DevDesc>
 800a574:	4603      	mov	r3, r0
 800a576:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a578:	7bbb      	ldrb	r3, [r7, #14]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d130      	bne.n	800a5e0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	7919      	ldrb	r1, [r3, #4]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a5a2:	b292      	uxth	r2, r2
 800a5a4:	9202      	str	r2, [sp, #8]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	9201      	str	r2, [sp, #4]
 800a5aa:	9300      	str	r3, [sp, #0]
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	2280      	movs	r2, #128	; 0x80
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f001 f867 	bl	800b684 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	7959      	ldrb	r1, [r3, #5]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a5ca:	b292      	uxth	r2, r2
 800a5cc:	9202      	str	r2, [sp, #8]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	9201      	str	r2, [sp, #4]
 800a5d2:	9300      	str	r3, [sp, #0]
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f001 f853 	bl	800b684 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a5de:	e175      	b.n	800a8cc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a5e0:	7bbb      	ldrb	r3, [r7, #14]
 800a5e2:	2b03      	cmp	r3, #3
 800a5e4:	f040 8172 	bne.w	800a8cc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	b2da      	uxtb	r2, r3
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a5fe:	2b03      	cmp	r3, #3
 800a600:	d903      	bls.n	800a60a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	220d      	movs	r2, #13
 800a606:	701a      	strb	r2, [r3, #0]
      break;
 800a608:	e160      	b.n	800a8cc <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	795b      	ldrb	r3, [r3, #5]
 800a60e:	4619      	mov	r1, r3
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f001 f887 	bl	800b724 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	791b      	ldrb	r3, [r3, #4]
 800a61a:	4619      	mov	r1, r3
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f001 f881 	bl	800b724 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2200      	movs	r2, #0
 800a626:	701a      	strb	r2, [r3, #0]
      break;
 800a628:	e150      	b.n	800a8cc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a62a:	2112      	movs	r1, #18
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 f9f1 	bl	800aa14 <USBH_Get_DevDesc>
 800a632:	4603      	mov	r3, r0
 800a634:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a636:	7bbb      	ldrb	r3, [r7, #14]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d103      	bne.n	800a644 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2202      	movs	r2, #2
 800a640:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a642:	e145      	b.n	800a8d0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a644:	7bbb      	ldrb	r3, [r7, #14]
 800a646:	2b03      	cmp	r3, #3
 800a648:	f040 8142 	bne.w	800a8d0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a652:	3301      	adds	r3, #1
 800a654:	b2da      	uxtb	r2, r3
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a662:	2b03      	cmp	r3, #3
 800a664:	d903      	bls.n	800a66e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	220d      	movs	r2, #13
 800a66a:	701a      	strb	r2, [r3, #0]
      break;
 800a66c:	e130      	b.n	800a8d0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	795b      	ldrb	r3, [r3, #5]
 800a672:	4619      	mov	r1, r3
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f001 f855 	bl	800b724 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	791b      	ldrb	r3, [r3, #4]
 800a67e:	4619      	mov	r1, r3
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f001 f84f 	bl	800b724 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2200      	movs	r2, #0
 800a68a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2200      	movs	r2, #0
 800a690:	701a      	strb	r2, [r3, #0]
      break;
 800a692:	e11d      	b.n	800a8d0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a694:	2101      	movs	r1, #1
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f000 fa68 	bl	800ab6c <USBH_SetAddress>
 800a69c:	4603      	mov	r3, r0
 800a69e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a6a0:	7bbb      	ldrb	r3, [r7, #14]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d132      	bne.n	800a70c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a6a6:	2002      	movs	r0, #2
 800a6a8:	f004 fe52 	bl	800f350 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2203      	movs	r2, #3
 800a6b8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	7919      	ldrb	r1, [r3, #4]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a6ce:	b292      	uxth	r2, r2
 800a6d0:	9202      	str	r2, [sp, #8]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	9201      	str	r2, [sp, #4]
 800a6d6:	9300      	str	r3, [sp, #0]
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2280      	movs	r2, #128	; 0x80
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f000 ffd1 	bl	800b684 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	7959      	ldrb	r1, [r3, #5]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a6f6:	b292      	uxth	r2, r2
 800a6f8:	9202      	str	r2, [sp, #8]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	9201      	str	r2, [sp, #4]
 800a6fe:	9300      	str	r3, [sp, #0]
 800a700:	4603      	mov	r3, r0
 800a702:	2200      	movs	r2, #0
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 ffbd 	bl	800b684 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a70a:	e0e3      	b.n	800a8d4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a70c:	7bbb      	ldrb	r3, [r7, #14]
 800a70e:	2b03      	cmp	r3, #3
 800a710:	f040 80e0 	bne.w	800a8d4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	220d      	movs	r2, #13
 800a718:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2200      	movs	r2, #0
 800a71e:	705a      	strb	r2, [r3, #1]
      break;
 800a720:	e0d8      	b.n	800a8d4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a722:	2109      	movs	r1, #9
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 f99d 	bl	800aa64 <USBH_Get_CfgDesc>
 800a72a:	4603      	mov	r3, r0
 800a72c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a72e:	7bbb      	ldrb	r3, [r7, #14]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d103      	bne.n	800a73c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2204      	movs	r2, #4
 800a738:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a73a:	e0cd      	b.n	800a8d8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a73c:	7bbb      	ldrb	r3, [r7, #14]
 800a73e:	2b03      	cmp	r3, #3
 800a740:	f040 80ca 	bne.w	800a8d8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a74a:	3301      	adds	r3, #1
 800a74c:	b2da      	uxtb	r2, r3
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a75a:	2b03      	cmp	r3, #3
 800a75c:	d903      	bls.n	800a766 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	220d      	movs	r2, #13
 800a762:	701a      	strb	r2, [r3, #0]
      break;
 800a764:	e0b8      	b.n	800a8d8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	795b      	ldrb	r3, [r3, #5]
 800a76a:	4619      	mov	r1, r3
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f000 ffd9 	bl	800b724 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	791b      	ldrb	r3, [r3, #4]
 800a776:	4619      	mov	r1, r3
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f000 ffd3 	bl	800b724 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2200      	movs	r2, #0
 800a782:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2200      	movs	r2, #0
 800a788:	701a      	strb	r2, [r3, #0]
      break;
 800a78a:	e0a5      	b.n	800a8d8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a792:	4619      	mov	r1, r3
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 f965 	bl	800aa64 <USBH_Get_CfgDesc>
 800a79a:	4603      	mov	r3, r0
 800a79c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a79e:	7bbb      	ldrb	r3, [r7, #14]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d103      	bne.n	800a7ac <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2205      	movs	r2, #5
 800a7a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a7aa:	e097      	b.n	800a8dc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a7ac:	7bbb      	ldrb	r3, [r7, #14]
 800a7ae:	2b03      	cmp	r3, #3
 800a7b0:	f040 8094 	bne.w	800a8dc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	b2da      	uxtb	r2, r3
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a7ca:	2b03      	cmp	r3, #3
 800a7cc:	d903      	bls.n	800a7d6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	220d      	movs	r2, #13
 800a7d2:	701a      	strb	r2, [r3, #0]
      break;
 800a7d4:	e082      	b.n	800a8dc <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	795b      	ldrb	r3, [r3, #5]
 800a7da:	4619      	mov	r1, r3
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 ffa1 	bl	800b724 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	791b      	ldrb	r3, [r3, #4]
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f000 ff9b 	bl	800b724 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	701a      	strb	r2, [r3, #0]
      break;
 800a7fa:	e06f      	b.n	800a8dc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a802:	2b00      	cmp	r3, #0
 800a804:	d019      	beq.n	800a83a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a812:	23ff      	movs	r3, #255	; 0xff
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f000 f949 	bl	800aaac <USBH_Get_StringDesc>
 800a81a:	4603      	mov	r3, r0
 800a81c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a81e:	7bbb      	ldrb	r3, [r7, #14]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d103      	bne.n	800a82c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2206      	movs	r2, #6
 800a828:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a82a:	e059      	b.n	800a8e0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a82c:	7bbb      	ldrb	r3, [r7, #14]
 800a82e:	2b03      	cmp	r3, #3
 800a830:	d156      	bne.n	800a8e0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2206      	movs	r2, #6
 800a836:	705a      	strb	r2, [r3, #1]
      break;
 800a838:	e052      	b.n	800a8e0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2206      	movs	r2, #6
 800a83e:	705a      	strb	r2, [r3, #1]
      break;
 800a840:	e04e      	b.n	800a8e0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d019      	beq.n	800a880 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a858:	23ff      	movs	r3, #255	; 0xff
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 f926 	bl	800aaac <USBH_Get_StringDesc>
 800a860:	4603      	mov	r3, r0
 800a862:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a864:	7bbb      	ldrb	r3, [r7, #14]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d103      	bne.n	800a872 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2207      	movs	r2, #7
 800a86e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a870:	e038      	b.n	800a8e4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a872:	7bbb      	ldrb	r3, [r7, #14]
 800a874:	2b03      	cmp	r3, #3
 800a876:	d135      	bne.n	800a8e4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2207      	movs	r2, #7
 800a87c:	705a      	strb	r2, [r3, #1]
      break;
 800a87e:	e031      	b.n	800a8e4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2207      	movs	r2, #7
 800a884:	705a      	strb	r2, [r3, #1]
      break;
 800a886:	e02d      	b.n	800a8e4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d017      	beq.n	800a8c2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a89e:	23ff      	movs	r3, #255	; 0xff
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 f903 	bl	800aaac <USBH_Get_StringDesc>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a8aa:	7bbb      	ldrb	r3, [r7, #14]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d102      	bne.n	800a8b6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a8b4:	e018      	b.n	800a8e8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a8b6:	7bbb      	ldrb	r3, [r7, #14]
 800a8b8:	2b03      	cmp	r3, #3
 800a8ba:	d115      	bne.n	800a8e8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	73fb      	strb	r3, [r7, #15]
      break;
 800a8c0:	e012      	b.n	800a8e8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	73fb      	strb	r3, [r7, #15]
      break;
 800a8c6:	e00f      	b.n	800a8e8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800a8c8:	bf00      	nop
 800a8ca:	e00e      	b.n	800a8ea <USBH_HandleEnum+0x3be>
      break;
 800a8cc:	bf00      	nop
 800a8ce:	e00c      	b.n	800a8ea <USBH_HandleEnum+0x3be>
      break;
 800a8d0:	bf00      	nop
 800a8d2:	e00a      	b.n	800a8ea <USBH_HandleEnum+0x3be>
      break;
 800a8d4:	bf00      	nop
 800a8d6:	e008      	b.n	800a8ea <USBH_HandleEnum+0x3be>
      break;
 800a8d8:	bf00      	nop
 800a8da:	e006      	b.n	800a8ea <USBH_HandleEnum+0x3be>
      break;
 800a8dc:	bf00      	nop
 800a8de:	e004      	b.n	800a8ea <USBH_HandleEnum+0x3be>
      break;
 800a8e0:	bf00      	nop
 800a8e2:	e002      	b.n	800a8ea <USBH_HandleEnum+0x3be>
      break;
 800a8e4:	bf00      	nop
 800a8e6:	e000      	b.n	800a8ea <USBH_HandleEnum+0x3be>
      break;
 800a8e8:	bf00      	nop
  }
  return Status;
 800a8ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3710      	adds	r7, #16
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	683a      	ldr	r2, [r7, #0]
 800a902:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a906:	bf00      	nop
 800a908:	370c      	adds	r7, #12
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr

0800a912 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a912:	b580      	push	{r7, lr}
 800a914:	b082      	sub	sp, #8
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a920:	1c5a      	adds	r2, r3, #1
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 f804 	bl	800a936 <USBH_HandleSof>
}
 800a92e:	bf00      	nop
 800a930:	3708      	adds	r7, #8
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}

0800a936 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a936:	b580      	push	{r7, lr}
 800a938:	b082      	sub	sp, #8
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	b2db      	uxtb	r3, r3
 800a944:	2b0b      	cmp	r3, #11
 800a946:	d10a      	bne.n	800a95e <USBH_HandleSof+0x28>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d005      	beq.n	800a95e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a958:	699b      	ldr	r3, [r3, #24]
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	4798      	blx	r3
  }
}
 800a95e:	bf00      	nop
 800a960:	3708      	adds	r7, #8
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}

0800a966 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a966:	b480      	push	{r7}
 800a968:	b083      	sub	sp, #12
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2201      	movs	r2, #1
 800a972:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a976:	bf00      	nop
}
 800a978:	370c      	adds	r7, #12
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr

0800a982 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a982:	b480      	push	{r7}
 800a984:	b083      	sub	sp, #12
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2200      	movs	r2, #0
 800a98e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a992:	bf00      	nop
}
 800a994:	370c      	adds	r7, #12
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr

0800a99e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a99e:	b480      	push	{r7}
 800a9a0:	b083      	sub	sp, #12
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a9be:	2300      	movs	r3, #0
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	370c      	adds	r7, #12
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f004 fb36 	bl	800f05e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	791b      	ldrb	r3, [r3, #4]
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 fe93 	bl	800b724 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	795b      	ldrb	r3, [r3, #5]
 800aa02:	4619      	mov	r1, r3
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f000 fe8d 	bl	800b724 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800aa0a:	2300      	movs	r3, #0
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3708      	adds	r7, #8
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}

0800aa14 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b086      	sub	sp, #24
 800aa18:	af02      	add	r7, sp, #8
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	460b      	mov	r3, r1
 800aa1e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800aa26:	78fb      	ldrb	r3, [r7, #3]
 800aa28:	b29b      	uxth	r3, r3
 800aa2a:	9300      	str	r3, [sp, #0]
 800aa2c:	4613      	mov	r3, r2
 800aa2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aa32:	2100      	movs	r1, #0
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f000 f864 	bl	800ab02 <USBH_GetDescriptor>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800aa3e:	7bfb      	ldrb	r3, [r7, #15]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d10a      	bne.n	800aa5a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f203 3026 	addw	r0, r3, #806	; 0x326
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800aa50:	78fa      	ldrb	r2, [r7, #3]
 800aa52:	b292      	uxth	r2, r2
 800aa54:	4619      	mov	r1, r3
 800aa56:	f000 f919 	bl	800ac8c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800aa5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3710      	adds	r7, #16
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b086      	sub	sp, #24
 800aa68:	af02      	add	r7, sp, #8
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	331c      	adds	r3, #28
 800aa74:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800aa76:	887b      	ldrh	r3, [r7, #2]
 800aa78:	9300      	str	r3, [sp, #0]
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa80:	2100      	movs	r1, #0
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 f83d 	bl	800ab02 <USBH_GetDescriptor>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800aa8c:	7bfb      	ldrb	r3, [r7, #15]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d107      	bne.n	800aaa2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800aa92:	887b      	ldrh	r3, [r7, #2]
 800aa94:	461a      	mov	r2, r3
 800aa96:	68b9      	ldr	r1, [r7, #8]
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 f989 	bl	800adb0 <USBH_ParseCfgDesc>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aaa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3710      	adds	r7, #16
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b088      	sub	sp, #32
 800aab0:	af02      	add	r7, sp, #8
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	607a      	str	r2, [r7, #4]
 800aab6:	461a      	mov	r2, r3
 800aab8:	460b      	mov	r3, r1
 800aaba:	72fb      	strb	r3, [r7, #11]
 800aabc:	4613      	mov	r3, r2
 800aabe:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800aac0:	7afb      	ldrb	r3, [r7, #11]
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800aac8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800aad0:	893b      	ldrh	r3, [r7, #8]
 800aad2:	9300      	str	r3, [sp, #0]
 800aad4:	460b      	mov	r3, r1
 800aad6:	2100      	movs	r1, #0
 800aad8:	68f8      	ldr	r0, [r7, #12]
 800aada:	f000 f812 	bl	800ab02 <USBH_GetDescriptor>
 800aade:	4603      	mov	r3, r0
 800aae0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800aae2:	7dfb      	ldrb	r3, [r7, #23]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d107      	bne.n	800aaf8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800aaee:	893a      	ldrh	r2, [r7, #8]
 800aaf0:	6879      	ldr	r1, [r7, #4]
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f000 fb26 	bl	800b144 <USBH_ParseStringDesc>
  }

  return status;
 800aaf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3718      	adds	r7, #24
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}

0800ab02 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800ab02:	b580      	push	{r7, lr}
 800ab04:	b084      	sub	sp, #16
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	60f8      	str	r0, [r7, #12]
 800ab0a:	607b      	str	r3, [r7, #4]
 800ab0c:	460b      	mov	r3, r1
 800ab0e:	72fb      	strb	r3, [r7, #11]
 800ab10:	4613      	mov	r3, r2
 800ab12:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	789b      	ldrb	r3, [r3, #2]
 800ab18:	2b01      	cmp	r3, #1
 800ab1a:	d11c      	bne.n	800ab56 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ab1c:	7afb      	ldrb	r3, [r7, #11]
 800ab1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ab22:	b2da      	uxtb	r2, r3
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2206      	movs	r2, #6
 800ab2c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	893a      	ldrh	r2, [r7, #8]
 800ab32:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ab34:	893b      	ldrh	r3, [r7, #8]
 800ab36:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ab3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab3e:	d104      	bne.n	800ab4a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f240 4209 	movw	r2, #1033	; 0x409
 800ab46:	829a      	strh	r2, [r3, #20]
 800ab48:	e002      	b.n	800ab50 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	8b3a      	ldrh	r2, [r7, #24]
 800ab54:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ab56:	8b3b      	ldrh	r3, [r7, #24]
 800ab58:	461a      	mov	r2, r3
 800ab5a:	6879      	ldr	r1, [r7, #4]
 800ab5c:	68f8      	ldr	r0, [r7, #12]
 800ab5e:	f000 fb3f 	bl	800b1e0 <USBH_CtlReq>
 800ab62:	4603      	mov	r3, r0
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3710      	adds	r7, #16
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	460b      	mov	r3, r1
 800ab76:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	789b      	ldrb	r3, [r3, #2]
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d10f      	bne.n	800aba0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2200      	movs	r2, #0
 800ab84:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2205      	movs	r2, #5
 800ab8a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ab8c:	78fb      	ldrb	r3, [r7, #3]
 800ab8e:	b29a      	uxth	r2, r3
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2200      	movs	r2, #0
 800ab98:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800aba0:	2200      	movs	r2, #0
 800aba2:	2100      	movs	r1, #0
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f000 fb1b 	bl	800b1e0 <USBH_CtlReq>
 800abaa:	4603      	mov	r3, r0
}
 800abac:	4618      	mov	r0, r3
 800abae:	3708      	adds	r7, #8
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b082      	sub	sp, #8
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	460b      	mov	r3, r1
 800abbe:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	789b      	ldrb	r3, [r3, #2]
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	d10e      	bne.n	800abe6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2200      	movs	r2, #0
 800abcc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2209      	movs	r2, #9
 800abd2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	887a      	ldrh	r2, [r7, #2]
 800abd8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2200      	movs	r2, #0
 800abde:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800abe6:	2200      	movs	r2, #0
 800abe8:	2100      	movs	r1, #0
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f000 faf8 	bl	800b1e0 <USBH_CtlReq>
 800abf0:	4603      	mov	r3, r0
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3708      	adds	r7, #8
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800abfa:	b580      	push	{r7, lr}
 800abfc:	b082      	sub	sp, #8
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
 800ac02:	460b      	mov	r3, r1
 800ac04:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	789b      	ldrb	r3, [r3, #2]
 800ac0a:	2b01      	cmp	r3, #1
 800ac0c:	d10f      	bne.n	800ac2e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2200      	movs	r2, #0
 800ac12:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2203      	movs	r2, #3
 800ac18:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ac1a:	78fb      	ldrb	r3, [r7, #3]
 800ac1c:	b29a      	uxth	r2, r3
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2200      	movs	r2, #0
 800ac26:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ac2e:	2200      	movs	r2, #0
 800ac30:	2100      	movs	r1, #0
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 fad4 	bl	800b1e0 <USBH_CtlReq>
 800ac38:	4603      	mov	r3, r0
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3708      	adds	r7, #8
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b082      	sub	sp, #8
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
 800ac4a:	460b      	mov	r3, r1
 800ac4c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	789b      	ldrb	r3, [r3, #2]
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	d10f      	bne.n	800ac76 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2202      	movs	r2, #2
 800ac5a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2201      	movs	r2, #1
 800ac60:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2200      	movs	r2, #0
 800ac66:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ac68:	78fb      	ldrb	r3, [r7, #3]
 800ac6a:	b29a      	uxth	r2, r3
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800ac76:	2200      	movs	r2, #0
 800ac78:	2100      	movs	r1, #0
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f000 fab0 	bl	800b1e0 <USBH_CtlReq>
 800ac80:	4603      	mov	r3, r0
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3708      	adds	r7, #8
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
	...

0800ac8c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b085      	sub	sp, #20
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	60f8      	str	r0, [r7, #12]
 800ac94:	60b9      	str	r1, [r7, #8]
 800ac96:	4613      	mov	r3, r2
 800ac98:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	781a      	ldrb	r2, [r3, #0]
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	785a      	ldrb	r2, [r3, #1]
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	3302      	adds	r3, #2
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	b29a      	uxth	r2, r3
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	3303      	adds	r3, #3
 800acb6:	781b      	ldrb	r3, [r3, #0]
 800acb8:	b29b      	uxth	r3, r3
 800acba:	021b      	lsls	r3, r3, #8
 800acbc:	b29b      	uxth	r3, r3
 800acbe:	4313      	orrs	r3, r2
 800acc0:	b29a      	uxth	r2, r3
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	791a      	ldrb	r2, [r3, #4]
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	795a      	ldrb	r2, [r3, #5]
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	799a      	ldrb	r2, [r3, #6]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	79da      	ldrb	r2, [r3, #7]
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	79db      	ldrb	r3, [r3, #7]
 800acea:	2b20      	cmp	r3, #32
 800acec:	dc0f      	bgt.n	800ad0e <USBH_ParseDevDesc+0x82>
 800acee:	2b08      	cmp	r3, #8
 800acf0:	db14      	blt.n	800ad1c <USBH_ParseDevDesc+0x90>
 800acf2:	3b08      	subs	r3, #8
 800acf4:	4a2d      	ldr	r2, [pc, #180]	; (800adac <USBH_ParseDevDesc+0x120>)
 800acf6:	fa22 f303 	lsr.w	r3, r2, r3
 800acfa:	f003 0301 	and.w	r3, r3, #1
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	bf14      	ite	ne
 800ad02:	2301      	movne	r3, #1
 800ad04:	2300      	moveq	r3, #0
 800ad06:	b2db      	uxtb	r3, r3
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d102      	bne.n	800ad12 <USBH_ParseDevDesc+0x86>
 800ad0c:	e006      	b.n	800ad1c <USBH_ParseDevDesc+0x90>
 800ad0e:	2b40      	cmp	r3, #64	; 0x40
 800ad10:	d104      	bne.n	800ad1c <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	79da      	ldrb	r2, [r3, #7]
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	71da      	strb	r2, [r3, #7]
      break;
 800ad1a:	e003      	b.n	800ad24 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2240      	movs	r2, #64	; 0x40
 800ad20:	71da      	strb	r2, [r3, #7]
      break;
 800ad22:	bf00      	nop
  }

  if (length > 8U)
 800ad24:	88fb      	ldrh	r3, [r7, #6]
 800ad26:	2b08      	cmp	r3, #8
 800ad28:	d939      	bls.n	800ad9e <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	3308      	adds	r3, #8
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	b29a      	uxth	r2, r3
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	3309      	adds	r3, #9
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	021b      	lsls	r3, r3, #8
 800ad3c:	b29b      	uxth	r3, r3
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	b29a      	uxth	r2, r3
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	330a      	adds	r3, #10
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	b29a      	uxth	r2, r3
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	330b      	adds	r3, #11
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	021b      	lsls	r3, r3, #8
 800ad58:	b29b      	uxth	r3, r3
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	b29a      	uxth	r2, r3
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	330c      	adds	r3, #12
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	b29a      	uxth	r2, r3
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	330d      	adds	r3, #13
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	b29b      	uxth	r3, r3
 800ad72:	021b      	lsls	r3, r3, #8
 800ad74:	b29b      	uxth	r3, r3
 800ad76:	4313      	orrs	r3, r2
 800ad78:	b29a      	uxth	r2, r3
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	7b9a      	ldrb	r2, [r3, #14]
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	7bda      	ldrb	r2, [r3, #15]
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	7c1a      	ldrb	r2, [r3, #16]
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	7c5a      	ldrb	r2, [r3, #17]
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	745a      	strb	r2, [r3, #17]
  }
}
 800ad9e:	bf00      	nop
 800ada0:	3714      	adds	r7, #20
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr
 800adaa:	bf00      	nop
 800adac:	01000101 	.word	0x01000101

0800adb0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b08c      	sub	sp, #48	; 0x30
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	60b9      	str	r1, [r7, #8]
 800adba:	4613      	mov	r3, r2
 800adbc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800adc4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800adc6:	2300      	movs	r3, #0
 800adc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800add0:	2300      	movs	r3, #0
 800add2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800add6:	2300      	movs	r3, #0
 800add8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	781a      	ldrb	r2, [r3, #0]
 800ade4:	6a3b      	ldr	r3, [r7, #32]
 800ade6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	785a      	ldrb	r2, [r3, #1]
 800adec:	6a3b      	ldr	r3, [r7, #32]
 800adee:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	3302      	adds	r3, #2
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	b29a      	uxth	r2, r3
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	3303      	adds	r3, #3
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	021b      	lsls	r3, r3, #8
 800ae02:	b29b      	uxth	r3, r3
 800ae04:	4313      	orrs	r3, r2
 800ae06:	b29b      	uxth	r3, r3
 800ae08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae0c:	bf28      	it	cs
 800ae0e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800ae12:	b29a      	uxth	r2, r3
 800ae14:	6a3b      	ldr	r3, [r7, #32]
 800ae16:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	791a      	ldrb	r2, [r3, #4]
 800ae1c:	6a3b      	ldr	r3, [r7, #32]
 800ae1e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	795a      	ldrb	r2, [r3, #5]
 800ae24:	6a3b      	ldr	r3, [r7, #32]
 800ae26:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	799a      	ldrb	r2, [r3, #6]
 800ae2c:	6a3b      	ldr	r3, [r7, #32]
 800ae2e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	79da      	ldrb	r2, [r3, #7]
 800ae34:	6a3b      	ldr	r3, [r7, #32]
 800ae36:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	7a1a      	ldrb	r2, [r3, #8]
 800ae3c:	6a3b      	ldr	r3, [r7, #32]
 800ae3e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800ae40:	6a3b      	ldr	r3, [r7, #32]
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	2b09      	cmp	r3, #9
 800ae46:	d002      	beq.n	800ae4e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800ae48:	6a3b      	ldr	r3, [r7, #32]
 800ae4a:	2209      	movs	r2, #9
 800ae4c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ae4e:	88fb      	ldrh	r3, [r7, #6]
 800ae50:	2b09      	cmp	r3, #9
 800ae52:	f240 809d 	bls.w	800af90 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800ae56:	2309      	movs	r3, #9
 800ae58:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ae5e:	e081      	b.n	800af64 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ae60:	f107 0316 	add.w	r3, r7, #22
 800ae64:	4619      	mov	r1, r3
 800ae66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae68:	f000 f99f 	bl	800b1aa <USBH_GetNextDesc>
 800ae6c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800ae6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae70:	785b      	ldrb	r3, [r3, #1]
 800ae72:	2b04      	cmp	r3, #4
 800ae74:	d176      	bne.n	800af64 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800ae76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	2b09      	cmp	r3, #9
 800ae7c:	d002      	beq.n	800ae84 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800ae7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae80:	2209      	movs	r2, #9
 800ae82:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800ae84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae88:	221a      	movs	r2, #26
 800ae8a:	fb02 f303 	mul.w	r3, r2, r3
 800ae8e:	3308      	adds	r3, #8
 800ae90:	6a3a      	ldr	r2, [r7, #32]
 800ae92:	4413      	add	r3, r2
 800ae94:	3302      	adds	r3, #2
 800ae96:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ae98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae9a:	69f8      	ldr	r0, [r7, #28]
 800ae9c:	f000 f87e 	bl	800af9c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800aea0:	2300      	movs	r3, #0
 800aea2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800aea6:	2300      	movs	r3, #0
 800aea8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800aeaa:	e043      	b.n	800af34 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800aeac:	f107 0316 	add.w	r3, r7, #22
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aeb4:	f000 f979 	bl	800b1aa <USBH_GetNextDesc>
 800aeb8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800aeba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aebc:	785b      	ldrb	r3, [r3, #1]
 800aebe:	2b05      	cmp	r3, #5
 800aec0:	d138      	bne.n	800af34 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800aec2:	69fb      	ldr	r3, [r7, #28]
 800aec4:	795b      	ldrb	r3, [r3, #5]
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	d10f      	bne.n	800aeea <USBH_ParseCfgDesc+0x13a>
 800aeca:	69fb      	ldr	r3, [r7, #28]
 800aecc:	799b      	ldrb	r3, [r3, #6]
 800aece:	2b02      	cmp	r3, #2
 800aed0:	d10b      	bne.n	800aeea <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800aed2:	69fb      	ldr	r3, [r7, #28]
 800aed4:	79db      	ldrb	r3, [r3, #7]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d10f      	bne.n	800aefa <USBH_ParseCfgDesc+0x14a>
 800aeda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	2b09      	cmp	r3, #9
 800aee0:	d00b      	beq.n	800aefa <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800aee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee4:	2209      	movs	r2, #9
 800aee6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800aee8:	e007      	b.n	800aefa <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800aeea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	2b07      	cmp	r3, #7
 800aef0:	d004      	beq.n	800aefc <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800aef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef4:	2207      	movs	r2, #7
 800aef6:	701a      	strb	r2, [r3, #0]
 800aef8:	e000      	b.n	800aefc <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800aefa:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800aefc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af00:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800af04:	3201      	adds	r2, #1
 800af06:	00d2      	lsls	r2, r2, #3
 800af08:	211a      	movs	r1, #26
 800af0a:	fb01 f303 	mul.w	r3, r1, r3
 800af0e:	4413      	add	r3, r2
 800af10:	3308      	adds	r3, #8
 800af12:	6a3a      	ldr	r2, [r7, #32]
 800af14:	4413      	add	r3, r2
 800af16:	3304      	adds	r3, #4
 800af18:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800af1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af1c:	69b9      	ldr	r1, [r7, #24]
 800af1e:	68f8      	ldr	r0, [r7, #12]
 800af20:	f000 f86b 	bl	800affa <USBH_ParseEPDesc>
 800af24:	4603      	mov	r3, r0
 800af26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800af2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800af2e:	3301      	adds	r3, #1
 800af30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800af34:	69fb      	ldr	r3, [r7, #28]
 800af36:	791b      	ldrb	r3, [r3, #4]
 800af38:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d204      	bcs.n	800af4a <USBH_ParseCfgDesc+0x19a>
 800af40:	6a3b      	ldr	r3, [r7, #32]
 800af42:	885a      	ldrh	r2, [r3, #2]
 800af44:	8afb      	ldrh	r3, [r7, #22]
 800af46:	429a      	cmp	r2, r3
 800af48:	d8b0      	bhi.n	800aeac <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800af4a:	69fb      	ldr	r3, [r7, #28]
 800af4c:	791b      	ldrb	r3, [r3, #4]
 800af4e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800af52:	429a      	cmp	r2, r3
 800af54:	d201      	bcs.n	800af5a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800af56:	2303      	movs	r3, #3
 800af58:	e01c      	b.n	800af94 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800af5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af5e:	3301      	adds	r3, #1
 800af60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800af64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d805      	bhi.n	800af78 <USBH_ParseCfgDesc+0x1c8>
 800af6c:	6a3b      	ldr	r3, [r7, #32]
 800af6e:	885a      	ldrh	r2, [r3, #2]
 800af70:	8afb      	ldrh	r3, [r7, #22]
 800af72:	429a      	cmp	r2, r3
 800af74:	f63f af74 	bhi.w	800ae60 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800af78:	6a3b      	ldr	r3, [r7, #32]
 800af7a:	791b      	ldrb	r3, [r3, #4]
 800af7c:	2b02      	cmp	r3, #2
 800af7e:	bf28      	it	cs
 800af80:	2302      	movcs	r3, #2
 800af82:	b2db      	uxtb	r3, r3
 800af84:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800af88:	429a      	cmp	r2, r3
 800af8a:	d201      	bcs.n	800af90 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800af8c:	2303      	movs	r3, #3
 800af8e:	e001      	b.n	800af94 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800af90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800af94:	4618      	mov	r0, r3
 800af96:	3730      	adds	r7, #48	; 0x30
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b083      	sub	sp, #12
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	781a      	ldrb	r2, [r3, #0]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	785a      	ldrb	r2, [r3, #1]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	789a      	ldrb	r2, [r3, #2]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	78da      	ldrb	r2, [r3, #3]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	791a      	ldrb	r2, [r3, #4]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	795a      	ldrb	r2, [r3, #5]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	799a      	ldrb	r2, [r3, #6]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	79da      	ldrb	r2, [r3, #7]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	7a1a      	ldrb	r2, [r3, #8]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	721a      	strb	r2, [r3, #8]
}
 800afee:	bf00      	nop
 800aff0:	370c      	adds	r7, #12
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr

0800affa <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800affa:	b480      	push	{r7}
 800affc:	b087      	sub	sp, #28
 800affe:	af00      	add	r7, sp, #0
 800b000:	60f8      	str	r0, [r7, #12]
 800b002:	60b9      	str	r1, [r7, #8]
 800b004:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b006:	2300      	movs	r3, #0
 800b008:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	781a      	ldrb	r2, [r3, #0]
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	785a      	ldrb	r2, [r3, #1]
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	789a      	ldrb	r2, [r3, #2]
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	78da      	ldrb	r2, [r3, #3]
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	3304      	adds	r3, #4
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	b29a      	uxth	r2, r3
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	3305      	adds	r3, #5
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	b29b      	uxth	r3, r3
 800b03a:	021b      	lsls	r3, r3, #8
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	4313      	orrs	r3, r2
 800b040:	b29a      	uxth	r2, r3
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	799a      	ldrb	r2, [r3, #6]
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	889b      	ldrh	r3, [r3, #4]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d102      	bne.n	800b05c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800b056:	2303      	movs	r3, #3
 800b058:	75fb      	strb	r3, [r7, #23]
 800b05a:	e033      	b.n	800b0c4 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	889b      	ldrh	r3, [r3, #4]
 800b060:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b064:	f023 0307 	bic.w	r3, r3, #7
 800b068:	b29a      	uxth	r2, r3
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	889b      	ldrh	r3, [r3, #4]
 800b072:	b21a      	sxth	r2, r3
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	3304      	adds	r3, #4
 800b078:	781b      	ldrb	r3, [r3, #0]
 800b07a:	b299      	uxth	r1, r3
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	3305      	adds	r3, #5
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	b29b      	uxth	r3, r3
 800b084:	021b      	lsls	r3, r3, #8
 800b086:	b29b      	uxth	r3, r3
 800b088:	430b      	orrs	r3, r1
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b090:	2b00      	cmp	r3, #0
 800b092:	d110      	bne.n	800b0b6 <USBH_ParseEPDesc+0xbc>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	3304      	adds	r3, #4
 800b098:	781b      	ldrb	r3, [r3, #0]
 800b09a:	b299      	uxth	r1, r3
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	3305      	adds	r3, #5
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	b29b      	uxth	r3, r3
 800b0a4:	021b      	lsls	r3, r3, #8
 800b0a6:	b29b      	uxth	r3, r3
 800b0a8:	430b      	orrs	r3, r1
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	b21b      	sxth	r3, r3
 800b0ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b0b2:	b21b      	sxth	r3, r3
 800b0b4:	e001      	b.n	800b0ba <USBH_ParseEPDesc+0xc0>
 800b0b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	b21b      	sxth	r3, r3
 800b0be:	b29a      	uxth	r2, r3
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d116      	bne.n	800b0fc <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	78db      	ldrb	r3, [r3, #3]
 800b0d2:	f003 0303 	and.w	r3, r3, #3
 800b0d6:	2b01      	cmp	r3, #1
 800b0d8:	d005      	beq.n	800b0e6 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	78db      	ldrb	r3, [r3, #3]
 800b0de:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b0e2:	2b03      	cmp	r3, #3
 800b0e4:	d127      	bne.n	800b136 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	799b      	ldrb	r3, [r3, #6]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d003      	beq.n	800b0f6 <USBH_ParseEPDesc+0xfc>
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	799b      	ldrb	r3, [r3, #6]
 800b0f2:	2b10      	cmp	r3, #16
 800b0f4:	d91f      	bls.n	800b136 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b0f6:	2303      	movs	r3, #3
 800b0f8:	75fb      	strb	r3, [r7, #23]
 800b0fa:	e01c      	b.n	800b136 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	78db      	ldrb	r3, [r3, #3]
 800b100:	f003 0303 	and.w	r3, r3, #3
 800b104:	2b01      	cmp	r3, #1
 800b106:	d10a      	bne.n	800b11e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	799b      	ldrb	r3, [r3, #6]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d003      	beq.n	800b118 <USBH_ParseEPDesc+0x11e>
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	799b      	ldrb	r3, [r3, #6]
 800b114:	2b10      	cmp	r3, #16
 800b116:	d90e      	bls.n	800b136 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b118:	2303      	movs	r3, #3
 800b11a:	75fb      	strb	r3, [r7, #23]
 800b11c:	e00b      	b.n	800b136 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	78db      	ldrb	r3, [r3, #3]
 800b122:	f003 0303 	and.w	r3, r3, #3
 800b126:	2b03      	cmp	r3, #3
 800b128:	d105      	bne.n	800b136 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	799b      	ldrb	r3, [r3, #6]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d101      	bne.n	800b136 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b132:	2303      	movs	r3, #3
 800b134:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800b136:	7dfb      	ldrb	r3, [r7, #23]
}
 800b138:	4618      	mov	r0, r3
 800b13a:	371c      	adds	r7, #28
 800b13c:	46bd      	mov	sp, r7
 800b13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b142:	4770      	bx	lr

0800b144 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b144:	b480      	push	{r7}
 800b146:	b087      	sub	sp, #28
 800b148:	af00      	add	r7, sp, #0
 800b14a:	60f8      	str	r0, [r7, #12]
 800b14c:	60b9      	str	r1, [r7, #8]
 800b14e:	4613      	mov	r3, r2
 800b150:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	3301      	adds	r3, #1
 800b156:	781b      	ldrb	r3, [r3, #0]
 800b158:	2b03      	cmp	r3, #3
 800b15a:	d120      	bne.n	800b19e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	781b      	ldrb	r3, [r3, #0]
 800b160:	1e9a      	subs	r2, r3, #2
 800b162:	88fb      	ldrh	r3, [r7, #6]
 800b164:	4293      	cmp	r3, r2
 800b166:	bf28      	it	cs
 800b168:	4613      	movcs	r3, r2
 800b16a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	3302      	adds	r3, #2
 800b170:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b172:	2300      	movs	r3, #0
 800b174:	82fb      	strh	r3, [r7, #22]
 800b176:	e00b      	b.n	800b190 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b178:	8afb      	ldrh	r3, [r7, #22]
 800b17a:	68fa      	ldr	r2, [r7, #12]
 800b17c:	4413      	add	r3, r2
 800b17e:	781a      	ldrb	r2, [r3, #0]
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	3301      	adds	r3, #1
 800b188:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b18a:	8afb      	ldrh	r3, [r7, #22]
 800b18c:	3302      	adds	r3, #2
 800b18e:	82fb      	strh	r3, [r7, #22]
 800b190:	8afa      	ldrh	r2, [r7, #22]
 800b192:	8abb      	ldrh	r3, [r7, #20]
 800b194:	429a      	cmp	r2, r3
 800b196:	d3ef      	bcc.n	800b178 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	2200      	movs	r2, #0
 800b19c:	701a      	strb	r2, [r3, #0]
  }
}
 800b19e:	bf00      	nop
 800b1a0:	371c      	adds	r7, #28
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a8:	4770      	bx	lr

0800b1aa <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b1aa:	b480      	push	{r7}
 800b1ac:	b085      	sub	sp, #20
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
 800b1b2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	881a      	ldrh	r2, [r3, #0]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	b29b      	uxth	r3, r3
 800b1be:	4413      	add	r3, r2
 800b1c0:	b29a      	uxth	r2, r3
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	4413      	add	r3, r2
 800b1d0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b1d2:	68fb      	ldr	r3, [r7, #12]
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3714      	adds	r7, #20
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr

0800b1e0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b086      	sub	sp, #24
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	60f8      	str	r0, [r7, #12]
 800b1e8:	60b9      	str	r1, [r7, #8]
 800b1ea:	4613      	mov	r3, r2
 800b1ec:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	789b      	ldrb	r3, [r3, #2]
 800b1f6:	2b01      	cmp	r3, #1
 800b1f8:	d002      	beq.n	800b200 <USBH_CtlReq+0x20>
 800b1fa:	2b02      	cmp	r3, #2
 800b1fc:	d00f      	beq.n	800b21e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b1fe:	e027      	b.n	800b250 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	68ba      	ldr	r2, [r7, #8]
 800b204:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	88fa      	ldrh	r2, [r7, #6]
 800b20a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	2201      	movs	r2, #1
 800b210:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2202      	movs	r2, #2
 800b216:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b218:	2301      	movs	r3, #1
 800b21a:	75fb      	strb	r3, [r7, #23]
      break;
 800b21c:	e018      	b.n	800b250 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b21e:	68f8      	ldr	r0, [r7, #12]
 800b220:	f000 f81c 	bl	800b25c <USBH_HandleControl>
 800b224:	4603      	mov	r3, r0
 800b226:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b228:	7dfb      	ldrb	r3, [r7, #23]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d002      	beq.n	800b234 <USBH_CtlReq+0x54>
 800b22e:	7dfb      	ldrb	r3, [r7, #23]
 800b230:	2b03      	cmp	r3, #3
 800b232:	d106      	bne.n	800b242 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2201      	movs	r2, #1
 800b238:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2200      	movs	r2, #0
 800b23e:	761a      	strb	r2, [r3, #24]
      break;
 800b240:	e005      	b.n	800b24e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b242:	7dfb      	ldrb	r3, [r7, #23]
 800b244:	2b02      	cmp	r3, #2
 800b246:	d102      	bne.n	800b24e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2201      	movs	r2, #1
 800b24c:	709a      	strb	r2, [r3, #2]
      break;
 800b24e:	bf00      	nop
  }
  return status;
 800b250:	7dfb      	ldrb	r3, [r7, #23]
}
 800b252:	4618      	mov	r0, r3
 800b254:	3718      	adds	r7, #24
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
	...

0800b25c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b086      	sub	sp, #24
 800b260:	af02      	add	r7, sp, #8
 800b262:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b264:	2301      	movs	r3, #1
 800b266:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b268:	2300      	movs	r3, #0
 800b26a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	7e1b      	ldrb	r3, [r3, #24]
 800b270:	3b01      	subs	r3, #1
 800b272:	2b0a      	cmp	r3, #10
 800b274:	f200 8156 	bhi.w	800b524 <USBH_HandleControl+0x2c8>
 800b278:	a201      	add	r2, pc, #4	; (adr r2, 800b280 <USBH_HandleControl+0x24>)
 800b27a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b27e:	bf00      	nop
 800b280:	0800b2ad 	.word	0x0800b2ad
 800b284:	0800b2c7 	.word	0x0800b2c7
 800b288:	0800b331 	.word	0x0800b331
 800b28c:	0800b357 	.word	0x0800b357
 800b290:	0800b38f 	.word	0x0800b38f
 800b294:	0800b3b9 	.word	0x0800b3b9
 800b298:	0800b40b 	.word	0x0800b40b
 800b29c:	0800b42d 	.word	0x0800b42d
 800b2a0:	0800b469 	.word	0x0800b469
 800b2a4:	0800b48f 	.word	0x0800b48f
 800b2a8:	0800b4cd 	.word	0x0800b4cd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f103 0110 	add.w	r1, r3, #16
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	795b      	ldrb	r3, [r3, #5]
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f000 f943 	bl	800b544 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2202      	movs	r2, #2
 800b2c2:	761a      	strb	r2, [r3, #24]
      break;
 800b2c4:	e139      	b.n	800b53a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	795b      	ldrb	r3, [r3, #5]
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f003 ffb5 	bl	800f23c <USBH_LL_GetURBState>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b2d6:	7bbb      	ldrb	r3, [r7, #14]
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	d11e      	bne.n	800b31a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	7c1b      	ldrb	r3, [r3, #16]
 800b2e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b2e4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	8adb      	ldrh	r3, [r3, #22]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d00a      	beq.n	800b304 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b2ee:	7b7b      	ldrb	r3, [r7, #13]
 800b2f0:	2b80      	cmp	r3, #128	; 0x80
 800b2f2:	d103      	bne.n	800b2fc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2203      	movs	r2, #3
 800b2f8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b2fa:	e115      	b.n	800b528 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2205      	movs	r2, #5
 800b300:	761a      	strb	r2, [r3, #24]
      break;
 800b302:	e111      	b.n	800b528 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b304:	7b7b      	ldrb	r3, [r7, #13]
 800b306:	2b80      	cmp	r3, #128	; 0x80
 800b308:	d103      	bne.n	800b312 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2209      	movs	r2, #9
 800b30e:	761a      	strb	r2, [r3, #24]
      break;
 800b310:	e10a      	b.n	800b528 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2207      	movs	r2, #7
 800b316:	761a      	strb	r2, [r3, #24]
      break;
 800b318:	e106      	b.n	800b528 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b31a:	7bbb      	ldrb	r3, [r7, #14]
 800b31c:	2b04      	cmp	r3, #4
 800b31e:	d003      	beq.n	800b328 <USBH_HandleControl+0xcc>
 800b320:	7bbb      	ldrb	r3, [r7, #14]
 800b322:	2b02      	cmp	r3, #2
 800b324:	f040 8100 	bne.w	800b528 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	220b      	movs	r2, #11
 800b32c:	761a      	strb	r2, [r3, #24]
      break;
 800b32e:	e0fb      	b.n	800b528 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b336:	b29a      	uxth	r2, r3
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6899      	ldr	r1, [r3, #8]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	899a      	ldrh	r2, [r3, #12]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	791b      	ldrb	r3, [r3, #4]
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f000 f93a 	bl	800b5c2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2204      	movs	r2, #4
 800b352:	761a      	strb	r2, [r3, #24]
      break;
 800b354:	e0f1      	b.n	800b53a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	791b      	ldrb	r3, [r3, #4]
 800b35a:	4619      	mov	r1, r3
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f003 ff6d 	bl	800f23c <USBH_LL_GetURBState>
 800b362:	4603      	mov	r3, r0
 800b364:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b366:	7bbb      	ldrb	r3, [r7, #14]
 800b368:	2b01      	cmp	r3, #1
 800b36a:	d102      	bne.n	800b372 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2209      	movs	r2, #9
 800b370:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b372:	7bbb      	ldrb	r3, [r7, #14]
 800b374:	2b05      	cmp	r3, #5
 800b376:	d102      	bne.n	800b37e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b378:	2303      	movs	r3, #3
 800b37a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b37c:	e0d6      	b.n	800b52c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b37e:	7bbb      	ldrb	r3, [r7, #14]
 800b380:	2b04      	cmp	r3, #4
 800b382:	f040 80d3 	bne.w	800b52c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	220b      	movs	r2, #11
 800b38a:	761a      	strb	r2, [r3, #24]
      break;
 800b38c:	e0ce      	b.n	800b52c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6899      	ldr	r1, [r3, #8]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	899a      	ldrh	r2, [r3, #12]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	795b      	ldrb	r3, [r3, #5]
 800b39a:	2001      	movs	r0, #1
 800b39c:	9000      	str	r0, [sp, #0]
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f000 f8ea 	bl	800b578 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b3aa:	b29a      	uxth	r2, r3
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2206      	movs	r2, #6
 800b3b4:	761a      	strb	r2, [r3, #24]
      break;
 800b3b6:	e0c0      	b.n	800b53a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	795b      	ldrb	r3, [r3, #5]
 800b3bc:	4619      	mov	r1, r3
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f003 ff3c 	bl	800f23c <USBH_LL_GetURBState>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b3c8:	7bbb      	ldrb	r3, [r7, #14]
 800b3ca:	2b01      	cmp	r3, #1
 800b3cc:	d103      	bne.n	800b3d6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2207      	movs	r2, #7
 800b3d2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b3d4:	e0ac      	b.n	800b530 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b3d6:	7bbb      	ldrb	r3, [r7, #14]
 800b3d8:	2b05      	cmp	r3, #5
 800b3da:	d105      	bne.n	800b3e8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	220c      	movs	r2, #12
 800b3e0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b3e2:	2303      	movs	r3, #3
 800b3e4:	73fb      	strb	r3, [r7, #15]
      break;
 800b3e6:	e0a3      	b.n	800b530 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b3e8:	7bbb      	ldrb	r3, [r7, #14]
 800b3ea:	2b02      	cmp	r3, #2
 800b3ec:	d103      	bne.n	800b3f6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2205      	movs	r2, #5
 800b3f2:	761a      	strb	r2, [r3, #24]
      break;
 800b3f4:	e09c      	b.n	800b530 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b3f6:	7bbb      	ldrb	r3, [r7, #14]
 800b3f8:	2b04      	cmp	r3, #4
 800b3fa:	f040 8099 	bne.w	800b530 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	220b      	movs	r2, #11
 800b402:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b404:	2302      	movs	r3, #2
 800b406:	73fb      	strb	r3, [r7, #15]
      break;
 800b408:	e092      	b.n	800b530 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	791b      	ldrb	r3, [r3, #4]
 800b40e:	2200      	movs	r2, #0
 800b410:	2100      	movs	r1, #0
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f000 f8d5 	bl	800b5c2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b41e:	b29a      	uxth	r2, r3
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2208      	movs	r2, #8
 800b428:	761a      	strb	r2, [r3, #24]

      break;
 800b42a:	e086      	b.n	800b53a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	791b      	ldrb	r3, [r3, #4]
 800b430:	4619      	mov	r1, r3
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f003 ff02 	bl	800f23c <USBH_LL_GetURBState>
 800b438:	4603      	mov	r3, r0
 800b43a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b43c:	7bbb      	ldrb	r3, [r7, #14]
 800b43e:	2b01      	cmp	r3, #1
 800b440:	d105      	bne.n	800b44e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	220d      	movs	r2, #13
 800b446:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b448:	2300      	movs	r3, #0
 800b44a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b44c:	e072      	b.n	800b534 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b44e:	7bbb      	ldrb	r3, [r7, #14]
 800b450:	2b04      	cmp	r3, #4
 800b452:	d103      	bne.n	800b45c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	220b      	movs	r2, #11
 800b458:	761a      	strb	r2, [r3, #24]
      break;
 800b45a:	e06b      	b.n	800b534 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b45c:	7bbb      	ldrb	r3, [r7, #14]
 800b45e:	2b05      	cmp	r3, #5
 800b460:	d168      	bne.n	800b534 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b462:	2303      	movs	r3, #3
 800b464:	73fb      	strb	r3, [r7, #15]
      break;
 800b466:	e065      	b.n	800b534 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	795b      	ldrb	r3, [r3, #5]
 800b46c:	2201      	movs	r2, #1
 800b46e:	9200      	str	r2, [sp, #0]
 800b470:	2200      	movs	r2, #0
 800b472:	2100      	movs	r1, #0
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f000 f87f 	bl	800b578 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b480:	b29a      	uxth	r2, r3
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	220a      	movs	r2, #10
 800b48a:	761a      	strb	r2, [r3, #24]
      break;
 800b48c:	e055      	b.n	800b53a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	795b      	ldrb	r3, [r3, #5]
 800b492:	4619      	mov	r1, r3
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f003 fed1 	bl	800f23c <USBH_LL_GetURBState>
 800b49a:	4603      	mov	r3, r0
 800b49c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b49e:	7bbb      	ldrb	r3, [r7, #14]
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	d105      	bne.n	800b4b0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	220d      	movs	r2, #13
 800b4ac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b4ae:	e043      	b.n	800b538 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b4b0:	7bbb      	ldrb	r3, [r7, #14]
 800b4b2:	2b02      	cmp	r3, #2
 800b4b4:	d103      	bne.n	800b4be <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2209      	movs	r2, #9
 800b4ba:	761a      	strb	r2, [r3, #24]
      break;
 800b4bc:	e03c      	b.n	800b538 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b4be:	7bbb      	ldrb	r3, [r7, #14]
 800b4c0:	2b04      	cmp	r3, #4
 800b4c2:	d139      	bne.n	800b538 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	220b      	movs	r2, #11
 800b4c8:	761a      	strb	r2, [r3, #24]
      break;
 800b4ca:	e035      	b.n	800b538 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	7e5b      	ldrb	r3, [r3, #25]
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	b2da      	uxtb	r2, r3
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	765a      	strb	r2, [r3, #25]
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	7e5b      	ldrb	r3, [r3, #25]
 800b4dc:	2b02      	cmp	r3, #2
 800b4de:	d806      	bhi.n	800b4ee <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2201      	movs	r2, #1
 800b4ea:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b4ec:	e025      	b.n	800b53a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b4f4:	2106      	movs	r1, #6
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	795b      	ldrb	r3, [r3, #5]
 800b504:	4619      	mov	r1, r3
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f000 f90c 	bl	800b724 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	791b      	ldrb	r3, [r3, #4]
 800b510:	4619      	mov	r1, r3
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 f906 	bl	800b724 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2200      	movs	r2, #0
 800b51c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b51e:	2302      	movs	r3, #2
 800b520:	73fb      	strb	r3, [r7, #15]
      break;
 800b522:	e00a      	b.n	800b53a <USBH_HandleControl+0x2de>

    default:
      break;
 800b524:	bf00      	nop
 800b526:	e008      	b.n	800b53a <USBH_HandleControl+0x2de>
      break;
 800b528:	bf00      	nop
 800b52a:	e006      	b.n	800b53a <USBH_HandleControl+0x2de>
      break;
 800b52c:	bf00      	nop
 800b52e:	e004      	b.n	800b53a <USBH_HandleControl+0x2de>
      break;
 800b530:	bf00      	nop
 800b532:	e002      	b.n	800b53a <USBH_HandleControl+0x2de>
      break;
 800b534:	bf00      	nop
 800b536:	e000      	b.n	800b53a <USBH_HandleControl+0x2de>
      break;
 800b538:	bf00      	nop
  }

  return status;
 800b53a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3710      	adds	r7, #16
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}

0800b544 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b088      	sub	sp, #32
 800b548:	af04      	add	r7, sp, #16
 800b54a:	60f8      	str	r0, [r7, #12]
 800b54c:	60b9      	str	r1, [r7, #8]
 800b54e:	4613      	mov	r3, r2
 800b550:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b552:	79f9      	ldrb	r1, [r7, #7]
 800b554:	2300      	movs	r3, #0
 800b556:	9303      	str	r3, [sp, #12]
 800b558:	2308      	movs	r3, #8
 800b55a:	9302      	str	r3, [sp, #8]
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	9301      	str	r3, [sp, #4]
 800b560:	2300      	movs	r3, #0
 800b562:	9300      	str	r3, [sp, #0]
 800b564:	2300      	movs	r3, #0
 800b566:	2200      	movs	r2, #0
 800b568:	68f8      	ldr	r0, [r7, #12]
 800b56a:	f003 fe36 	bl	800f1da <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b56e:	2300      	movs	r3, #0
}
 800b570:	4618      	mov	r0, r3
 800b572:	3710      	adds	r7, #16
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}

0800b578 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b088      	sub	sp, #32
 800b57c:	af04      	add	r7, sp, #16
 800b57e:	60f8      	str	r0, [r7, #12]
 800b580:	60b9      	str	r1, [r7, #8]
 800b582:	4611      	mov	r1, r2
 800b584:	461a      	mov	r2, r3
 800b586:	460b      	mov	r3, r1
 800b588:	80fb      	strh	r3, [r7, #6]
 800b58a:	4613      	mov	r3, r2
 800b58c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b594:	2b00      	cmp	r3, #0
 800b596:	d001      	beq.n	800b59c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b598:	2300      	movs	r3, #0
 800b59a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b59c:	7979      	ldrb	r1, [r7, #5]
 800b59e:	7e3b      	ldrb	r3, [r7, #24]
 800b5a0:	9303      	str	r3, [sp, #12]
 800b5a2:	88fb      	ldrh	r3, [r7, #6]
 800b5a4:	9302      	str	r3, [sp, #8]
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	9301      	str	r3, [sp, #4]
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	9300      	str	r3, [sp, #0]
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	68f8      	ldr	r0, [r7, #12]
 800b5b4:	f003 fe11 	bl	800f1da <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b5b8:	2300      	movs	r3, #0
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3710      	adds	r7, #16
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}

0800b5c2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b5c2:	b580      	push	{r7, lr}
 800b5c4:	b088      	sub	sp, #32
 800b5c6:	af04      	add	r7, sp, #16
 800b5c8:	60f8      	str	r0, [r7, #12]
 800b5ca:	60b9      	str	r1, [r7, #8]
 800b5cc:	4611      	mov	r1, r2
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	460b      	mov	r3, r1
 800b5d2:	80fb      	strh	r3, [r7, #6]
 800b5d4:	4613      	mov	r3, r2
 800b5d6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b5d8:	7979      	ldrb	r1, [r7, #5]
 800b5da:	2300      	movs	r3, #0
 800b5dc:	9303      	str	r3, [sp, #12]
 800b5de:	88fb      	ldrh	r3, [r7, #6]
 800b5e0:	9302      	str	r3, [sp, #8]
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	9301      	str	r3, [sp, #4]
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	9300      	str	r3, [sp, #0]
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	68f8      	ldr	r0, [r7, #12]
 800b5f0:	f003 fdf3 	bl	800f1da <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b5f4:	2300      	movs	r3, #0

}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3710      	adds	r7, #16
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}

0800b5fe <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b5fe:	b580      	push	{r7, lr}
 800b600:	b088      	sub	sp, #32
 800b602:	af04      	add	r7, sp, #16
 800b604:	60f8      	str	r0, [r7, #12]
 800b606:	60b9      	str	r1, [r7, #8]
 800b608:	4611      	mov	r1, r2
 800b60a:	461a      	mov	r2, r3
 800b60c:	460b      	mov	r3, r1
 800b60e:	80fb      	strh	r3, [r7, #6]
 800b610:	4613      	mov	r3, r2
 800b612:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d001      	beq.n	800b622 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b61e:	2300      	movs	r3, #0
 800b620:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b622:	7979      	ldrb	r1, [r7, #5]
 800b624:	7e3b      	ldrb	r3, [r7, #24]
 800b626:	9303      	str	r3, [sp, #12]
 800b628:	88fb      	ldrh	r3, [r7, #6]
 800b62a:	9302      	str	r3, [sp, #8]
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	9301      	str	r3, [sp, #4]
 800b630:	2301      	movs	r3, #1
 800b632:	9300      	str	r3, [sp, #0]
 800b634:	2302      	movs	r3, #2
 800b636:	2200      	movs	r2, #0
 800b638:	68f8      	ldr	r0, [r7, #12]
 800b63a:	f003 fdce 	bl	800f1da <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b63e:	2300      	movs	r3, #0
}
 800b640:	4618      	mov	r0, r3
 800b642:	3710      	adds	r7, #16
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}

0800b648 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b088      	sub	sp, #32
 800b64c:	af04      	add	r7, sp, #16
 800b64e:	60f8      	str	r0, [r7, #12]
 800b650:	60b9      	str	r1, [r7, #8]
 800b652:	4611      	mov	r1, r2
 800b654:	461a      	mov	r2, r3
 800b656:	460b      	mov	r3, r1
 800b658:	80fb      	strh	r3, [r7, #6]
 800b65a:	4613      	mov	r3, r2
 800b65c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b65e:	7979      	ldrb	r1, [r7, #5]
 800b660:	2300      	movs	r3, #0
 800b662:	9303      	str	r3, [sp, #12]
 800b664:	88fb      	ldrh	r3, [r7, #6]
 800b666:	9302      	str	r3, [sp, #8]
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	9301      	str	r3, [sp, #4]
 800b66c:	2301      	movs	r3, #1
 800b66e:	9300      	str	r3, [sp, #0]
 800b670:	2302      	movs	r3, #2
 800b672:	2201      	movs	r2, #1
 800b674:	68f8      	ldr	r0, [r7, #12]
 800b676:	f003 fdb0 	bl	800f1da <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b67a:	2300      	movs	r3, #0
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3710      	adds	r7, #16
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}

0800b684 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b086      	sub	sp, #24
 800b688:	af04      	add	r7, sp, #16
 800b68a:	6078      	str	r0, [r7, #4]
 800b68c:	4608      	mov	r0, r1
 800b68e:	4611      	mov	r1, r2
 800b690:	461a      	mov	r2, r3
 800b692:	4603      	mov	r3, r0
 800b694:	70fb      	strb	r3, [r7, #3]
 800b696:	460b      	mov	r3, r1
 800b698:	70bb      	strb	r3, [r7, #2]
 800b69a:	4613      	mov	r3, r2
 800b69c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b69e:	7878      	ldrb	r0, [r7, #1]
 800b6a0:	78ba      	ldrb	r2, [r7, #2]
 800b6a2:	78f9      	ldrb	r1, [r7, #3]
 800b6a4:	8b3b      	ldrh	r3, [r7, #24]
 800b6a6:	9302      	str	r3, [sp, #8]
 800b6a8:	7d3b      	ldrb	r3, [r7, #20]
 800b6aa:	9301      	str	r3, [sp, #4]
 800b6ac:	7c3b      	ldrb	r3, [r7, #16]
 800b6ae:	9300      	str	r3, [sp, #0]
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f003 fd43 	bl	800f13e <USBH_LL_OpenPipe>

  return USBH_OK;
 800b6b8:	2300      	movs	r3, #0
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3708      	adds	r7, #8
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}

0800b6c2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b6c2:	b580      	push	{r7, lr}
 800b6c4:	b082      	sub	sp, #8
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
 800b6ca:	460b      	mov	r3, r1
 800b6cc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b6ce:	78fb      	ldrb	r3, [r7, #3]
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f003 fd62 	bl	800f19c <USBH_LL_ClosePipe>

  return USBH_OK;
 800b6d8:	2300      	movs	r3, #0
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3708      	adds	r7, #8
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}

0800b6e2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b6e2:	b580      	push	{r7, lr}
 800b6e4:	b084      	sub	sp, #16
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
 800b6ea:	460b      	mov	r3, r1
 800b6ec:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 f836 	bl	800b760 <USBH_GetFreePipe>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b6f8:	89fb      	ldrh	r3, [r7, #14]
 800b6fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d00a      	beq.n	800b718 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b702:	78fa      	ldrb	r2, [r7, #3]
 800b704:	89fb      	ldrh	r3, [r7, #14]
 800b706:	f003 030f 	and.w	r3, r3, #15
 800b70a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b70e:	6879      	ldr	r1, [r7, #4]
 800b710:	33e0      	adds	r3, #224	; 0xe0
 800b712:	009b      	lsls	r3, r3, #2
 800b714:	440b      	add	r3, r1
 800b716:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b718:	89fb      	ldrh	r3, [r7, #14]
 800b71a:	b2db      	uxtb	r3, r3
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3710      	adds	r7, #16
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b724:	b480      	push	{r7}
 800b726:	b083      	sub	sp, #12
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	460b      	mov	r3, r1
 800b72e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b730:	78fb      	ldrb	r3, [r7, #3]
 800b732:	2b0f      	cmp	r3, #15
 800b734:	d80d      	bhi.n	800b752 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b736:	78fb      	ldrb	r3, [r7, #3]
 800b738:	687a      	ldr	r2, [r7, #4]
 800b73a:	33e0      	adds	r3, #224	; 0xe0
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	4413      	add	r3, r2
 800b740:	685a      	ldr	r2, [r3, #4]
 800b742:	78fb      	ldrb	r3, [r7, #3]
 800b744:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b748:	6879      	ldr	r1, [r7, #4]
 800b74a:	33e0      	adds	r3, #224	; 0xe0
 800b74c:	009b      	lsls	r3, r3, #2
 800b74e:	440b      	add	r3, r1
 800b750:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b752:	2300      	movs	r3, #0
}
 800b754:	4618      	mov	r0, r3
 800b756:	370c      	adds	r7, #12
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr

0800b760 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b760:	b480      	push	{r7}
 800b762:	b085      	sub	sp, #20
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b768:	2300      	movs	r3, #0
 800b76a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b76c:	2300      	movs	r3, #0
 800b76e:	73fb      	strb	r3, [r7, #15]
 800b770:	e00f      	b.n	800b792 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b772:	7bfb      	ldrb	r3, [r7, #15]
 800b774:	687a      	ldr	r2, [r7, #4]
 800b776:	33e0      	adds	r3, #224	; 0xe0
 800b778:	009b      	lsls	r3, r3, #2
 800b77a:	4413      	add	r3, r2
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b782:	2b00      	cmp	r3, #0
 800b784:	d102      	bne.n	800b78c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b786:	7bfb      	ldrb	r3, [r7, #15]
 800b788:	b29b      	uxth	r3, r3
 800b78a:	e007      	b.n	800b79c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b78c:	7bfb      	ldrb	r3, [r7, #15]
 800b78e:	3301      	adds	r3, #1
 800b790:	73fb      	strb	r3, [r7, #15]
 800b792:	7bfb      	ldrb	r3, [r7, #15]
 800b794:	2b0f      	cmp	r3, #15
 800b796:	d9ec      	bls.n	800b772 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b798:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3714      	adds	r7, #20
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr

0800b7a8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b084      	sub	sp, #16
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b7b2:	79fb      	ldrb	r3, [r7, #7]
 800b7b4:	4a08      	ldr	r2, [pc, #32]	; (800b7d8 <disk_status+0x30>)
 800b7b6:	009b      	lsls	r3, r3, #2
 800b7b8:	4413      	add	r3, r2
 800b7ba:	685b      	ldr	r3, [r3, #4]
 800b7bc:	685b      	ldr	r3, [r3, #4]
 800b7be:	79fa      	ldrb	r2, [r7, #7]
 800b7c0:	4905      	ldr	r1, [pc, #20]	; (800b7d8 <disk_status+0x30>)
 800b7c2:	440a      	add	r2, r1
 800b7c4:	7a12      	ldrb	r2, [r2, #8]
 800b7c6:	4610      	mov	r0, r2
 800b7c8:	4798      	blx	r3
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b7ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3710      	adds	r7, #16
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}
 800b7d8:	20001d8c 	.word	0x20001d8c

0800b7dc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b084      	sub	sp, #16
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b7ea:	79fb      	ldrb	r3, [r7, #7]
 800b7ec:	4a0d      	ldr	r2, [pc, #52]	; (800b824 <disk_initialize+0x48>)
 800b7ee:	5cd3      	ldrb	r3, [r2, r3]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d111      	bne.n	800b818 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b7f4:	79fb      	ldrb	r3, [r7, #7]
 800b7f6:	4a0b      	ldr	r2, [pc, #44]	; (800b824 <disk_initialize+0x48>)
 800b7f8:	2101      	movs	r1, #1
 800b7fa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b7fc:	79fb      	ldrb	r3, [r7, #7]
 800b7fe:	4a09      	ldr	r2, [pc, #36]	; (800b824 <disk_initialize+0x48>)
 800b800:	009b      	lsls	r3, r3, #2
 800b802:	4413      	add	r3, r2
 800b804:	685b      	ldr	r3, [r3, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	79fa      	ldrb	r2, [r7, #7]
 800b80a:	4906      	ldr	r1, [pc, #24]	; (800b824 <disk_initialize+0x48>)
 800b80c:	440a      	add	r2, r1
 800b80e:	7a12      	ldrb	r2, [r2, #8]
 800b810:	4610      	mov	r0, r2
 800b812:	4798      	blx	r3
 800b814:	4603      	mov	r3, r0
 800b816:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b818:	7bfb      	ldrb	r3, [r7, #15]
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3710      	adds	r7, #16
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
 800b822:	bf00      	nop
 800b824:	20001d8c 	.word	0x20001d8c

0800b828 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b828:	b590      	push	{r4, r7, lr}
 800b82a:	b087      	sub	sp, #28
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	60b9      	str	r1, [r7, #8]
 800b830:	607a      	str	r2, [r7, #4]
 800b832:	603b      	str	r3, [r7, #0]
 800b834:	4603      	mov	r3, r0
 800b836:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b838:	7bfb      	ldrb	r3, [r7, #15]
 800b83a:	4a0a      	ldr	r2, [pc, #40]	; (800b864 <disk_read+0x3c>)
 800b83c:	009b      	lsls	r3, r3, #2
 800b83e:	4413      	add	r3, r2
 800b840:	685b      	ldr	r3, [r3, #4]
 800b842:	689c      	ldr	r4, [r3, #8]
 800b844:	7bfb      	ldrb	r3, [r7, #15]
 800b846:	4a07      	ldr	r2, [pc, #28]	; (800b864 <disk_read+0x3c>)
 800b848:	4413      	add	r3, r2
 800b84a:	7a18      	ldrb	r0, [r3, #8]
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	68b9      	ldr	r1, [r7, #8]
 800b852:	47a0      	blx	r4
 800b854:	4603      	mov	r3, r0
 800b856:	75fb      	strb	r3, [r7, #23]
  return res;
 800b858:	7dfb      	ldrb	r3, [r7, #23]
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	371c      	adds	r7, #28
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd90      	pop	{r4, r7, pc}
 800b862:	bf00      	nop
 800b864:	20001d8c 	.word	0x20001d8c

0800b868 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b868:	b590      	push	{r4, r7, lr}
 800b86a:	b087      	sub	sp, #28
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	60b9      	str	r1, [r7, #8]
 800b870:	607a      	str	r2, [r7, #4]
 800b872:	603b      	str	r3, [r7, #0]
 800b874:	4603      	mov	r3, r0
 800b876:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b878:	7bfb      	ldrb	r3, [r7, #15]
 800b87a:	4a0a      	ldr	r2, [pc, #40]	; (800b8a4 <disk_write+0x3c>)
 800b87c:	009b      	lsls	r3, r3, #2
 800b87e:	4413      	add	r3, r2
 800b880:	685b      	ldr	r3, [r3, #4]
 800b882:	68dc      	ldr	r4, [r3, #12]
 800b884:	7bfb      	ldrb	r3, [r7, #15]
 800b886:	4a07      	ldr	r2, [pc, #28]	; (800b8a4 <disk_write+0x3c>)
 800b888:	4413      	add	r3, r2
 800b88a:	7a18      	ldrb	r0, [r3, #8]
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	68b9      	ldr	r1, [r7, #8]
 800b892:	47a0      	blx	r4
 800b894:	4603      	mov	r3, r0
 800b896:	75fb      	strb	r3, [r7, #23]
  return res;
 800b898:	7dfb      	ldrb	r3, [r7, #23]
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	371c      	adds	r7, #28
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd90      	pop	{r4, r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	20001d8c 	.word	0x20001d8c

0800b8a8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b084      	sub	sp, #16
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	603a      	str	r2, [r7, #0]
 800b8b2:	71fb      	strb	r3, [r7, #7]
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b8b8:	79fb      	ldrb	r3, [r7, #7]
 800b8ba:	4a09      	ldr	r2, [pc, #36]	; (800b8e0 <disk_ioctl+0x38>)
 800b8bc:	009b      	lsls	r3, r3, #2
 800b8be:	4413      	add	r3, r2
 800b8c0:	685b      	ldr	r3, [r3, #4]
 800b8c2:	691b      	ldr	r3, [r3, #16]
 800b8c4:	79fa      	ldrb	r2, [r7, #7]
 800b8c6:	4906      	ldr	r1, [pc, #24]	; (800b8e0 <disk_ioctl+0x38>)
 800b8c8:	440a      	add	r2, r1
 800b8ca:	7a10      	ldrb	r0, [r2, #8]
 800b8cc:	79b9      	ldrb	r1, [r7, #6]
 800b8ce:	683a      	ldr	r2, [r7, #0]
 800b8d0:	4798      	blx	r3
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	73fb      	strb	r3, [r7, #15]
  return res;
 800b8d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3710      	adds	r7, #16
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}
 800b8e0:	20001d8c 	.word	0x20001d8c

0800b8e4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b085      	sub	sp, #20
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b8f4:	89fb      	ldrh	r3, [r7, #14]
 800b8f6:	021b      	lsls	r3, r3, #8
 800b8f8:	b21a      	sxth	r2, r3
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	781b      	ldrb	r3, [r3, #0]
 800b8fe:	b21b      	sxth	r3, r3
 800b900:	4313      	orrs	r3, r2
 800b902:	b21b      	sxth	r3, r3
 800b904:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b906:	89fb      	ldrh	r3, [r7, #14]
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3714      	adds	r7, #20
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr

0800b914 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b914:	b480      	push	{r7}
 800b916:	b085      	sub	sp, #20
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	3303      	adds	r3, #3
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	021b      	lsls	r3, r3, #8
 800b928:	687a      	ldr	r2, [r7, #4]
 800b92a:	3202      	adds	r2, #2
 800b92c:	7812      	ldrb	r2, [r2, #0]
 800b92e:	4313      	orrs	r3, r2
 800b930:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	021b      	lsls	r3, r3, #8
 800b936:	687a      	ldr	r2, [r7, #4]
 800b938:	3201      	adds	r2, #1
 800b93a:	7812      	ldrb	r2, [r2, #0]
 800b93c:	4313      	orrs	r3, r2
 800b93e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	021b      	lsls	r3, r3, #8
 800b944:	687a      	ldr	r2, [r7, #4]
 800b946:	7812      	ldrb	r2, [r2, #0]
 800b948:	4313      	orrs	r3, r2
 800b94a:	60fb      	str	r3, [r7, #12]
	return rv;
 800b94c:	68fb      	ldr	r3, [r7, #12]
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3714      	adds	r7, #20
 800b952:	46bd      	mov	sp, r7
 800b954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b958:	4770      	bx	lr

0800b95a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b95a:	b480      	push	{r7}
 800b95c:	b083      	sub	sp, #12
 800b95e:	af00      	add	r7, sp, #0
 800b960:	6078      	str	r0, [r7, #4]
 800b962:	460b      	mov	r3, r1
 800b964:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	1c5a      	adds	r2, r3, #1
 800b96a:	607a      	str	r2, [r7, #4]
 800b96c:	887a      	ldrh	r2, [r7, #2]
 800b96e:	b2d2      	uxtb	r2, r2
 800b970:	701a      	strb	r2, [r3, #0]
 800b972:	887b      	ldrh	r3, [r7, #2]
 800b974:	0a1b      	lsrs	r3, r3, #8
 800b976:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	1c5a      	adds	r2, r3, #1
 800b97c:	607a      	str	r2, [r7, #4]
 800b97e:	887a      	ldrh	r2, [r7, #2]
 800b980:	b2d2      	uxtb	r2, r2
 800b982:	701a      	strb	r2, [r3, #0]
}
 800b984:	bf00      	nop
 800b986:	370c      	adds	r7, #12
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr

0800b990 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b990:	b480      	push	{r7}
 800b992:	b083      	sub	sp, #12
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
 800b998:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	1c5a      	adds	r2, r3, #1
 800b99e:	607a      	str	r2, [r7, #4]
 800b9a0:	683a      	ldr	r2, [r7, #0]
 800b9a2:	b2d2      	uxtb	r2, r2
 800b9a4:	701a      	strb	r2, [r3, #0]
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	0a1b      	lsrs	r3, r3, #8
 800b9aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	1c5a      	adds	r2, r3, #1
 800b9b0:	607a      	str	r2, [r7, #4]
 800b9b2:	683a      	ldr	r2, [r7, #0]
 800b9b4:	b2d2      	uxtb	r2, r2
 800b9b6:	701a      	strb	r2, [r3, #0]
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	0a1b      	lsrs	r3, r3, #8
 800b9bc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	1c5a      	adds	r2, r3, #1
 800b9c2:	607a      	str	r2, [r7, #4]
 800b9c4:	683a      	ldr	r2, [r7, #0]
 800b9c6:	b2d2      	uxtb	r2, r2
 800b9c8:	701a      	strb	r2, [r3, #0]
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	0a1b      	lsrs	r3, r3, #8
 800b9ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	1c5a      	adds	r2, r3, #1
 800b9d4:	607a      	str	r2, [r7, #4]
 800b9d6:	683a      	ldr	r2, [r7, #0]
 800b9d8:	b2d2      	uxtb	r2, r2
 800b9da:	701a      	strb	r2, [r3, #0]
}
 800b9dc:	bf00      	nop
 800b9de:	370c      	adds	r7, #12
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr

0800b9e8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b9e8:	b480      	push	{r7}
 800b9ea:	b087      	sub	sp, #28
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	60f8      	str	r0, [r7, #12]
 800b9f0:	60b9      	str	r1, [r7, #8]
 800b9f2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d00d      	beq.n	800ba1e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ba02:	693a      	ldr	r2, [r7, #16]
 800ba04:	1c53      	adds	r3, r2, #1
 800ba06:	613b      	str	r3, [r7, #16]
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	1c59      	adds	r1, r3, #1
 800ba0c:	6179      	str	r1, [r7, #20]
 800ba0e:	7812      	ldrb	r2, [r2, #0]
 800ba10:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	3b01      	subs	r3, #1
 800ba16:	607b      	str	r3, [r7, #4]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d1f1      	bne.n	800ba02 <mem_cpy+0x1a>
	}
}
 800ba1e:	bf00      	nop
 800ba20:	371c      	adds	r7, #28
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr

0800ba2a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ba2a:	b480      	push	{r7}
 800ba2c:	b087      	sub	sp, #28
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	60f8      	str	r0, [r7, #12]
 800ba32:	60b9      	str	r1, [r7, #8]
 800ba34:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	1c5a      	adds	r2, r3, #1
 800ba3e:	617a      	str	r2, [r7, #20]
 800ba40:	68ba      	ldr	r2, [r7, #8]
 800ba42:	b2d2      	uxtb	r2, r2
 800ba44:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	3b01      	subs	r3, #1
 800ba4a:	607b      	str	r3, [r7, #4]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d1f3      	bne.n	800ba3a <mem_set+0x10>
}
 800ba52:	bf00      	nop
 800ba54:	bf00      	nop
 800ba56:	371c      	adds	r7, #28
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5e:	4770      	bx	lr

0800ba60 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ba60:	b480      	push	{r7}
 800ba62:	b089      	sub	sp, #36	; 0x24
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	60f8      	str	r0, [r7, #12]
 800ba68:	60b9      	str	r1, [r7, #8]
 800ba6a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	61fb      	str	r3, [r7, #28]
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ba74:	2300      	movs	r3, #0
 800ba76:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ba78:	69fb      	ldr	r3, [r7, #28]
 800ba7a:	1c5a      	adds	r2, r3, #1
 800ba7c:	61fa      	str	r2, [r7, #28]
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	4619      	mov	r1, r3
 800ba82:	69bb      	ldr	r3, [r7, #24]
 800ba84:	1c5a      	adds	r2, r3, #1
 800ba86:	61ba      	str	r2, [r7, #24]
 800ba88:	781b      	ldrb	r3, [r3, #0]
 800ba8a:	1acb      	subs	r3, r1, r3
 800ba8c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	3b01      	subs	r3, #1
 800ba92:	607b      	str	r3, [r7, #4]
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d002      	beq.n	800baa0 <mem_cmp+0x40>
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d0eb      	beq.n	800ba78 <mem_cmp+0x18>

	return r;
 800baa0:	697b      	ldr	r3, [r7, #20]
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3724      	adds	r7, #36	; 0x24
 800baa6:	46bd      	mov	sp, r7
 800baa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baac:	4770      	bx	lr

0800baae <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800baae:	b480      	push	{r7}
 800bab0:	b083      	sub	sp, #12
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	6078      	str	r0, [r7, #4]
 800bab6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bab8:	e002      	b.n	800bac0 <chk_chr+0x12>
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	3301      	adds	r3, #1
 800babe:	607b      	str	r3, [r7, #4]
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	781b      	ldrb	r3, [r3, #0]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d005      	beq.n	800bad4 <chk_chr+0x26>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	461a      	mov	r2, r3
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d1f2      	bne.n	800baba <chk_chr+0xc>
	return *str;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	781b      	ldrb	r3, [r3, #0]
}
 800bad8:	4618      	mov	r0, r3
 800bada:	370c      	adds	r7, #12
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b085      	sub	sp, #20
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800baee:	2300      	movs	r3, #0
 800baf0:	60bb      	str	r3, [r7, #8]
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	60fb      	str	r3, [r7, #12]
 800baf6:	e029      	b.n	800bb4c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800baf8:	4a27      	ldr	r2, [pc, #156]	; (800bb98 <chk_lock+0xb4>)
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	011b      	lsls	r3, r3, #4
 800bafe:	4413      	add	r3, r2
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d01d      	beq.n	800bb42 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bb06:	4a24      	ldr	r2, [pc, #144]	; (800bb98 <chk_lock+0xb4>)
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	011b      	lsls	r3, r3, #4
 800bb0c:	4413      	add	r3, r2
 800bb0e:	681a      	ldr	r2, [r3, #0]
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	429a      	cmp	r2, r3
 800bb16:	d116      	bne.n	800bb46 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800bb18:	4a1f      	ldr	r2, [pc, #124]	; (800bb98 <chk_lock+0xb4>)
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	011b      	lsls	r3, r3, #4
 800bb1e:	4413      	add	r3, r2
 800bb20:	3304      	adds	r3, #4
 800bb22:	681a      	ldr	r2, [r3, #0]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d10c      	bne.n	800bb46 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bb2c:	4a1a      	ldr	r2, [pc, #104]	; (800bb98 <chk_lock+0xb4>)
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	011b      	lsls	r3, r3, #4
 800bb32:	4413      	add	r3, r2
 800bb34:	3308      	adds	r3, #8
 800bb36:	681a      	ldr	r2, [r3, #0]
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d102      	bne.n	800bb46 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bb40:	e007      	b.n	800bb52 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800bb42:	2301      	movs	r3, #1
 800bb44:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	3301      	adds	r3, #1
 800bb4a:	60fb      	str	r3, [r7, #12]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2b01      	cmp	r3, #1
 800bb50:	d9d2      	bls.n	800baf8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	2b02      	cmp	r3, #2
 800bb56:	d109      	bne.n	800bb6c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d102      	bne.n	800bb64 <chk_lock+0x80>
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	2b02      	cmp	r3, #2
 800bb62:	d101      	bne.n	800bb68 <chk_lock+0x84>
 800bb64:	2300      	movs	r3, #0
 800bb66:	e010      	b.n	800bb8a <chk_lock+0xa6>
 800bb68:	2312      	movs	r3, #18
 800bb6a:	e00e      	b.n	800bb8a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d108      	bne.n	800bb84 <chk_lock+0xa0>
 800bb72:	4a09      	ldr	r2, [pc, #36]	; (800bb98 <chk_lock+0xb4>)
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	011b      	lsls	r3, r3, #4
 800bb78:	4413      	add	r3, r2
 800bb7a:	330c      	adds	r3, #12
 800bb7c:	881b      	ldrh	r3, [r3, #0]
 800bb7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb82:	d101      	bne.n	800bb88 <chk_lock+0xa4>
 800bb84:	2310      	movs	r3, #16
 800bb86:	e000      	b.n	800bb8a <chk_lock+0xa6>
 800bb88:	2300      	movs	r3, #0
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3714      	adds	r7, #20
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb94:	4770      	bx	lr
 800bb96:	bf00      	nop
 800bb98:	20001b6c 	.word	0x20001b6c

0800bb9c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b083      	sub	sp, #12
 800bba0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bba2:	2300      	movs	r3, #0
 800bba4:	607b      	str	r3, [r7, #4]
 800bba6:	e002      	b.n	800bbae <enq_lock+0x12>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	3301      	adds	r3, #1
 800bbac:	607b      	str	r3, [r7, #4]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2b01      	cmp	r3, #1
 800bbb2:	d806      	bhi.n	800bbc2 <enq_lock+0x26>
 800bbb4:	4a09      	ldr	r2, [pc, #36]	; (800bbdc <enq_lock+0x40>)
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	011b      	lsls	r3, r3, #4
 800bbba:	4413      	add	r3, r2
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d1f2      	bne.n	800bba8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2b02      	cmp	r3, #2
 800bbc6:	bf14      	ite	ne
 800bbc8:	2301      	movne	r3, #1
 800bbca:	2300      	moveq	r3, #0
 800bbcc:	b2db      	uxtb	r3, r3
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	370c      	adds	r7, #12
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr
 800bbda:	bf00      	nop
 800bbdc:	20001b6c 	.word	0x20001b6c

0800bbe0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b085      	sub	sp, #20
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bbea:	2300      	movs	r3, #0
 800bbec:	60fb      	str	r3, [r7, #12]
 800bbee:	e01f      	b.n	800bc30 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bbf0:	4a41      	ldr	r2, [pc, #260]	; (800bcf8 <inc_lock+0x118>)
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	011b      	lsls	r3, r3, #4
 800bbf6:	4413      	add	r3, r2
 800bbf8:	681a      	ldr	r2, [r3, #0]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d113      	bne.n	800bc2a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bc02:	4a3d      	ldr	r2, [pc, #244]	; (800bcf8 <inc_lock+0x118>)
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	011b      	lsls	r3, r3, #4
 800bc08:	4413      	add	r3, r2
 800bc0a:	3304      	adds	r3, #4
 800bc0c:	681a      	ldr	r2, [r3, #0]
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bc12:	429a      	cmp	r2, r3
 800bc14:	d109      	bne.n	800bc2a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bc16:	4a38      	ldr	r2, [pc, #224]	; (800bcf8 <inc_lock+0x118>)
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	011b      	lsls	r3, r3, #4
 800bc1c:	4413      	add	r3, r2
 800bc1e:	3308      	adds	r3, #8
 800bc20:	681a      	ldr	r2, [r3, #0]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bc26:	429a      	cmp	r2, r3
 800bc28:	d006      	beq.n	800bc38 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	3301      	adds	r3, #1
 800bc2e:	60fb      	str	r3, [r7, #12]
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d9dc      	bls.n	800bbf0 <inc_lock+0x10>
 800bc36:	e000      	b.n	800bc3a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bc38:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	2b02      	cmp	r3, #2
 800bc3e:	d132      	bne.n	800bca6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bc40:	2300      	movs	r3, #0
 800bc42:	60fb      	str	r3, [r7, #12]
 800bc44:	e002      	b.n	800bc4c <inc_lock+0x6c>
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	3301      	adds	r3, #1
 800bc4a:	60fb      	str	r3, [r7, #12]
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2b01      	cmp	r3, #1
 800bc50:	d806      	bhi.n	800bc60 <inc_lock+0x80>
 800bc52:	4a29      	ldr	r2, [pc, #164]	; (800bcf8 <inc_lock+0x118>)
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	011b      	lsls	r3, r3, #4
 800bc58:	4413      	add	r3, r2
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d1f2      	bne.n	800bc46 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	2b02      	cmp	r3, #2
 800bc64:	d101      	bne.n	800bc6a <inc_lock+0x8a>
 800bc66:	2300      	movs	r3, #0
 800bc68:	e040      	b.n	800bcec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681a      	ldr	r2, [r3, #0]
 800bc6e:	4922      	ldr	r1, [pc, #136]	; (800bcf8 <inc_lock+0x118>)
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	011b      	lsls	r3, r3, #4
 800bc74:	440b      	add	r3, r1
 800bc76:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	689a      	ldr	r2, [r3, #8]
 800bc7c:	491e      	ldr	r1, [pc, #120]	; (800bcf8 <inc_lock+0x118>)
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	011b      	lsls	r3, r3, #4
 800bc82:	440b      	add	r3, r1
 800bc84:	3304      	adds	r3, #4
 800bc86:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	695a      	ldr	r2, [r3, #20]
 800bc8c:	491a      	ldr	r1, [pc, #104]	; (800bcf8 <inc_lock+0x118>)
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	011b      	lsls	r3, r3, #4
 800bc92:	440b      	add	r3, r1
 800bc94:	3308      	adds	r3, #8
 800bc96:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bc98:	4a17      	ldr	r2, [pc, #92]	; (800bcf8 <inc_lock+0x118>)
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	011b      	lsls	r3, r3, #4
 800bc9e:	4413      	add	r3, r2
 800bca0:	330c      	adds	r3, #12
 800bca2:	2200      	movs	r2, #0
 800bca4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d009      	beq.n	800bcc0 <inc_lock+0xe0>
 800bcac:	4a12      	ldr	r2, [pc, #72]	; (800bcf8 <inc_lock+0x118>)
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	011b      	lsls	r3, r3, #4
 800bcb2:	4413      	add	r3, r2
 800bcb4:	330c      	adds	r3, #12
 800bcb6:	881b      	ldrh	r3, [r3, #0]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d001      	beq.n	800bcc0 <inc_lock+0xe0>
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	e015      	b.n	800bcec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d108      	bne.n	800bcd8 <inc_lock+0xf8>
 800bcc6:	4a0c      	ldr	r2, [pc, #48]	; (800bcf8 <inc_lock+0x118>)
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	011b      	lsls	r3, r3, #4
 800bccc:	4413      	add	r3, r2
 800bcce:	330c      	adds	r3, #12
 800bcd0:	881b      	ldrh	r3, [r3, #0]
 800bcd2:	3301      	adds	r3, #1
 800bcd4:	b29a      	uxth	r2, r3
 800bcd6:	e001      	b.n	800bcdc <inc_lock+0xfc>
 800bcd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bcdc:	4906      	ldr	r1, [pc, #24]	; (800bcf8 <inc_lock+0x118>)
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	011b      	lsls	r3, r3, #4
 800bce2:	440b      	add	r3, r1
 800bce4:	330c      	adds	r3, #12
 800bce6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	3301      	adds	r3, #1
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3714      	adds	r7, #20
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr
 800bcf8:	20001b6c 	.word	0x20001b6c

0800bcfc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b085      	sub	sp, #20
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	3b01      	subs	r3, #1
 800bd08:	607b      	str	r3, [r7, #4]
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2b01      	cmp	r3, #1
 800bd0e:	d825      	bhi.n	800bd5c <dec_lock+0x60>
		n = Files[i].ctr;
 800bd10:	4a17      	ldr	r2, [pc, #92]	; (800bd70 <dec_lock+0x74>)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	011b      	lsls	r3, r3, #4
 800bd16:	4413      	add	r3, r2
 800bd18:	330c      	adds	r3, #12
 800bd1a:	881b      	ldrh	r3, [r3, #0]
 800bd1c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bd1e:	89fb      	ldrh	r3, [r7, #14]
 800bd20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd24:	d101      	bne.n	800bd2a <dec_lock+0x2e>
 800bd26:	2300      	movs	r3, #0
 800bd28:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bd2a:	89fb      	ldrh	r3, [r7, #14]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d002      	beq.n	800bd36 <dec_lock+0x3a>
 800bd30:	89fb      	ldrh	r3, [r7, #14]
 800bd32:	3b01      	subs	r3, #1
 800bd34:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bd36:	4a0e      	ldr	r2, [pc, #56]	; (800bd70 <dec_lock+0x74>)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	011b      	lsls	r3, r3, #4
 800bd3c:	4413      	add	r3, r2
 800bd3e:	330c      	adds	r3, #12
 800bd40:	89fa      	ldrh	r2, [r7, #14]
 800bd42:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bd44:	89fb      	ldrh	r3, [r7, #14]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d105      	bne.n	800bd56 <dec_lock+0x5a>
 800bd4a:	4a09      	ldr	r2, [pc, #36]	; (800bd70 <dec_lock+0x74>)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	011b      	lsls	r3, r3, #4
 800bd50:	4413      	add	r3, r2
 800bd52:	2200      	movs	r2, #0
 800bd54:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bd56:	2300      	movs	r3, #0
 800bd58:	737b      	strb	r3, [r7, #13]
 800bd5a:	e001      	b.n	800bd60 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bd5c:	2302      	movs	r3, #2
 800bd5e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bd60:	7b7b      	ldrb	r3, [r7, #13]
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3714      	adds	r7, #20
 800bd66:	46bd      	mov	sp, r7
 800bd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6c:	4770      	bx	lr
 800bd6e:	bf00      	nop
 800bd70:	20001b6c 	.word	0x20001b6c

0800bd74 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bd74:	b480      	push	{r7}
 800bd76:	b085      	sub	sp, #20
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	60fb      	str	r3, [r7, #12]
 800bd80:	e010      	b.n	800bda4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bd82:	4a0d      	ldr	r2, [pc, #52]	; (800bdb8 <clear_lock+0x44>)
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	011b      	lsls	r3, r3, #4
 800bd88:	4413      	add	r3, r2
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d105      	bne.n	800bd9e <clear_lock+0x2a>
 800bd92:	4a09      	ldr	r2, [pc, #36]	; (800bdb8 <clear_lock+0x44>)
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	011b      	lsls	r3, r3, #4
 800bd98:	4413      	add	r3, r2
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	3301      	adds	r3, #1
 800bda2:	60fb      	str	r3, [r7, #12]
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	d9eb      	bls.n	800bd82 <clear_lock+0xe>
	}
}
 800bdaa:	bf00      	nop
 800bdac:	bf00      	nop
 800bdae:	3714      	adds	r7, #20
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb6:	4770      	bx	lr
 800bdb8:	20001b6c 	.word	0x20001b6c

0800bdbc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b086      	sub	sp, #24
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	78db      	ldrb	r3, [r3, #3]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d034      	beq.n	800be3a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdd4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	7858      	ldrb	r0, [r3, #1]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bde0:	2301      	movs	r3, #1
 800bde2:	697a      	ldr	r2, [r7, #20]
 800bde4:	f7ff fd40 	bl	800b868 <disk_write>
 800bde8:	4603      	mov	r3, r0
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d002      	beq.n	800bdf4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800bdee:	2301      	movs	r3, #1
 800bdf0:	73fb      	strb	r3, [r7, #15]
 800bdf2:	e022      	b.n	800be3a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdfe:	697a      	ldr	r2, [r7, #20]
 800be00:	1ad2      	subs	r2, r2, r3
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	69db      	ldr	r3, [r3, #28]
 800be06:	429a      	cmp	r2, r3
 800be08:	d217      	bcs.n	800be3a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	789b      	ldrb	r3, [r3, #2]
 800be0e:	613b      	str	r3, [r7, #16]
 800be10:	e010      	b.n	800be34 <sync_window+0x78>
					wsect += fs->fsize;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	69db      	ldr	r3, [r3, #28]
 800be16:	697a      	ldr	r2, [r7, #20]
 800be18:	4413      	add	r3, r2
 800be1a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	7858      	ldrb	r0, [r3, #1]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800be26:	2301      	movs	r3, #1
 800be28:	697a      	ldr	r2, [r7, #20]
 800be2a:	f7ff fd1d 	bl	800b868 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800be2e:	693b      	ldr	r3, [r7, #16]
 800be30:	3b01      	subs	r3, #1
 800be32:	613b      	str	r3, [r7, #16]
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	2b01      	cmp	r3, #1
 800be38:	d8eb      	bhi.n	800be12 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800be3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3718      	adds	r7, #24
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}

0800be44 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b084      	sub	sp, #16
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
 800be4c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800be4e:	2300      	movs	r3, #0
 800be50:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be56:	683a      	ldr	r2, [r7, #0]
 800be58:	429a      	cmp	r2, r3
 800be5a:	d01b      	beq.n	800be94 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f7ff ffad 	bl	800bdbc <sync_window>
 800be62:	4603      	mov	r3, r0
 800be64:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800be66:	7bfb      	ldrb	r3, [r7, #15]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d113      	bne.n	800be94 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	7858      	ldrb	r0, [r3, #1]
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800be76:	2301      	movs	r3, #1
 800be78:	683a      	ldr	r2, [r7, #0]
 800be7a:	f7ff fcd5 	bl	800b828 <disk_read>
 800be7e:	4603      	mov	r3, r0
 800be80:	2b00      	cmp	r3, #0
 800be82:	d004      	beq.n	800be8e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800be84:	f04f 33ff 	mov.w	r3, #4294967295
 800be88:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800be8a:	2301      	movs	r3, #1
 800be8c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	683a      	ldr	r2, [r7, #0]
 800be92:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800be94:	7bfb      	ldrb	r3, [r7, #15]
}
 800be96:	4618      	mov	r0, r3
 800be98:	3710      	adds	r7, #16
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}
	...

0800bea0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b084      	sub	sp, #16
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f7ff ff87 	bl	800bdbc <sync_window>
 800beae:	4603      	mov	r3, r0
 800beb0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800beb2:	7bfb      	ldrb	r3, [r7, #15]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d158      	bne.n	800bf6a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	781b      	ldrb	r3, [r3, #0]
 800bebc:	2b03      	cmp	r3, #3
 800bebe:	d148      	bne.n	800bf52 <sync_fs+0xb2>
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	791b      	ldrb	r3, [r3, #4]
 800bec4:	2b01      	cmp	r3, #1
 800bec6:	d144      	bne.n	800bf52 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	3334      	adds	r3, #52	; 0x34
 800becc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bed0:	2100      	movs	r1, #0
 800bed2:	4618      	mov	r0, r3
 800bed4:	f7ff fda9 	bl	800ba2a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	3334      	adds	r3, #52	; 0x34
 800bedc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bee0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bee4:	4618      	mov	r0, r3
 800bee6:	f7ff fd38 	bl	800b95a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	3334      	adds	r3, #52	; 0x34
 800beee:	4921      	ldr	r1, [pc, #132]	; (800bf74 <sync_fs+0xd4>)
 800bef0:	4618      	mov	r0, r3
 800bef2:	f7ff fd4d 	bl	800b990 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	3334      	adds	r3, #52	; 0x34
 800befa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800befe:	491e      	ldr	r1, [pc, #120]	; (800bf78 <sync_fs+0xd8>)
 800bf00:	4618      	mov	r0, r3
 800bf02:	f7ff fd45 	bl	800b990 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	3334      	adds	r3, #52	; 0x34
 800bf0a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	695b      	ldr	r3, [r3, #20]
 800bf12:	4619      	mov	r1, r3
 800bf14:	4610      	mov	r0, r2
 800bf16:	f7ff fd3b 	bl	800b990 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	3334      	adds	r3, #52	; 0x34
 800bf1e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	691b      	ldr	r3, [r3, #16]
 800bf26:	4619      	mov	r1, r3
 800bf28:	4610      	mov	r0, r2
 800bf2a:	f7ff fd31 	bl	800b990 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6a1b      	ldr	r3, [r3, #32]
 800bf32:	1c5a      	adds	r2, r3, #1
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	7858      	ldrb	r0, [r3, #1]
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf46:	2301      	movs	r3, #1
 800bf48:	f7ff fc8e 	bl	800b868 <disk_write>
			fs->fsi_flag = 0;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	785b      	ldrb	r3, [r3, #1]
 800bf56:	2200      	movs	r2, #0
 800bf58:	2100      	movs	r1, #0
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7ff fca4 	bl	800b8a8 <disk_ioctl>
 800bf60:	4603      	mov	r3, r0
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d001      	beq.n	800bf6a <sync_fs+0xca>
 800bf66:	2301      	movs	r3, #1
 800bf68:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bf6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3710      	adds	r7, #16
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}
 800bf74:	41615252 	.word	0x41615252
 800bf78:	61417272 	.word	0x61417272

0800bf7c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b083      	sub	sp, #12
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	3b02      	subs	r3, #2
 800bf8a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	699b      	ldr	r3, [r3, #24]
 800bf90:	3b02      	subs	r3, #2
 800bf92:	683a      	ldr	r2, [r7, #0]
 800bf94:	429a      	cmp	r2, r3
 800bf96:	d301      	bcc.n	800bf9c <clust2sect+0x20>
 800bf98:	2300      	movs	r3, #0
 800bf9a:	e008      	b.n	800bfae <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	895b      	ldrh	r3, [r3, #10]
 800bfa0:	461a      	mov	r2, r3
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	fb03 f202 	mul.w	r2, r3, r2
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfac:	4413      	add	r3, r2
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	370c      	adds	r7, #12
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb8:	4770      	bx	lr

0800bfba <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bfba:	b580      	push	{r7, lr}
 800bfbc:	b086      	sub	sp, #24
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	6078      	str	r0, [r7, #4]
 800bfc2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	2b01      	cmp	r3, #1
 800bfce:	d904      	bls.n	800bfda <get_fat+0x20>
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	699b      	ldr	r3, [r3, #24]
 800bfd4:	683a      	ldr	r2, [r7, #0]
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d302      	bcc.n	800bfe0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800bfda:	2301      	movs	r3, #1
 800bfdc:	617b      	str	r3, [r7, #20]
 800bfde:	e08f      	b.n	800c100 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bfe0:	f04f 33ff 	mov.w	r3, #4294967295
 800bfe4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bfe6:	693b      	ldr	r3, [r7, #16]
 800bfe8:	781b      	ldrb	r3, [r3, #0]
 800bfea:	2b03      	cmp	r3, #3
 800bfec:	d062      	beq.n	800c0b4 <get_fat+0xfa>
 800bfee:	2b03      	cmp	r3, #3
 800bff0:	dc7c      	bgt.n	800c0ec <get_fat+0x132>
 800bff2:	2b01      	cmp	r3, #1
 800bff4:	d002      	beq.n	800bffc <get_fat+0x42>
 800bff6:	2b02      	cmp	r3, #2
 800bff8:	d042      	beq.n	800c080 <get_fat+0xc6>
 800bffa:	e077      	b.n	800c0ec <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	60fb      	str	r3, [r7, #12]
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	085b      	lsrs	r3, r3, #1
 800c004:	68fa      	ldr	r2, [r7, #12]
 800c006:	4413      	add	r3, r2
 800c008:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	0a5b      	lsrs	r3, r3, #9
 800c012:	4413      	add	r3, r2
 800c014:	4619      	mov	r1, r3
 800c016:	6938      	ldr	r0, [r7, #16]
 800c018:	f7ff ff14 	bl	800be44 <move_window>
 800c01c:	4603      	mov	r3, r0
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d167      	bne.n	800c0f2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	1c5a      	adds	r2, r3, #1
 800c026:	60fa      	str	r2, [r7, #12]
 800c028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c02c:	693a      	ldr	r2, [r7, #16]
 800c02e:	4413      	add	r3, r2
 800c030:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c034:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	0a5b      	lsrs	r3, r3, #9
 800c03e:	4413      	add	r3, r2
 800c040:	4619      	mov	r1, r3
 800c042:	6938      	ldr	r0, [r7, #16]
 800c044:	f7ff fefe 	bl	800be44 <move_window>
 800c048:	4603      	mov	r3, r0
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d153      	bne.n	800c0f6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c054:	693a      	ldr	r2, [r7, #16]
 800c056:	4413      	add	r3, r2
 800c058:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c05c:	021b      	lsls	r3, r3, #8
 800c05e:	461a      	mov	r2, r3
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	4313      	orrs	r3, r2
 800c064:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	f003 0301 	and.w	r3, r3, #1
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d002      	beq.n	800c076 <get_fat+0xbc>
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	091b      	lsrs	r3, r3, #4
 800c074:	e002      	b.n	800c07c <get_fat+0xc2>
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c07c:	617b      	str	r3, [r7, #20]
			break;
 800c07e:	e03f      	b.n	800c100 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	0a1b      	lsrs	r3, r3, #8
 800c088:	4413      	add	r3, r2
 800c08a:	4619      	mov	r1, r3
 800c08c:	6938      	ldr	r0, [r7, #16]
 800c08e:	f7ff fed9 	bl	800be44 <move_window>
 800c092:	4603      	mov	r3, r0
 800c094:	2b00      	cmp	r3, #0
 800c096:	d130      	bne.n	800c0fa <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	005b      	lsls	r3, r3, #1
 800c0a2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c0a6:	4413      	add	r3, r2
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f7ff fc1b 	bl	800b8e4 <ld_word>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	617b      	str	r3, [r7, #20]
			break;
 800c0b2:	e025      	b.n	800c100 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	09db      	lsrs	r3, r3, #7
 800c0bc:	4413      	add	r3, r2
 800c0be:	4619      	mov	r1, r3
 800c0c0:	6938      	ldr	r0, [r7, #16]
 800c0c2:	f7ff febf 	bl	800be44 <move_window>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d118      	bne.n	800c0fe <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	009b      	lsls	r3, r3, #2
 800c0d6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c0da:	4413      	add	r3, r2
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7ff fc19 	bl	800b914 <ld_dword>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c0e8:	617b      	str	r3, [r7, #20]
			break;
 800c0ea:	e009      	b.n	800c100 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	617b      	str	r3, [r7, #20]
 800c0f0:	e006      	b.n	800c100 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c0f2:	bf00      	nop
 800c0f4:	e004      	b.n	800c100 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c0f6:	bf00      	nop
 800c0f8:	e002      	b.n	800c100 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c0fa:	bf00      	nop
 800c0fc:	e000      	b.n	800c100 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c0fe:	bf00      	nop
		}
	}

	return val;
 800c100:	697b      	ldr	r3, [r7, #20]
}
 800c102:	4618      	mov	r0, r3
 800c104:	3718      	adds	r7, #24
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}

0800c10a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c10a:	b590      	push	{r4, r7, lr}
 800c10c:	b089      	sub	sp, #36	; 0x24
 800c10e:	af00      	add	r7, sp, #0
 800c110:	60f8      	str	r0, [r7, #12]
 800c112:	60b9      	str	r1, [r7, #8]
 800c114:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c116:	2302      	movs	r3, #2
 800c118:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	2b01      	cmp	r3, #1
 800c11e:	f240 80d9 	bls.w	800c2d4 <put_fat+0x1ca>
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	699b      	ldr	r3, [r3, #24]
 800c126:	68ba      	ldr	r2, [r7, #8]
 800c128:	429a      	cmp	r2, r3
 800c12a:	f080 80d3 	bcs.w	800c2d4 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	2b03      	cmp	r3, #3
 800c134:	f000 8096 	beq.w	800c264 <put_fat+0x15a>
 800c138:	2b03      	cmp	r3, #3
 800c13a:	f300 80cb 	bgt.w	800c2d4 <put_fat+0x1ca>
 800c13e:	2b01      	cmp	r3, #1
 800c140:	d002      	beq.n	800c148 <put_fat+0x3e>
 800c142:	2b02      	cmp	r3, #2
 800c144:	d06e      	beq.n	800c224 <put_fat+0x11a>
 800c146:	e0c5      	b.n	800c2d4 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	61bb      	str	r3, [r7, #24]
 800c14c:	69bb      	ldr	r3, [r7, #24]
 800c14e:	085b      	lsrs	r3, r3, #1
 800c150:	69ba      	ldr	r2, [r7, #24]
 800c152:	4413      	add	r3, r2
 800c154:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c15a:	69bb      	ldr	r3, [r7, #24]
 800c15c:	0a5b      	lsrs	r3, r3, #9
 800c15e:	4413      	add	r3, r2
 800c160:	4619      	mov	r1, r3
 800c162:	68f8      	ldr	r0, [r7, #12]
 800c164:	f7ff fe6e 	bl	800be44 <move_window>
 800c168:	4603      	mov	r3, r0
 800c16a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c16c:	7ffb      	ldrb	r3, [r7, #31]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	f040 80a9 	bne.w	800c2c6 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c17a:	69bb      	ldr	r3, [r7, #24]
 800c17c:	1c59      	adds	r1, r3, #1
 800c17e:	61b9      	str	r1, [r7, #24]
 800c180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c184:	4413      	add	r3, r2
 800c186:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	f003 0301 	and.w	r3, r3, #1
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d00d      	beq.n	800c1ae <put_fat+0xa4>
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	781b      	ldrb	r3, [r3, #0]
 800c196:	b25b      	sxtb	r3, r3
 800c198:	f003 030f 	and.w	r3, r3, #15
 800c19c:	b25a      	sxtb	r2, r3
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	b2db      	uxtb	r3, r3
 800c1a2:	011b      	lsls	r3, r3, #4
 800c1a4:	b25b      	sxtb	r3, r3
 800c1a6:	4313      	orrs	r3, r2
 800c1a8:	b25b      	sxtb	r3, r3
 800c1aa:	b2db      	uxtb	r3, r3
 800c1ac:	e001      	b.n	800c1b2 <put_fat+0xa8>
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	b2db      	uxtb	r3, r3
 800c1b2:	697a      	ldr	r2, [r7, #20]
 800c1b4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	2201      	movs	r2, #1
 800c1ba:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c1c0:	69bb      	ldr	r3, [r7, #24]
 800c1c2:	0a5b      	lsrs	r3, r3, #9
 800c1c4:	4413      	add	r3, r2
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	68f8      	ldr	r0, [r7, #12]
 800c1ca:	f7ff fe3b 	bl	800be44 <move_window>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c1d2:	7ffb      	ldrb	r3, [r7, #31]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d178      	bne.n	800c2ca <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c1de:	69bb      	ldr	r3, [r7, #24]
 800c1e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1e4:	4413      	add	r3, r2
 800c1e6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	f003 0301 	and.w	r3, r3, #1
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d003      	beq.n	800c1fa <put_fat+0xf0>
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	091b      	lsrs	r3, r3, #4
 800c1f6:	b2db      	uxtb	r3, r3
 800c1f8:	e00e      	b.n	800c218 <put_fat+0x10e>
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	781b      	ldrb	r3, [r3, #0]
 800c1fe:	b25b      	sxtb	r3, r3
 800c200:	f023 030f 	bic.w	r3, r3, #15
 800c204:	b25a      	sxtb	r2, r3
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	0a1b      	lsrs	r3, r3, #8
 800c20a:	b25b      	sxtb	r3, r3
 800c20c:	f003 030f 	and.w	r3, r3, #15
 800c210:	b25b      	sxtb	r3, r3
 800c212:	4313      	orrs	r3, r2
 800c214:	b25b      	sxtb	r3, r3
 800c216:	b2db      	uxtb	r3, r3
 800c218:	697a      	ldr	r2, [r7, #20]
 800c21a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2201      	movs	r2, #1
 800c220:	70da      	strb	r2, [r3, #3]
			break;
 800c222:	e057      	b.n	800c2d4 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	0a1b      	lsrs	r3, r3, #8
 800c22c:	4413      	add	r3, r2
 800c22e:	4619      	mov	r1, r3
 800c230:	68f8      	ldr	r0, [r7, #12]
 800c232:	f7ff fe07 	bl	800be44 <move_window>
 800c236:	4603      	mov	r3, r0
 800c238:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c23a:	7ffb      	ldrb	r3, [r7, #31]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d146      	bne.n	800c2ce <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	005b      	lsls	r3, r3, #1
 800c24a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c24e:	4413      	add	r3, r2
 800c250:	687a      	ldr	r2, [r7, #4]
 800c252:	b292      	uxth	r2, r2
 800c254:	4611      	mov	r1, r2
 800c256:	4618      	mov	r0, r3
 800c258:	f7ff fb7f 	bl	800b95a <st_word>
			fs->wflag = 1;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	2201      	movs	r2, #1
 800c260:	70da      	strb	r2, [r3, #3]
			break;
 800c262:	e037      	b.n	800c2d4 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	09db      	lsrs	r3, r3, #7
 800c26c:	4413      	add	r3, r2
 800c26e:	4619      	mov	r1, r3
 800c270:	68f8      	ldr	r0, [r7, #12]
 800c272:	f7ff fde7 	bl	800be44 <move_window>
 800c276:	4603      	mov	r3, r0
 800c278:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c27a:	7ffb      	ldrb	r3, [r7, #31]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d128      	bne.n	800c2d2 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	009b      	lsls	r3, r3, #2
 800c290:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c294:	4413      	add	r3, r2
 800c296:	4618      	mov	r0, r3
 800c298:	f7ff fb3c 	bl	800b914 <ld_dword>
 800c29c:	4603      	mov	r3, r0
 800c29e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c2a2:	4323      	orrs	r3, r4
 800c2a4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c2b4:	4413      	add	r3, r2
 800c2b6:	6879      	ldr	r1, [r7, #4]
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f7ff fb69 	bl	800b990 <st_dword>
			fs->wflag = 1;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2201      	movs	r2, #1
 800c2c2:	70da      	strb	r2, [r3, #3]
			break;
 800c2c4:	e006      	b.n	800c2d4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c2c6:	bf00      	nop
 800c2c8:	e004      	b.n	800c2d4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c2ca:	bf00      	nop
 800c2cc:	e002      	b.n	800c2d4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c2ce:	bf00      	nop
 800c2d0:	e000      	b.n	800c2d4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c2d2:	bf00      	nop
		}
	}
	return res;
 800c2d4:	7ffb      	ldrb	r3, [r7, #31]
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3724      	adds	r7, #36	; 0x24
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd90      	pop	{r4, r7, pc}

0800c2de <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c2de:	b580      	push	{r7, lr}
 800c2e0:	b088      	sub	sp, #32
 800c2e2:	af00      	add	r7, sp, #0
 800c2e4:	60f8      	str	r0, [r7, #12]
 800c2e6:	60b9      	str	r1, [r7, #8]
 800c2e8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	2b01      	cmp	r3, #1
 800c2f8:	d904      	bls.n	800c304 <remove_chain+0x26>
 800c2fa:	69bb      	ldr	r3, [r7, #24]
 800c2fc:	699b      	ldr	r3, [r3, #24]
 800c2fe:	68ba      	ldr	r2, [r7, #8]
 800c300:	429a      	cmp	r2, r3
 800c302:	d301      	bcc.n	800c308 <remove_chain+0x2a>
 800c304:	2302      	movs	r3, #2
 800c306:	e04b      	b.n	800c3a0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d00c      	beq.n	800c328 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c30e:	f04f 32ff 	mov.w	r2, #4294967295
 800c312:	6879      	ldr	r1, [r7, #4]
 800c314:	69b8      	ldr	r0, [r7, #24]
 800c316:	f7ff fef8 	bl	800c10a <put_fat>
 800c31a:	4603      	mov	r3, r0
 800c31c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c31e:	7ffb      	ldrb	r3, [r7, #31]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d001      	beq.n	800c328 <remove_chain+0x4a>
 800c324:	7ffb      	ldrb	r3, [r7, #31]
 800c326:	e03b      	b.n	800c3a0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c328:	68b9      	ldr	r1, [r7, #8]
 800c32a:	68f8      	ldr	r0, [r7, #12]
 800c32c:	f7ff fe45 	bl	800bfba <get_fat>
 800c330:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d031      	beq.n	800c39c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	2b01      	cmp	r3, #1
 800c33c:	d101      	bne.n	800c342 <remove_chain+0x64>
 800c33e:	2302      	movs	r3, #2
 800c340:	e02e      	b.n	800c3a0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c348:	d101      	bne.n	800c34e <remove_chain+0x70>
 800c34a:	2301      	movs	r3, #1
 800c34c:	e028      	b.n	800c3a0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c34e:	2200      	movs	r2, #0
 800c350:	68b9      	ldr	r1, [r7, #8]
 800c352:	69b8      	ldr	r0, [r7, #24]
 800c354:	f7ff fed9 	bl	800c10a <put_fat>
 800c358:	4603      	mov	r3, r0
 800c35a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c35c:	7ffb      	ldrb	r3, [r7, #31]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d001      	beq.n	800c366 <remove_chain+0x88>
 800c362:	7ffb      	ldrb	r3, [r7, #31]
 800c364:	e01c      	b.n	800c3a0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c366:	69bb      	ldr	r3, [r7, #24]
 800c368:	695a      	ldr	r2, [r3, #20]
 800c36a:	69bb      	ldr	r3, [r7, #24]
 800c36c:	699b      	ldr	r3, [r3, #24]
 800c36e:	3b02      	subs	r3, #2
 800c370:	429a      	cmp	r2, r3
 800c372:	d20b      	bcs.n	800c38c <remove_chain+0xae>
			fs->free_clst++;
 800c374:	69bb      	ldr	r3, [r7, #24]
 800c376:	695b      	ldr	r3, [r3, #20]
 800c378:	1c5a      	adds	r2, r3, #1
 800c37a:	69bb      	ldr	r3, [r7, #24]
 800c37c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800c37e:	69bb      	ldr	r3, [r7, #24]
 800c380:	791b      	ldrb	r3, [r3, #4]
 800c382:	f043 0301 	orr.w	r3, r3, #1
 800c386:	b2da      	uxtb	r2, r3
 800c388:	69bb      	ldr	r3, [r7, #24]
 800c38a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c390:	69bb      	ldr	r3, [r7, #24]
 800c392:	699b      	ldr	r3, [r3, #24]
 800c394:	68ba      	ldr	r2, [r7, #8]
 800c396:	429a      	cmp	r2, r3
 800c398:	d3c6      	bcc.n	800c328 <remove_chain+0x4a>
 800c39a:	e000      	b.n	800c39e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c39c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c39e:	2300      	movs	r3, #0
}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	3720      	adds	r7, #32
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}

0800c3a8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b088      	sub	sp, #32
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d10d      	bne.n	800c3da <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c3be:	693b      	ldr	r3, [r7, #16]
 800c3c0:	691b      	ldr	r3, [r3, #16]
 800c3c2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c3c4:	69bb      	ldr	r3, [r7, #24]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d004      	beq.n	800c3d4 <create_chain+0x2c>
 800c3ca:	693b      	ldr	r3, [r7, #16]
 800c3cc:	699b      	ldr	r3, [r3, #24]
 800c3ce:	69ba      	ldr	r2, [r7, #24]
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d31b      	bcc.n	800c40c <create_chain+0x64>
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	61bb      	str	r3, [r7, #24]
 800c3d8:	e018      	b.n	800c40c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c3da:	6839      	ldr	r1, [r7, #0]
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f7ff fdec 	bl	800bfba <get_fat>
 800c3e2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	2b01      	cmp	r3, #1
 800c3e8:	d801      	bhi.n	800c3ee <create_chain+0x46>
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	e070      	b.n	800c4d0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3f4:	d101      	bne.n	800c3fa <create_chain+0x52>
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	e06a      	b.n	800c4d0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c3fa:	693b      	ldr	r3, [r7, #16]
 800c3fc:	699b      	ldr	r3, [r3, #24]
 800c3fe:	68fa      	ldr	r2, [r7, #12]
 800c400:	429a      	cmp	r2, r3
 800c402:	d201      	bcs.n	800c408 <create_chain+0x60>
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	e063      	b.n	800c4d0 <create_chain+0x128>
		scl = clst;
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c40c:	69bb      	ldr	r3, [r7, #24]
 800c40e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c410:	69fb      	ldr	r3, [r7, #28]
 800c412:	3301      	adds	r3, #1
 800c414:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	699b      	ldr	r3, [r3, #24]
 800c41a:	69fa      	ldr	r2, [r7, #28]
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d307      	bcc.n	800c430 <create_chain+0x88>
				ncl = 2;
 800c420:	2302      	movs	r3, #2
 800c422:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c424:	69fa      	ldr	r2, [r7, #28]
 800c426:	69bb      	ldr	r3, [r7, #24]
 800c428:	429a      	cmp	r2, r3
 800c42a:	d901      	bls.n	800c430 <create_chain+0x88>
 800c42c:	2300      	movs	r3, #0
 800c42e:	e04f      	b.n	800c4d0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c430:	69f9      	ldr	r1, [r7, #28]
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f7ff fdc1 	bl	800bfba <get_fat>
 800c438:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d00e      	beq.n	800c45e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2b01      	cmp	r3, #1
 800c444:	d003      	beq.n	800c44e <create_chain+0xa6>
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c44c:	d101      	bne.n	800c452 <create_chain+0xaa>
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	e03e      	b.n	800c4d0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c452:	69fa      	ldr	r2, [r7, #28]
 800c454:	69bb      	ldr	r3, [r7, #24]
 800c456:	429a      	cmp	r2, r3
 800c458:	d1da      	bne.n	800c410 <create_chain+0x68>
 800c45a:	2300      	movs	r3, #0
 800c45c:	e038      	b.n	800c4d0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c45e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c460:	f04f 32ff 	mov.w	r2, #4294967295
 800c464:	69f9      	ldr	r1, [r7, #28]
 800c466:	6938      	ldr	r0, [r7, #16]
 800c468:	f7ff fe4f 	bl	800c10a <put_fat>
 800c46c:	4603      	mov	r3, r0
 800c46e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c470:	7dfb      	ldrb	r3, [r7, #23]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d109      	bne.n	800c48a <create_chain+0xe2>
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d006      	beq.n	800c48a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c47c:	69fa      	ldr	r2, [r7, #28]
 800c47e:	6839      	ldr	r1, [r7, #0]
 800c480:	6938      	ldr	r0, [r7, #16]
 800c482:	f7ff fe42 	bl	800c10a <put_fat>
 800c486:	4603      	mov	r3, r0
 800c488:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c48a:	7dfb      	ldrb	r3, [r7, #23]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d116      	bne.n	800c4be <create_chain+0x116>
		fs->last_clst = ncl;
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	69fa      	ldr	r2, [r7, #28]
 800c494:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	695a      	ldr	r2, [r3, #20]
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	699b      	ldr	r3, [r3, #24]
 800c49e:	3b02      	subs	r3, #2
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d804      	bhi.n	800c4ae <create_chain+0x106>
 800c4a4:	693b      	ldr	r3, [r7, #16]
 800c4a6:	695b      	ldr	r3, [r3, #20]
 800c4a8:	1e5a      	subs	r2, r3, #1
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	791b      	ldrb	r3, [r3, #4]
 800c4b2:	f043 0301 	orr.w	r3, r3, #1
 800c4b6:	b2da      	uxtb	r2, r3
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	711a      	strb	r2, [r3, #4]
 800c4bc:	e007      	b.n	800c4ce <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c4be:	7dfb      	ldrb	r3, [r7, #23]
 800c4c0:	2b01      	cmp	r3, #1
 800c4c2:	d102      	bne.n	800c4ca <create_chain+0x122>
 800c4c4:	f04f 33ff 	mov.w	r3, #4294967295
 800c4c8:	e000      	b.n	800c4cc <create_chain+0x124>
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c4ce:	69fb      	ldr	r3, [r7, #28]
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3720      	adds	r7, #32
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}

0800c4d8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b087      	sub	sp, #28
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ec:	3304      	adds	r3, #4
 800c4ee:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	0a5b      	lsrs	r3, r3, #9
 800c4f4:	68fa      	ldr	r2, [r7, #12]
 800c4f6:	8952      	ldrh	r2, [r2, #10]
 800c4f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4fc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c4fe:	693b      	ldr	r3, [r7, #16]
 800c500:	1d1a      	adds	r2, r3, #4
 800c502:	613a      	str	r2, [r7, #16]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d101      	bne.n	800c512 <clmt_clust+0x3a>
 800c50e:	2300      	movs	r3, #0
 800c510:	e010      	b.n	800c534 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c512:	697a      	ldr	r2, [r7, #20]
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	429a      	cmp	r2, r3
 800c518:	d307      	bcc.n	800c52a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c51a:	697a      	ldr	r2, [r7, #20]
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	1ad3      	subs	r3, r2, r3
 800c520:	617b      	str	r3, [r7, #20]
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	3304      	adds	r3, #4
 800c526:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c528:	e7e9      	b.n	800c4fe <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c52a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	681a      	ldr	r2, [r3, #0]
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	4413      	add	r3, r2
}
 800c534:	4618      	mov	r0, r3
 800c536:	371c      	adds	r7, #28
 800c538:	46bd      	mov	sp, r7
 800c53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53e:	4770      	bx	lr

0800c540 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b086      	sub	sp, #24
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
 800c548:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c556:	d204      	bcs.n	800c562 <dir_sdi+0x22>
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	f003 031f 	and.w	r3, r3, #31
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d001      	beq.n	800c566 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c562:	2302      	movs	r3, #2
 800c564:	e063      	b.n	800c62e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	683a      	ldr	r2, [r7, #0]
 800c56a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	689b      	ldr	r3, [r3, #8]
 800c570:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d106      	bne.n	800c586 <dir_sdi+0x46>
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	781b      	ldrb	r3, [r3, #0]
 800c57c:	2b02      	cmp	r3, #2
 800c57e:	d902      	bls.n	800c586 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c584:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d10c      	bne.n	800c5a6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	095b      	lsrs	r3, r3, #5
 800c590:	693a      	ldr	r2, [r7, #16]
 800c592:	8912      	ldrh	r2, [r2, #8]
 800c594:	4293      	cmp	r3, r2
 800c596:	d301      	bcc.n	800c59c <dir_sdi+0x5c>
 800c598:	2302      	movs	r3, #2
 800c59a:	e048      	b.n	800c62e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	61da      	str	r2, [r3, #28]
 800c5a4:	e029      	b.n	800c5fa <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	895b      	ldrh	r3, [r3, #10]
 800c5aa:	025b      	lsls	r3, r3, #9
 800c5ac:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c5ae:	e019      	b.n	800c5e4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6979      	ldr	r1, [r7, #20]
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f7ff fd00 	bl	800bfba <get_fat>
 800c5ba:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5c2:	d101      	bne.n	800c5c8 <dir_sdi+0x88>
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	e032      	b.n	800c62e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c5c8:	697b      	ldr	r3, [r7, #20]
 800c5ca:	2b01      	cmp	r3, #1
 800c5cc:	d904      	bls.n	800c5d8 <dir_sdi+0x98>
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	699b      	ldr	r3, [r3, #24]
 800c5d2:	697a      	ldr	r2, [r7, #20]
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	d301      	bcc.n	800c5dc <dir_sdi+0x9c>
 800c5d8:	2302      	movs	r3, #2
 800c5da:	e028      	b.n	800c62e <dir_sdi+0xee>
			ofs -= csz;
 800c5dc:	683a      	ldr	r2, [r7, #0]
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	1ad3      	subs	r3, r2, r3
 800c5e2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c5e4:	683a      	ldr	r2, [r7, #0]
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d2e1      	bcs.n	800c5b0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c5ec:	6979      	ldr	r1, [r7, #20]
 800c5ee:	6938      	ldr	r0, [r7, #16]
 800c5f0:	f7ff fcc4 	bl	800bf7c <clust2sect>
 800c5f4:	4602      	mov	r2, r0
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	697a      	ldr	r2, [r7, #20]
 800c5fe:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	69db      	ldr	r3, [r3, #28]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d101      	bne.n	800c60c <dir_sdi+0xcc>
 800c608:	2302      	movs	r3, #2
 800c60a:	e010      	b.n	800c62e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	69da      	ldr	r2, [r3, #28]
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	0a5b      	lsrs	r3, r3, #9
 800c614:	441a      	add	r2, r3
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c626:	441a      	add	r2, r3
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c62c:	2300      	movs	r3, #0
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3718      	adds	r7, #24
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}

0800c636 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c636:	b580      	push	{r7, lr}
 800c638:	b086      	sub	sp, #24
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	6078      	str	r0, [r7, #4]
 800c63e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	695b      	ldr	r3, [r3, #20]
 800c64a:	3320      	adds	r3, #32
 800c64c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	69db      	ldr	r3, [r3, #28]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d003      	beq.n	800c65e <dir_next+0x28>
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c65c:	d301      	bcc.n	800c662 <dir_next+0x2c>
 800c65e:	2304      	movs	r3, #4
 800c660:	e0aa      	b.n	800c7b8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c668:	2b00      	cmp	r3, #0
 800c66a:	f040 8098 	bne.w	800c79e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	69db      	ldr	r3, [r3, #28]
 800c672:	1c5a      	adds	r2, r3, #1
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	699b      	ldr	r3, [r3, #24]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d10b      	bne.n	800c698 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	095b      	lsrs	r3, r3, #5
 800c684:	68fa      	ldr	r2, [r7, #12]
 800c686:	8912      	ldrh	r2, [r2, #8]
 800c688:	4293      	cmp	r3, r2
 800c68a:	f0c0 8088 	bcc.w	800c79e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2200      	movs	r2, #0
 800c692:	61da      	str	r2, [r3, #28]
 800c694:	2304      	movs	r3, #4
 800c696:	e08f      	b.n	800c7b8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	0a5b      	lsrs	r3, r3, #9
 800c69c:	68fa      	ldr	r2, [r7, #12]
 800c69e:	8952      	ldrh	r2, [r2, #10]
 800c6a0:	3a01      	subs	r2, #1
 800c6a2:	4013      	ands	r3, r2
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d17a      	bne.n	800c79e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c6a8:	687a      	ldr	r2, [r7, #4]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	699b      	ldr	r3, [r3, #24]
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	4610      	mov	r0, r2
 800c6b2:	f7ff fc82 	bl	800bfba <get_fat>
 800c6b6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	2b01      	cmp	r3, #1
 800c6bc:	d801      	bhi.n	800c6c2 <dir_next+0x8c>
 800c6be:	2302      	movs	r3, #2
 800c6c0:	e07a      	b.n	800c7b8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6c8:	d101      	bne.n	800c6ce <dir_next+0x98>
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	e074      	b.n	800c7b8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	699b      	ldr	r3, [r3, #24]
 800c6d2:	697a      	ldr	r2, [r7, #20]
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	d358      	bcc.n	800c78a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d104      	bne.n	800c6e8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	61da      	str	r2, [r3, #28]
 800c6e4:	2304      	movs	r3, #4
 800c6e6:	e067      	b.n	800c7b8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c6e8:	687a      	ldr	r2, [r7, #4]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	699b      	ldr	r3, [r3, #24]
 800c6ee:	4619      	mov	r1, r3
 800c6f0:	4610      	mov	r0, r2
 800c6f2:	f7ff fe59 	bl	800c3a8 <create_chain>
 800c6f6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d101      	bne.n	800c702 <dir_next+0xcc>
 800c6fe:	2307      	movs	r3, #7
 800c700:	e05a      	b.n	800c7b8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	2b01      	cmp	r3, #1
 800c706:	d101      	bne.n	800c70c <dir_next+0xd6>
 800c708:	2302      	movs	r3, #2
 800c70a:	e055      	b.n	800c7b8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c712:	d101      	bne.n	800c718 <dir_next+0xe2>
 800c714:	2301      	movs	r3, #1
 800c716:	e04f      	b.n	800c7b8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c718:	68f8      	ldr	r0, [r7, #12]
 800c71a:	f7ff fb4f 	bl	800bdbc <sync_window>
 800c71e:	4603      	mov	r3, r0
 800c720:	2b00      	cmp	r3, #0
 800c722:	d001      	beq.n	800c728 <dir_next+0xf2>
 800c724:	2301      	movs	r3, #1
 800c726:	e047      	b.n	800c7b8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	3334      	adds	r3, #52	; 0x34
 800c72c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c730:	2100      	movs	r1, #0
 800c732:	4618      	mov	r0, r3
 800c734:	f7ff f979 	bl	800ba2a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c738:	2300      	movs	r3, #0
 800c73a:	613b      	str	r3, [r7, #16]
 800c73c:	6979      	ldr	r1, [r7, #20]
 800c73e:	68f8      	ldr	r0, [r7, #12]
 800c740:	f7ff fc1c 	bl	800bf7c <clust2sect>
 800c744:	4602      	mov	r2, r0
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	631a      	str	r2, [r3, #48]	; 0x30
 800c74a:	e012      	b.n	800c772 <dir_next+0x13c>
						fs->wflag = 1;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	2201      	movs	r2, #1
 800c750:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c752:	68f8      	ldr	r0, [r7, #12]
 800c754:	f7ff fb32 	bl	800bdbc <sync_window>
 800c758:	4603      	mov	r3, r0
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d001      	beq.n	800c762 <dir_next+0x12c>
 800c75e:	2301      	movs	r3, #1
 800c760:	e02a      	b.n	800c7b8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	3301      	adds	r3, #1
 800c766:	613b      	str	r3, [r7, #16]
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c76c:	1c5a      	adds	r2, r3, #1
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	631a      	str	r2, [r3, #48]	; 0x30
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	895b      	ldrh	r3, [r3, #10]
 800c776:	461a      	mov	r2, r3
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	4293      	cmp	r3, r2
 800c77c:	d3e6      	bcc.n	800c74c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	1ad2      	subs	r2, r2, r3
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	697a      	ldr	r2, [r7, #20]
 800c78e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c790:	6979      	ldr	r1, [r7, #20]
 800c792:	68f8      	ldr	r0, [r7, #12]
 800c794:	f7ff fbf2 	bl	800bf7c <clust2sect>
 800c798:	4602      	mov	r2, r0
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	68ba      	ldr	r2, [r7, #8]
 800c7a2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7b0:	441a      	add	r2, r3
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c7b6:	2300      	movs	r3, #0
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3718      	adds	r7, #24
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}

0800c7c0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b086      	sub	sp, #24
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
 800c7c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c7d0:	2100      	movs	r1, #0
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f7ff feb4 	bl	800c540 <dir_sdi>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c7dc:	7dfb      	ldrb	r3, [r7, #23]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d12b      	bne.n	800c83a <dir_alloc+0x7a>
		n = 0;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	69db      	ldr	r3, [r3, #28]
 800c7ea:	4619      	mov	r1, r3
 800c7ec:	68f8      	ldr	r0, [r7, #12]
 800c7ee:	f7ff fb29 	bl	800be44 <move_window>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c7f6:	7dfb      	ldrb	r3, [r7, #23]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d11d      	bne.n	800c838 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	6a1b      	ldr	r3, [r3, #32]
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	2be5      	cmp	r3, #229	; 0xe5
 800c804:	d004      	beq.n	800c810 <dir_alloc+0x50>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6a1b      	ldr	r3, [r3, #32]
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d107      	bne.n	800c820 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	3301      	adds	r3, #1
 800c814:	613b      	str	r3, [r7, #16]
 800c816:	693a      	ldr	r2, [r7, #16]
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	429a      	cmp	r2, r3
 800c81c:	d102      	bne.n	800c824 <dir_alloc+0x64>
 800c81e:	e00c      	b.n	800c83a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c820:	2300      	movs	r3, #0
 800c822:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c824:	2101      	movs	r1, #1
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f7ff ff05 	bl	800c636 <dir_next>
 800c82c:	4603      	mov	r3, r0
 800c82e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c830:	7dfb      	ldrb	r3, [r7, #23]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d0d7      	beq.n	800c7e6 <dir_alloc+0x26>
 800c836:	e000      	b.n	800c83a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c838:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c83a:	7dfb      	ldrb	r3, [r7, #23]
 800c83c:	2b04      	cmp	r3, #4
 800c83e:	d101      	bne.n	800c844 <dir_alloc+0x84>
 800c840:	2307      	movs	r3, #7
 800c842:	75fb      	strb	r3, [r7, #23]
	return res;
 800c844:	7dfb      	ldrb	r3, [r7, #23]
}
 800c846:	4618      	mov	r0, r3
 800c848:	3718      	adds	r7, #24
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}

0800c84e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c84e:	b580      	push	{r7, lr}
 800c850:	b084      	sub	sp, #16
 800c852:	af00      	add	r7, sp, #0
 800c854:	6078      	str	r0, [r7, #4]
 800c856:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	331a      	adds	r3, #26
 800c85c:	4618      	mov	r0, r3
 800c85e:	f7ff f841 	bl	800b8e4 <ld_word>
 800c862:	4603      	mov	r3, r0
 800c864:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	781b      	ldrb	r3, [r3, #0]
 800c86a:	2b03      	cmp	r3, #3
 800c86c:	d109      	bne.n	800c882 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	3314      	adds	r3, #20
 800c872:	4618      	mov	r0, r3
 800c874:	f7ff f836 	bl	800b8e4 <ld_word>
 800c878:	4603      	mov	r3, r0
 800c87a:	041b      	lsls	r3, r3, #16
 800c87c:	68fa      	ldr	r2, [r7, #12]
 800c87e:	4313      	orrs	r3, r2
 800c880:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c882:	68fb      	ldr	r3, [r7, #12]
}
 800c884:	4618      	mov	r0, r3
 800c886:	3710      	adds	r7, #16
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}

0800c88c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b084      	sub	sp, #16
 800c890:	af00      	add	r7, sp, #0
 800c892:	60f8      	str	r0, [r7, #12]
 800c894:	60b9      	str	r1, [r7, #8]
 800c896:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	331a      	adds	r3, #26
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	b292      	uxth	r2, r2
 800c8a0:	4611      	mov	r1, r2
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f7ff f859 	bl	800b95a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	781b      	ldrb	r3, [r3, #0]
 800c8ac:	2b03      	cmp	r3, #3
 800c8ae:	d109      	bne.n	800c8c4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	f103 0214 	add.w	r2, r3, #20
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	0c1b      	lsrs	r3, r3, #16
 800c8ba:	b29b      	uxth	r3, r3
 800c8bc:	4619      	mov	r1, r3
 800c8be:	4610      	mov	r0, r2
 800c8c0:	f7ff f84b 	bl	800b95a <st_word>
	}
}
 800c8c4:	bf00      	nop
 800c8c6:	3710      	adds	r7, #16
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c8cc:	b590      	push	{r4, r7, lr}
 800c8ce:	b087      	sub	sp, #28
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	331a      	adds	r3, #26
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f7ff f802 	bl	800b8e4 <ld_word>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d001      	beq.n	800c8ea <cmp_lfn+0x1e>
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	e059      	b.n	800c99e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	781b      	ldrb	r3, [r3, #0]
 800c8ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8f2:	1e5a      	subs	r2, r3, #1
 800c8f4:	4613      	mov	r3, r2
 800c8f6:	005b      	lsls	r3, r3, #1
 800c8f8:	4413      	add	r3, r2
 800c8fa:	009b      	lsls	r3, r3, #2
 800c8fc:	4413      	add	r3, r2
 800c8fe:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c900:	2301      	movs	r3, #1
 800c902:	81fb      	strh	r3, [r7, #14]
 800c904:	2300      	movs	r3, #0
 800c906:	613b      	str	r3, [r7, #16]
 800c908:	e033      	b.n	800c972 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c90a:	4a27      	ldr	r2, [pc, #156]	; (800c9a8 <cmp_lfn+0xdc>)
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	4413      	add	r3, r2
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	461a      	mov	r2, r3
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	4413      	add	r3, r2
 800c918:	4618      	mov	r0, r3
 800c91a:	f7fe ffe3 	bl	800b8e4 <ld_word>
 800c91e:	4603      	mov	r3, r0
 800c920:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c922:	89fb      	ldrh	r3, [r7, #14]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d01a      	beq.n	800c95e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	2bfe      	cmp	r3, #254	; 0xfe
 800c92c:	d812      	bhi.n	800c954 <cmp_lfn+0x88>
 800c92e:	89bb      	ldrh	r3, [r7, #12]
 800c930:	4618      	mov	r0, r3
 800c932:	f002 f99f 	bl	800ec74 <ff_wtoupper>
 800c936:	4603      	mov	r3, r0
 800c938:	461c      	mov	r4, r3
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	1c5a      	adds	r2, r3, #1
 800c93e:	617a      	str	r2, [r7, #20]
 800c940:	005b      	lsls	r3, r3, #1
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	4413      	add	r3, r2
 800c946:	881b      	ldrh	r3, [r3, #0]
 800c948:	4618      	mov	r0, r3
 800c94a:	f002 f993 	bl	800ec74 <ff_wtoupper>
 800c94e:	4603      	mov	r3, r0
 800c950:	429c      	cmp	r4, r3
 800c952:	d001      	beq.n	800c958 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c954:	2300      	movs	r3, #0
 800c956:	e022      	b.n	800c99e <cmp_lfn+0xd2>
			}
			wc = uc;
 800c958:	89bb      	ldrh	r3, [r7, #12]
 800c95a:	81fb      	strh	r3, [r7, #14]
 800c95c:	e006      	b.n	800c96c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c95e:	89bb      	ldrh	r3, [r7, #12]
 800c960:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c964:	4293      	cmp	r3, r2
 800c966:	d001      	beq.n	800c96c <cmp_lfn+0xa0>
 800c968:	2300      	movs	r3, #0
 800c96a:	e018      	b.n	800c99e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	3301      	adds	r3, #1
 800c970:	613b      	str	r3, [r7, #16]
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	2b0c      	cmp	r3, #12
 800c976:	d9c8      	bls.n	800c90a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	781b      	ldrb	r3, [r3, #0]
 800c97c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c980:	2b00      	cmp	r3, #0
 800c982:	d00b      	beq.n	800c99c <cmp_lfn+0xd0>
 800c984:	89fb      	ldrh	r3, [r7, #14]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d008      	beq.n	800c99c <cmp_lfn+0xd0>
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	005b      	lsls	r3, r3, #1
 800c98e:	687a      	ldr	r2, [r7, #4]
 800c990:	4413      	add	r3, r2
 800c992:	881b      	ldrh	r3, [r3, #0]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d001      	beq.n	800c99c <cmp_lfn+0xd0>
 800c998:	2300      	movs	r3, #0
 800c99a:	e000      	b.n	800c99e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c99c:	2301      	movs	r3, #1
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	371c      	adds	r7, #28
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd90      	pop	{r4, r7, pc}
 800c9a6:	bf00      	nop
 800c9a8:	0800f880 	.word	0x0800f880

0800c9ac <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b086      	sub	sp, #24
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
 800c9b4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	331a      	adds	r3, #26
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f7fe ff92 	bl	800b8e4 <ld_word>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d001      	beq.n	800c9ca <pick_lfn+0x1e>
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	e04d      	b.n	800ca66 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	781b      	ldrb	r3, [r3, #0]
 800c9ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9d2:	1e5a      	subs	r2, r3, #1
 800c9d4:	4613      	mov	r3, r2
 800c9d6:	005b      	lsls	r3, r3, #1
 800c9d8:	4413      	add	r3, r2
 800c9da:	009b      	lsls	r3, r3, #2
 800c9dc:	4413      	add	r3, r2
 800c9de:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	81fb      	strh	r3, [r7, #14]
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	613b      	str	r3, [r7, #16]
 800c9e8:	e028      	b.n	800ca3c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c9ea:	4a21      	ldr	r2, [pc, #132]	; (800ca70 <pick_lfn+0xc4>)
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	4413      	add	r3, r2
 800c9f0:	781b      	ldrb	r3, [r3, #0]
 800c9f2:	461a      	mov	r2, r3
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	4413      	add	r3, r2
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f7fe ff73 	bl	800b8e4 <ld_word>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ca02:	89fb      	ldrh	r3, [r7, #14]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d00f      	beq.n	800ca28 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	2bfe      	cmp	r3, #254	; 0xfe
 800ca0c:	d901      	bls.n	800ca12 <pick_lfn+0x66>
 800ca0e:	2300      	movs	r3, #0
 800ca10:	e029      	b.n	800ca66 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800ca12:	89bb      	ldrh	r3, [r7, #12]
 800ca14:	81fb      	strh	r3, [r7, #14]
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	1c5a      	adds	r2, r3, #1
 800ca1a:	617a      	str	r2, [r7, #20]
 800ca1c:	005b      	lsls	r3, r3, #1
 800ca1e:	687a      	ldr	r2, [r7, #4]
 800ca20:	4413      	add	r3, r2
 800ca22:	89fa      	ldrh	r2, [r7, #14]
 800ca24:	801a      	strh	r2, [r3, #0]
 800ca26:	e006      	b.n	800ca36 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ca28:	89bb      	ldrh	r3, [r7, #12]
 800ca2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d001      	beq.n	800ca36 <pick_lfn+0x8a>
 800ca32:	2300      	movs	r3, #0
 800ca34:	e017      	b.n	800ca66 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	3301      	adds	r3, #1
 800ca3a:	613b      	str	r3, [r7, #16]
 800ca3c:	693b      	ldr	r3, [r7, #16]
 800ca3e:	2b0c      	cmp	r3, #12
 800ca40:	d9d3      	bls.n	800c9ea <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	781b      	ldrb	r3, [r3, #0]
 800ca46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d00a      	beq.n	800ca64 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	2bfe      	cmp	r3, #254	; 0xfe
 800ca52:	d901      	bls.n	800ca58 <pick_lfn+0xac>
 800ca54:	2300      	movs	r3, #0
 800ca56:	e006      	b.n	800ca66 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	005b      	lsls	r3, r3, #1
 800ca5c:	687a      	ldr	r2, [r7, #4]
 800ca5e:	4413      	add	r3, r2
 800ca60:	2200      	movs	r2, #0
 800ca62:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800ca64:	2301      	movs	r3, #1
}
 800ca66:	4618      	mov	r0, r3
 800ca68:	3718      	adds	r7, #24
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}
 800ca6e:	bf00      	nop
 800ca70:	0800f880 	.word	0x0800f880

0800ca74 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b088      	sub	sp, #32
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	60f8      	str	r0, [r7, #12]
 800ca7c:	60b9      	str	r1, [r7, #8]
 800ca7e:	4611      	mov	r1, r2
 800ca80:	461a      	mov	r2, r3
 800ca82:	460b      	mov	r3, r1
 800ca84:	71fb      	strb	r3, [r7, #7]
 800ca86:	4613      	mov	r3, r2
 800ca88:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	330d      	adds	r3, #13
 800ca8e:	79ba      	ldrb	r2, [r7, #6]
 800ca90:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	330b      	adds	r3, #11
 800ca96:	220f      	movs	r2, #15
 800ca98:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	330c      	adds	r3, #12
 800ca9e:	2200      	movs	r2, #0
 800caa0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	331a      	adds	r3, #26
 800caa6:	2100      	movs	r1, #0
 800caa8:	4618      	mov	r0, r3
 800caaa:	f7fe ff56 	bl	800b95a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800caae:	79fb      	ldrb	r3, [r7, #7]
 800cab0:	1e5a      	subs	r2, r3, #1
 800cab2:	4613      	mov	r3, r2
 800cab4:	005b      	lsls	r3, r3, #1
 800cab6:	4413      	add	r3, r2
 800cab8:	009b      	lsls	r3, r3, #2
 800caba:	4413      	add	r3, r2
 800cabc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800cabe:	2300      	movs	r3, #0
 800cac0:	82fb      	strh	r3, [r7, #22]
 800cac2:	2300      	movs	r3, #0
 800cac4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800cac6:	8afb      	ldrh	r3, [r7, #22]
 800cac8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cacc:	4293      	cmp	r3, r2
 800cace:	d007      	beq.n	800cae0 <put_lfn+0x6c>
 800cad0:	69fb      	ldr	r3, [r7, #28]
 800cad2:	1c5a      	adds	r2, r3, #1
 800cad4:	61fa      	str	r2, [r7, #28]
 800cad6:	005b      	lsls	r3, r3, #1
 800cad8:	68fa      	ldr	r2, [r7, #12]
 800cada:	4413      	add	r3, r2
 800cadc:	881b      	ldrh	r3, [r3, #0]
 800cade:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800cae0:	4a17      	ldr	r2, [pc, #92]	; (800cb40 <put_lfn+0xcc>)
 800cae2:	69bb      	ldr	r3, [r7, #24]
 800cae4:	4413      	add	r3, r2
 800cae6:	781b      	ldrb	r3, [r3, #0]
 800cae8:	461a      	mov	r2, r3
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	4413      	add	r3, r2
 800caee:	8afa      	ldrh	r2, [r7, #22]
 800caf0:	4611      	mov	r1, r2
 800caf2:	4618      	mov	r0, r3
 800caf4:	f7fe ff31 	bl	800b95a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800caf8:	8afb      	ldrh	r3, [r7, #22]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d102      	bne.n	800cb04 <put_lfn+0x90>
 800cafe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cb02:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800cb04:	69bb      	ldr	r3, [r7, #24]
 800cb06:	3301      	adds	r3, #1
 800cb08:	61bb      	str	r3, [r7, #24]
 800cb0a:	69bb      	ldr	r3, [r7, #24]
 800cb0c:	2b0c      	cmp	r3, #12
 800cb0e:	d9da      	bls.n	800cac6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800cb10:	8afb      	ldrh	r3, [r7, #22]
 800cb12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d006      	beq.n	800cb28 <put_lfn+0xb4>
 800cb1a:	69fb      	ldr	r3, [r7, #28]
 800cb1c:	005b      	lsls	r3, r3, #1
 800cb1e:	68fa      	ldr	r2, [r7, #12]
 800cb20:	4413      	add	r3, r2
 800cb22:	881b      	ldrh	r3, [r3, #0]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d103      	bne.n	800cb30 <put_lfn+0xbc>
 800cb28:	79fb      	ldrb	r3, [r7, #7]
 800cb2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb2e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	79fa      	ldrb	r2, [r7, #7]
 800cb34:	701a      	strb	r2, [r3, #0]
}
 800cb36:	bf00      	nop
 800cb38:	3720      	adds	r7, #32
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}
 800cb3e:	bf00      	nop
 800cb40:	0800f880 	.word	0x0800f880

0800cb44 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b08c      	sub	sp, #48	; 0x30
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	60f8      	str	r0, [r7, #12]
 800cb4c:	60b9      	str	r1, [r7, #8]
 800cb4e:	607a      	str	r2, [r7, #4]
 800cb50:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800cb52:	220b      	movs	r2, #11
 800cb54:	68b9      	ldr	r1, [r7, #8]
 800cb56:	68f8      	ldr	r0, [r7, #12]
 800cb58:	f7fe ff46 	bl	800b9e8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	2b05      	cmp	r3, #5
 800cb60:	d92b      	bls.n	800cbba <gen_numname+0x76>
		sr = seq;
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800cb66:	e022      	b.n	800cbae <gen_numname+0x6a>
			wc = *lfn++;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	1c9a      	adds	r2, r3, #2
 800cb6c:	607a      	str	r2, [r7, #4]
 800cb6e:	881b      	ldrh	r3, [r3, #0]
 800cb70:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800cb72:	2300      	movs	r3, #0
 800cb74:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb76:	e017      	b.n	800cba8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800cb78:	69fb      	ldr	r3, [r7, #28]
 800cb7a:	005a      	lsls	r2, r3, #1
 800cb7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb7e:	f003 0301 	and.w	r3, r3, #1
 800cb82:	4413      	add	r3, r2
 800cb84:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800cb86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb88:	085b      	lsrs	r3, r3, #1
 800cb8a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800cb8c:	69fb      	ldr	r3, [r7, #28]
 800cb8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d005      	beq.n	800cba2 <gen_numname+0x5e>
 800cb96:	69fb      	ldr	r3, [r7, #28]
 800cb98:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800cb9c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800cba0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800cba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cba4:	3301      	adds	r3, #1
 800cba6:	62bb      	str	r3, [r7, #40]	; 0x28
 800cba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbaa:	2b0f      	cmp	r3, #15
 800cbac:	d9e4      	bls.n	800cb78 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	881b      	ldrh	r3, [r3, #0]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d1d8      	bne.n	800cb68 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800cbb6:	69fb      	ldr	r3, [r7, #28]
 800cbb8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800cbba:	2307      	movs	r3, #7
 800cbbc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	b2db      	uxtb	r3, r3
 800cbc2:	f003 030f 	and.w	r3, r3, #15
 800cbc6:	b2db      	uxtb	r3, r3
 800cbc8:	3330      	adds	r3, #48	; 0x30
 800cbca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800cbce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cbd2:	2b39      	cmp	r3, #57	; 0x39
 800cbd4:	d904      	bls.n	800cbe0 <gen_numname+0x9c>
 800cbd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cbda:	3307      	adds	r3, #7
 800cbdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800cbe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbe2:	1e5a      	subs	r2, r3, #1
 800cbe4:	62ba      	str	r2, [r7, #40]	; 0x28
 800cbe6:	3330      	adds	r3, #48	; 0x30
 800cbe8:	443b      	add	r3, r7
 800cbea:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cbee:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	091b      	lsrs	r3, r3, #4
 800cbf6:	603b      	str	r3, [r7, #0]
	} while (seq);
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d1df      	bne.n	800cbbe <gen_numname+0x7a>
	ns[i] = '~';
 800cbfe:	f107 0214 	add.w	r2, r7, #20
 800cc02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc04:	4413      	add	r3, r2
 800cc06:	227e      	movs	r2, #126	; 0x7e
 800cc08:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	627b      	str	r3, [r7, #36]	; 0x24
 800cc0e:	e002      	b.n	800cc16 <gen_numname+0xd2>
 800cc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc12:	3301      	adds	r3, #1
 800cc14:	627b      	str	r3, [r7, #36]	; 0x24
 800cc16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d205      	bcs.n	800cc2a <gen_numname+0xe6>
 800cc1e:	68fa      	ldr	r2, [r7, #12]
 800cc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc22:	4413      	add	r3, r2
 800cc24:	781b      	ldrb	r3, [r3, #0]
 800cc26:	2b20      	cmp	r3, #32
 800cc28:	d1f2      	bne.n	800cc10 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800cc2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc2c:	2b07      	cmp	r3, #7
 800cc2e:	d807      	bhi.n	800cc40 <gen_numname+0xfc>
 800cc30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc32:	1c5a      	adds	r2, r3, #1
 800cc34:	62ba      	str	r2, [r7, #40]	; 0x28
 800cc36:	3330      	adds	r3, #48	; 0x30
 800cc38:	443b      	add	r3, r7
 800cc3a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800cc3e:	e000      	b.n	800cc42 <gen_numname+0xfe>
 800cc40:	2120      	movs	r1, #32
 800cc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc44:	1c5a      	adds	r2, r3, #1
 800cc46:	627a      	str	r2, [r7, #36]	; 0x24
 800cc48:	68fa      	ldr	r2, [r7, #12]
 800cc4a:	4413      	add	r3, r2
 800cc4c:	460a      	mov	r2, r1
 800cc4e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800cc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc52:	2b07      	cmp	r3, #7
 800cc54:	d9e9      	bls.n	800cc2a <gen_numname+0xe6>
}
 800cc56:	bf00      	nop
 800cc58:	bf00      	nop
 800cc5a:	3730      	adds	r7, #48	; 0x30
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}

0800cc60 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800cc60:	b480      	push	{r7}
 800cc62:	b085      	sub	sp, #20
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800cc6c:	230b      	movs	r3, #11
 800cc6e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800cc70:	7bfb      	ldrb	r3, [r7, #15]
 800cc72:	b2da      	uxtb	r2, r3
 800cc74:	0852      	lsrs	r2, r2, #1
 800cc76:	01db      	lsls	r3, r3, #7
 800cc78:	4313      	orrs	r3, r2
 800cc7a:	b2da      	uxtb	r2, r3
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	1c59      	adds	r1, r3, #1
 800cc80:	6079      	str	r1, [r7, #4]
 800cc82:	781b      	ldrb	r3, [r3, #0]
 800cc84:	4413      	add	r3, r2
 800cc86:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	3b01      	subs	r3, #1
 800cc8c:	60bb      	str	r3, [r7, #8]
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d1ed      	bne.n	800cc70 <sum_sfn+0x10>
	return sum;
 800cc94:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3714      	adds	r7, #20
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca0:	4770      	bx	lr

0800cca2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800cca2:	b580      	push	{r7, lr}
 800cca4:	b086      	sub	sp, #24
 800cca6:	af00      	add	r7, sp, #0
 800cca8:	6078      	str	r0, [r7, #4]
 800ccaa:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800ccac:	2304      	movs	r3, #4
 800ccae:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800ccb6:	23ff      	movs	r3, #255	; 0xff
 800ccb8:	757b      	strb	r3, [r7, #21]
 800ccba:	23ff      	movs	r3, #255	; 0xff
 800ccbc:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800ccbe:	e081      	b.n	800cdc4 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	69db      	ldr	r3, [r3, #28]
 800ccc4:	4619      	mov	r1, r3
 800ccc6:	6938      	ldr	r0, [r7, #16]
 800ccc8:	f7ff f8bc 	bl	800be44 <move_window>
 800cccc:	4603      	mov	r3, r0
 800ccce:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ccd0:	7dfb      	ldrb	r3, [r7, #23]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d17c      	bne.n	800cdd0 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6a1b      	ldr	r3, [r3, #32]
 800ccda:	781b      	ldrb	r3, [r3, #0]
 800ccdc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800ccde:	7dbb      	ldrb	r3, [r7, #22]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d102      	bne.n	800ccea <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800cce4:	2304      	movs	r3, #4
 800cce6:	75fb      	strb	r3, [r7, #23]
 800cce8:	e077      	b.n	800cdda <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6a1b      	ldr	r3, [r3, #32]
 800ccee:	330b      	adds	r3, #11
 800ccf0:	781b      	ldrb	r3, [r3, #0]
 800ccf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ccf6:	73fb      	strb	r3, [r7, #15]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	7bfa      	ldrb	r2, [r7, #15]
 800ccfc:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800ccfe:	7dbb      	ldrb	r3, [r7, #22]
 800cd00:	2be5      	cmp	r3, #229	; 0xe5
 800cd02:	d00e      	beq.n	800cd22 <dir_read+0x80>
 800cd04:	7dbb      	ldrb	r3, [r7, #22]
 800cd06:	2b2e      	cmp	r3, #46	; 0x2e
 800cd08:	d00b      	beq.n	800cd22 <dir_read+0x80>
 800cd0a:	7bfb      	ldrb	r3, [r7, #15]
 800cd0c:	f023 0320 	bic.w	r3, r3, #32
 800cd10:	2b08      	cmp	r3, #8
 800cd12:	bf0c      	ite	eq
 800cd14:	2301      	moveq	r3, #1
 800cd16:	2300      	movne	r3, #0
 800cd18:	b2db      	uxtb	r3, r3
 800cd1a:	461a      	mov	r2, r3
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d002      	beq.n	800cd28 <dir_read+0x86>
				ord = 0xFF;
 800cd22:	23ff      	movs	r3, #255	; 0xff
 800cd24:	757b      	strb	r3, [r7, #21]
 800cd26:	e044      	b.n	800cdb2 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800cd28:	7bfb      	ldrb	r3, [r7, #15]
 800cd2a:	2b0f      	cmp	r3, #15
 800cd2c:	d12f      	bne.n	800cd8e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800cd2e:	7dbb      	ldrb	r3, [r7, #22]
 800cd30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d00d      	beq.n	800cd54 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6a1b      	ldr	r3, [r3, #32]
 800cd3c:	7b5b      	ldrb	r3, [r3, #13]
 800cd3e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800cd40:	7dbb      	ldrb	r3, [r7, #22]
 800cd42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd46:	75bb      	strb	r3, [r7, #22]
 800cd48:	7dbb      	ldrb	r3, [r7, #22]
 800cd4a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	695a      	ldr	r2, [r3, #20]
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cd54:	7dba      	ldrb	r2, [r7, #22]
 800cd56:	7d7b      	ldrb	r3, [r7, #21]
 800cd58:	429a      	cmp	r2, r3
 800cd5a:	d115      	bne.n	800cd88 <dir_read+0xe6>
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	6a1b      	ldr	r3, [r3, #32]
 800cd60:	330d      	adds	r3, #13
 800cd62:	781b      	ldrb	r3, [r3, #0]
 800cd64:	7d3a      	ldrb	r2, [r7, #20]
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d10e      	bne.n	800cd88 <dir_read+0xe6>
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	68da      	ldr	r2, [r3, #12]
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6a1b      	ldr	r3, [r3, #32]
 800cd72:	4619      	mov	r1, r3
 800cd74:	4610      	mov	r0, r2
 800cd76:	f7ff fe19 	bl	800c9ac <pick_lfn>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d003      	beq.n	800cd88 <dir_read+0xe6>
 800cd80:	7d7b      	ldrb	r3, [r7, #21]
 800cd82:	3b01      	subs	r3, #1
 800cd84:	b2db      	uxtb	r3, r3
 800cd86:	e000      	b.n	800cd8a <dir_read+0xe8>
 800cd88:	23ff      	movs	r3, #255	; 0xff
 800cd8a:	757b      	strb	r3, [r7, #21]
 800cd8c:	e011      	b.n	800cdb2 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800cd8e:	7d7b      	ldrb	r3, [r7, #21]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d109      	bne.n	800cda8 <dir_read+0x106>
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6a1b      	ldr	r3, [r3, #32]
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f7ff ff61 	bl	800cc60 <sum_sfn>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	461a      	mov	r2, r3
 800cda2:	7d3b      	ldrb	r3, [r7, #20]
 800cda4:	4293      	cmp	r3, r2
 800cda6:	d015      	beq.n	800cdd4 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f04f 32ff 	mov.w	r2, #4294967295
 800cdae:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800cdb0:	e010      	b.n	800cdd4 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800cdb2:	2100      	movs	r1, #0
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f7ff fc3e 	bl	800c636 <dir_next>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cdbe:	7dfb      	ldrb	r3, [r7, #23]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d109      	bne.n	800cdd8 <dir_read+0x136>
	while (dp->sect) {
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	69db      	ldr	r3, [r3, #28]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	f47f af79 	bne.w	800ccc0 <dir_read+0x1e>
 800cdce:	e004      	b.n	800cdda <dir_read+0x138>
		if (res != FR_OK) break;
 800cdd0:	bf00      	nop
 800cdd2:	e002      	b.n	800cdda <dir_read+0x138>
					break;
 800cdd4:	bf00      	nop
 800cdd6:	e000      	b.n	800cdda <dir_read+0x138>
		if (res != FR_OK) break;
 800cdd8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800cdda:	7dfb      	ldrb	r3, [r7, #23]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d002      	beq.n	800cde6 <dir_read+0x144>
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2200      	movs	r2, #0
 800cde4:	61da      	str	r2, [r3, #28]
	return res;
 800cde6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3718      	adds	r7, #24
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}

0800cdf0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b086      	sub	sp, #24
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cdfe:	2100      	movs	r1, #0
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f7ff fb9d 	bl	800c540 <dir_sdi>
 800ce06:	4603      	mov	r3, r0
 800ce08:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ce0a:	7dfb      	ldrb	r3, [r7, #23]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d001      	beq.n	800ce14 <dir_find+0x24>
 800ce10:	7dfb      	ldrb	r3, [r7, #23]
 800ce12:	e0a9      	b.n	800cf68 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ce14:	23ff      	movs	r3, #255	; 0xff
 800ce16:	753b      	strb	r3, [r7, #20]
 800ce18:	7d3b      	ldrb	r3, [r7, #20]
 800ce1a:	757b      	strb	r3, [r7, #21]
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ce22:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	69db      	ldr	r3, [r3, #28]
 800ce28:	4619      	mov	r1, r3
 800ce2a:	6938      	ldr	r0, [r7, #16]
 800ce2c:	f7ff f80a 	bl	800be44 <move_window>
 800ce30:	4603      	mov	r3, r0
 800ce32:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ce34:	7dfb      	ldrb	r3, [r7, #23]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	f040 8090 	bne.w	800cf5c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6a1b      	ldr	r3, [r3, #32]
 800ce40:	781b      	ldrb	r3, [r3, #0]
 800ce42:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ce44:	7dbb      	ldrb	r3, [r7, #22]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d102      	bne.n	800ce50 <dir_find+0x60>
 800ce4a:	2304      	movs	r3, #4
 800ce4c:	75fb      	strb	r3, [r7, #23]
 800ce4e:	e08a      	b.n	800cf66 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6a1b      	ldr	r3, [r3, #32]
 800ce54:	330b      	adds	r3, #11
 800ce56:	781b      	ldrb	r3, [r3, #0]
 800ce58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce5c:	73fb      	strb	r3, [r7, #15]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	7bfa      	ldrb	r2, [r7, #15]
 800ce62:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ce64:	7dbb      	ldrb	r3, [r7, #22]
 800ce66:	2be5      	cmp	r3, #229	; 0xe5
 800ce68:	d007      	beq.n	800ce7a <dir_find+0x8a>
 800ce6a:	7bfb      	ldrb	r3, [r7, #15]
 800ce6c:	f003 0308 	and.w	r3, r3, #8
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d009      	beq.n	800ce88 <dir_find+0x98>
 800ce74:	7bfb      	ldrb	r3, [r7, #15]
 800ce76:	2b0f      	cmp	r3, #15
 800ce78:	d006      	beq.n	800ce88 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ce7a:	23ff      	movs	r3, #255	; 0xff
 800ce7c:	757b      	strb	r3, [r7, #21]
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f04f 32ff 	mov.w	r2, #4294967295
 800ce84:	631a      	str	r2, [r3, #48]	; 0x30
 800ce86:	e05e      	b.n	800cf46 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ce88:	7bfb      	ldrb	r3, [r7, #15]
 800ce8a:	2b0f      	cmp	r3, #15
 800ce8c:	d136      	bne.n	800cefc <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ce94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d154      	bne.n	800cf46 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ce9c:	7dbb      	ldrb	r3, [r7, #22]
 800ce9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d00d      	beq.n	800cec2 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6a1b      	ldr	r3, [r3, #32]
 800ceaa:	7b5b      	ldrb	r3, [r3, #13]
 800ceac:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800ceae:	7dbb      	ldrb	r3, [r7, #22]
 800ceb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ceb4:	75bb      	strb	r3, [r7, #22]
 800ceb6:	7dbb      	ldrb	r3, [r7, #22]
 800ceb8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	695a      	ldr	r2, [r3, #20]
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cec2:	7dba      	ldrb	r2, [r7, #22]
 800cec4:	7d7b      	ldrb	r3, [r7, #21]
 800cec6:	429a      	cmp	r2, r3
 800cec8:	d115      	bne.n	800cef6 <dir_find+0x106>
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6a1b      	ldr	r3, [r3, #32]
 800cece:	330d      	adds	r3, #13
 800ced0:	781b      	ldrb	r3, [r3, #0]
 800ced2:	7d3a      	ldrb	r2, [r7, #20]
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d10e      	bne.n	800cef6 <dir_find+0x106>
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	68da      	ldr	r2, [r3, #12]
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	6a1b      	ldr	r3, [r3, #32]
 800cee0:	4619      	mov	r1, r3
 800cee2:	4610      	mov	r0, r2
 800cee4:	f7ff fcf2 	bl	800c8cc <cmp_lfn>
 800cee8:	4603      	mov	r3, r0
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d003      	beq.n	800cef6 <dir_find+0x106>
 800ceee:	7d7b      	ldrb	r3, [r7, #21]
 800cef0:	3b01      	subs	r3, #1
 800cef2:	b2db      	uxtb	r3, r3
 800cef4:	e000      	b.n	800cef8 <dir_find+0x108>
 800cef6:	23ff      	movs	r3, #255	; 0xff
 800cef8:	757b      	strb	r3, [r7, #21]
 800cefa:	e024      	b.n	800cf46 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cefc:	7d7b      	ldrb	r3, [r7, #21]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d109      	bne.n	800cf16 <dir_find+0x126>
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6a1b      	ldr	r3, [r3, #32]
 800cf06:	4618      	mov	r0, r3
 800cf08:	f7ff feaa 	bl	800cc60 <sum_sfn>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	461a      	mov	r2, r3
 800cf10:	7d3b      	ldrb	r3, [r7, #20]
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d024      	beq.n	800cf60 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cf1c:	f003 0301 	and.w	r3, r3, #1
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d10a      	bne.n	800cf3a <dir_find+0x14a>
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6a18      	ldr	r0, [r3, #32]
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	3324      	adds	r3, #36	; 0x24
 800cf2c:	220b      	movs	r2, #11
 800cf2e:	4619      	mov	r1, r3
 800cf30:	f7fe fd96 	bl	800ba60 <mem_cmp>
 800cf34:	4603      	mov	r3, r0
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d014      	beq.n	800cf64 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cf3a:	23ff      	movs	r3, #255	; 0xff
 800cf3c:	757b      	strb	r3, [r7, #21]
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f04f 32ff 	mov.w	r2, #4294967295
 800cf44:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cf46:	2100      	movs	r1, #0
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f7ff fb74 	bl	800c636 <dir_next>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cf52:	7dfb      	ldrb	r3, [r7, #23]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	f43f af65 	beq.w	800ce24 <dir_find+0x34>
 800cf5a:	e004      	b.n	800cf66 <dir_find+0x176>
		if (res != FR_OK) break;
 800cf5c:	bf00      	nop
 800cf5e:	e002      	b.n	800cf66 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cf60:	bf00      	nop
 800cf62:	e000      	b.n	800cf66 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cf64:	bf00      	nop

	return res;
 800cf66:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3718      	adds	r7, #24
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}

0800cf70 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b08c      	sub	sp, #48	; 0x30
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cf84:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d001      	beq.n	800cf90 <dir_register+0x20>
 800cf8c:	2306      	movs	r3, #6
 800cf8e:	e0e0      	b.n	800d152 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800cf90:	2300      	movs	r3, #0
 800cf92:	627b      	str	r3, [r7, #36]	; 0x24
 800cf94:	e002      	b.n	800cf9c <dir_register+0x2c>
 800cf96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf98:	3301      	adds	r3, #1
 800cf9a:	627b      	str	r3, [r7, #36]	; 0x24
 800cf9c:	69fb      	ldr	r3, [r7, #28]
 800cf9e:	68da      	ldr	r2, [r3, #12]
 800cfa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa2:	005b      	lsls	r3, r3, #1
 800cfa4:	4413      	add	r3, r2
 800cfa6:	881b      	ldrh	r3, [r3, #0]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d1f4      	bne.n	800cf96 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800cfb2:	f107 030c 	add.w	r3, r7, #12
 800cfb6:	220c      	movs	r2, #12
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f7fe fd15 	bl	800b9e8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800cfbe:	7dfb      	ldrb	r3, [r7, #23]
 800cfc0:	f003 0301 	and.w	r3, r3, #1
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d032      	beq.n	800d02e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2240      	movs	r2, #64	; 0x40
 800cfcc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	62bb      	str	r3, [r7, #40]	; 0x28
 800cfd4:	e016      	b.n	800d004 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800cfdc:	69fb      	ldr	r3, [r7, #28]
 800cfde:	68da      	ldr	r2, [r3, #12]
 800cfe0:	f107 010c 	add.w	r1, r7, #12
 800cfe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfe6:	f7ff fdad 	bl	800cb44 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f7ff ff00 	bl	800cdf0 <dir_find>
 800cff0:	4603      	mov	r3, r0
 800cff2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800cff6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d106      	bne.n	800d00c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800cffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d000:	3301      	adds	r3, #1
 800d002:	62bb      	str	r3, [r7, #40]	; 0x28
 800d004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d006:	2b63      	cmp	r3, #99	; 0x63
 800d008:	d9e5      	bls.n	800cfd6 <dir_register+0x66>
 800d00a:	e000      	b.n	800d00e <dir_register+0x9e>
			if (res != FR_OK) break;
 800d00c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d010:	2b64      	cmp	r3, #100	; 0x64
 800d012:	d101      	bne.n	800d018 <dir_register+0xa8>
 800d014:	2307      	movs	r3, #7
 800d016:	e09c      	b.n	800d152 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d018:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d01c:	2b04      	cmp	r3, #4
 800d01e:	d002      	beq.n	800d026 <dir_register+0xb6>
 800d020:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d024:	e095      	b.n	800d152 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d026:	7dfa      	ldrb	r2, [r7, #23]
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d02e:	7dfb      	ldrb	r3, [r7, #23]
 800d030:	f003 0302 	and.w	r3, r3, #2
 800d034:	2b00      	cmp	r3, #0
 800d036:	d007      	beq.n	800d048 <dir_register+0xd8>
 800d038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d03a:	330c      	adds	r3, #12
 800d03c:	4a47      	ldr	r2, [pc, #284]	; (800d15c <dir_register+0x1ec>)
 800d03e:	fba2 2303 	umull	r2, r3, r2, r3
 800d042:	089b      	lsrs	r3, r3, #2
 800d044:	3301      	adds	r3, #1
 800d046:	e000      	b.n	800d04a <dir_register+0xda>
 800d048:	2301      	movs	r3, #1
 800d04a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d04c:	6a39      	ldr	r1, [r7, #32]
 800d04e:	6878      	ldr	r0, [r7, #4]
 800d050:	f7ff fbb6 	bl	800c7c0 <dir_alloc>
 800d054:	4603      	mov	r3, r0
 800d056:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d05a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d148      	bne.n	800d0f4 <dir_register+0x184>
 800d062:	6a3b      	ldr	r3, [r7, #32]
 800d064:	3b01      	subs	r3, #1
 800d066:	623b      	str	r3, [r7, #32]
 800d068:	6a3b      	ldr	r3, [r7, #32]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d042      	beq.n	800d0f4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	695a      	ldr	r2, [r3, #20]
 800d072:	6a3b      	ldr	r3, [r7, #32]
 800d074:	015b      	lsls	r3, r3, #5
 800d076:	1ad3      	subs	r3, r2, r3
 800d078:	4619      	mov	r1, r3
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f7ff fa60 	bl	800c540 <dir_sdi>
 800d080:	4603      	mov	r3, r0
 800d082:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d086:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d132      	bne.n	800d0f4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	3324      	adds	r3, #36	; 0x24
 800d092:	4618      	mov	r0, r3
 800d094:	f7ff fde4 	bl	800cc60 <sum_sfn>
 800d098:	4603      	mov	r3, r0
 800d09a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	69db      	ldr	r3, [r3, #28]
 800d0a0:	4619      	mov	r1, r3
 800d0a2:	69f8      	ldr	r0, [r7, #28]
 800d0a4:	f7fe fece 	bl	800be44 <move_window>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800d0ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d11d      	bne.n	800d0f2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d0b6:	69fb      	ldr	r3, [r7, #28]
 800d0b8:	68d8      	ldr	r0, [r3, #12]
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6a19      	ldr	r1, [r3, #32]
 800d0be:	6a3b      	ldr	r3, [r7, #32]
 800d0c0:	b2da      	uxtb	r2, r3
 800d0c2:	7efb      	ldrb	r3, [r7, #27]
 800d0c4:	f7ff fcd6 	bl	800ca74 <put_lfn>
				fs->wflag = 1;
 800d0c8:	69fb      	ldr	r3, [r7, #28]
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d0ce:	2100      	movs	r1, #0
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f7ff fab0 	bl	800c636 <dir_next>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800d0dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d107      	bne.n	800d0f4 <dir_register+0x184>
 800d0e4:	6a3b      	ldr	r3, [r7, #32]
 800d0e6:	3b01      	subs	r3, #1
 800d0e8:	623b      	str	r3, [r7, #32]
 800d0ea:	6a3b      	ldr	r3, [r7, #32]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d1d5      	bne.n	800d09c <dir_register+0x12c>
 800d0f0:	e000      	b.n	800d0f4 <dir_register+0x184>
				if (res != FR_OK) break;
 800d0f2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d0f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d128      	bne.n	800d14e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	69db      	ldr	r3, [r3, #28]
 800d100:	4619      	mov	r1, r3
 800d102:	69f8      	ldr	r0, [r7, #28]
 800d104:	f7fe fe9e 	bl	800be44 <move_window>
 800d108:	4603      	mov	r3, r0
 800d10a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d10e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d112:	2b00      	cmp	r3, #0
 800d114:	d11b      	bne.n	800d14e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6a1b      	ldr	r3, [r3, #32]
 800d11a:	2220      	movs	r2, #32
 800d11c:	2100      	movs	r1, #0
 800d11e:	4618      	mov	r0, r3
 800d120:	f7fe fc83 	bl	800ba2a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6a18      	ldr	r0, [r3, #32]
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	3324      	adds	r3, #36	; 0x24
 800d12c:	220b      	movs	r2, #11
 800d12e:	4619      	mov	r1, r3
 800d130:	f7fe fc5a 	bl	800b9e8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6a1b      	ldr	r3, [r3, #32]
 800d13e:	330c      	adds	r3, #12
 800d140:	f002 0218 	and.w	r2, r2, #24
 800d144:	b2d2      	uxtb	r2, r2
 800d146:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d148:	69fb      	ldr	r3, [r7, #28]
 800d14a:	2201      	movs	r2, #1
 800d14c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d14e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d152:	4618      	mov	r0, r3
 800d154:	3730      	adds	r7, #48	; 0x30
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}
 800d15a:	bf00      	nop
 800d15c:	4ec4ec4f 	.word	0x4ec4ec4f

0800d160 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b088      	sub	sp, #32
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	2200      	movs	r2, #0
 800d174:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	69db      	ldr	r3, [r3, #28]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	f000 80c9 	beq.w	800d312 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d184:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d188:	d032      	beq.n	800d1f0 <get_fileinfo+0x90>
			i = j = 0;
 800d18a:	2300      	movs	r3, #0
 800d18c:	61bb      	str	r3, [r7, #24]
 800d18e:	69bb      	ldr	r3, [r7, #24]
 800d190:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d192:	e01b      	b.n	800d1cc <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800d194:	89fb      	ldrh	r3, [r7, #14]
 800d196:	2100      	movs	r1, #0
 800d198:	4618      	mov	r0, r3
 800d19a:	f001 fd2f 	bl	800ebfc <ff_convert>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800d1a2:	89fb      	ldrh	r3, [r7, #14]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d102      	bne.n	800d1ae <get_fileinfo+0x4e>
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	61fb      	str	r3, [r7, #28]
 800d1ac:	e01a      	b.n	800d1e4 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800d1ae:	69fb      	ldr	r3, [r7, #28]
 800d1b0:	2bfe      	cmp	r3, #254	; 0xfe
 800d1b2:	d902      	bls.n	800d1ba <get_fileinfo+0x5a>
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	61fb      	str	r3, [r7, #28]
 800d1b8:	e014      	b.n	800d1e4 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800d1ba:	69fb      	ldr	r3, [r7, #28]
 800d1bc:	1c5a      	adds	r2, r3, #1
 800d1be:	61fa      	str	r2, [r7, #28]
 800d1c0:	89fa      	ldrh	r2, [r7, #14]
 800d1c2:	b2d1      	uxtb	r1, r2
 800d1c4:	683a      	ldr	r2, [r7, #0]
 800d1c6:	4413      	add	r3, r2
 800d1c8:	460a      	mov	r2, r1
 800d1ca:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d1cc:	693b      	ldr	r3, [r7, #16]
 800d1ce:	68da      	ldr	r2, [r3, #12]
 800d1d0:	69bb      	ldr	r3, [r7, #24]
 800d1d2:	1c59      	adds	r1, r3, #1
 800d1d4:	61b9      	str	r1, [r7, #24]
 800d1d6:	005b      	lsls	r3, r3, #1
 800d1d8:	4413      	add	r3, r2
 800d1da:	881b      	ldrh	r3, [r3, #0]
 800d1dc:	81fb      	strh	r3, [r7, #14]
 800d1de:	89fb      	ldrh	r3, [r7, #14]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d1d7      	bne.n	800d194 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800d1e4:	683a      	ldr	r2, [r7, #0]
 800d1e6:	69fb      	ldr	r3, [r7, #28]
 800d1e8:	4413      	add	r3, r2
 800d1ea:	3316      	adds	r3, #22
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	61bb      	str	r3, [r7, #24]
 800d1f4:	69bb      	ldr	r3, [r7, #24]
 800d1f6:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800d1f8:	683a      	ldr	r2, [r7, #0]
 800d1fa:	69fb      	ldr	r3, [r7, #28]
 800d1fc:	4413      	add	r3, r2
 800d1fe:	3316      	adds	r3, #22
 800d200:	781b      	ldrb	r3, [r3, #0]
 800d202:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800d204:	e04c      	b.n	800d2a0 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6a1a      	ldr	r2, [r3, #32]
 800d20a:	69fb      	ldr	r3, [r7, #28]
 800d20c:	1c59      	adds	r1, r3, #1
 800d20e:	61f9      	str	r1, [r7, #28]
 800d210:	4413      	add	r3, r2
 800d212:	781b      	ldrb	r3, [r3, #0]
 800d214:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800d216:	7dfb      	ldrb	r3, [r7, #23]
 800d218:	2b20      	cmp	r3, #32
 800d21a:	d100      	bne.n	800d21e <get_fileinfo+0xbe>
 800d21c:	e040      	b.n	800d2a0 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800d21e:	7dfb      	ldrb	r3, [r7, #23]
 800d220:	2b05      	cmp	r3, #5
 800d222:	d101      	bne.n	800d228 <get_fileinfo+0xc8>
 800d224:	23e5      	movs	r3, #229	; 0xe5
 800d226:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800d228:	69fb      	ldr	r3, [r7, #28]
 800d22a:	2b09      	cmp	r3, #9
 800d22c:	d10f      	bne.n	800d24e <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800d22e:	89bb      	ldrh	r3, [r7, #12]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d105      	bne.n	800d240 <get_fileinfo+0xe0>
 800d234:	683a      	ldr	r2, [r7, #0]
 800d236:	69bb      	ldr	r3, [r7, #24]
 800d238:	4413      	add	r3, r2
 800d23a:	3316      	adds	r3, #22
 800d23c:	222e      	movs	r2, #46	; 0x2e
 800d23e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800d240:	69bb      	ldr	r3, [r7, #24]
 800d242:	1c5a      	adds	r2, r3, #1
 800d244:	61ba      	str	r2, [r7, #24]
 800d246:	683a      	ldr	r2, [r7, #0]
 800d248:	4413      	add	r3, r2
 800d24a:	222e      	movs	r2, #46	; 0x2e
 800d24c:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800d24e:	683a      	ldr	r2, [r7, #0]
 800d250:	69bb      	ldr	r3, [r7, #24]
 800d252:	4413      	add	r3, r2
 800d254:	3309      	adds	r3, #9
 800d256:	7dfa      	ldrb	r2, [r7, #23]
 800d258:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800d25a:	89bb      	ldrh	r3, [r7, #12]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d11c      	bne.n	800d29a <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800d260:	7dfb      	ldrb	r3, [r7, #23]
 800d262:	2b40      	cmp	r3, #64	; 0x40
 800d264:	d913      	bls.n	800d28e <get_fileinfo+0x12e>
 800d266:	7dfb      	ldrb	r3, [r7, #23]
 800d268:	2b5a      	cmp	r3, #90	; 0x5a
 800d26a:	d810      	bhi.n	800d28e <get_fileinfo+0x12e>
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	6a1b      	ldr	r3, [r3, #32]
 800d270:	330c      	adds	r3, #12
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	461a      	mov	r2, r3
 800d276:	69fb      	ldr	r3, [r7, #28]
 800d278:	2b08      	cmp	r3, #8
 800d27a:	d901      	bls.n	800d280 <get_fileinfo+0x120>
 800d27c:	2310      	movs	r3, #16
 800d27e:	e000      	b.n	800d282 <get_fileinfo+0x122>
 800d280:	2308      	movs	r3, #8
 800d282:	4013      	ands	r3, r2
 800d284:	2b00      	cmp	r3, #0
 800d286:	d002      	beq.n	800d28e <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800d288:	7dfb      	ldrb	r3, [r7, #23]
 800d28a:	3320      	adds	r3, #32
 800d28c:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800d28e:	683a      	ldr	r2, [r7, #0]
 800d290:	69bb      	ldr	r3, [r7, #24]
 800d292:	4413      	add	r3, r2
 800d294:	3316      	adds	r3, #22
 800d296:	7dfa      	ldrb	r2, [r7, #23]
 800d298:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800d29a:	69bb      	ldr	r3, [r7, #24]
 800d29c:	3301      	adds	r3, #1
 800d29e:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800d2a0:	69fb      	ldr	r3, [r7, #28]
 800d2a2:	2b0a      	cmp	r3, #10
 800d2a4:	d9af      	bls.n	800d206 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800d2a6:	89bb      	ldrh	r3, [r7, #12]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d10d      	bne.n	800d2c8 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800d2ac:	683a      	ldr	r2, [r7, #0]
 800d2ae:	69bb      	ldr	r3, [r7, #24]
 800d2b0:	4413      	add	r3, r2
 800d2b2:	3316      	adds	r3, #22
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6a1b      	ldr	r3, [r3, #32]
 800d2bc:	330c      	adds	r3, #12
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d101      	bne.n	800d2c8 <get_fileinfo+0x168>
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800d2c8:	683a      	ldr	r2, [r7, #0]
 800d2ca:	69bb      	ldr	r3, [r7, #24]
 800d2cc:	4413      	add	r3, r2
 800d2ce:	3309      	adds	r3, #9
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6a1b      	ldr	r3, [r3, #32]
 800d2d8:	7ada      	ldrb	r2, [r3, #11]
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6a1b      	ldr	r3, [r3, #32]
 800d2e2:	331c      	adds	r3, #28
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f7fe fb15 	bl	800b914 <ld_dword>
 800d2ea:	4602      	mov	r2, r0
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	6a1b      	ldr	r3, [r3, #32]
 800d2f4:	3316      	adds	r3, #22
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f7fe fb0c 	bl	800b914 <ld_dword>
 800d2fc:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	b29a      	uxth	r2, r3
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	80da      	strh	r2, [r3, #6]
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	0c1b      	lsrs	r3, r3, #16
 800d30a:	b29a      	uxth	r2, r3
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	809a      	strh	r2, [r3, #4]
 800d310:	e000      	b.n	800d314 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d312:	bf00      	nop
}
 800d314:	3720      	adds	r7, #32
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}
	...

0800d31c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b08a      	sub	sp, #40	; 0x28
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
 800d324:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	613b      	str	r3, [r7, #16]
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	68db      	ldr	r3, [r3, #12]
 800d332:	60fb      	str	r3, [r7, #12]
 800d334:	2300      	movs	r3, #0
 800d336:	617b      	str	r3, [r7, #20]
 800d338:	697b      	ldr	r3, [r7, #20]
 800d33a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d33c:	69bb      	ldr	r3, [r7, #24]
 800d33e:	1c5a      	adds	r2, r3, #1
 800d340:	61ba      	str	r2, [r7, #24]
 800d342:	693a      	ldr	r2, [r7, #16]
 800d344:	4413      	add	r3, r2
 800d346:	781b      	ldrb	r3, [r3, #0]
 800d348:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d34a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d34c:	2b1f      	cmp	r3, #31
 800d34e:	d940      	bls.n	800d3d2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d350:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d352:	2b2f      	cmp	r3, #47	; 0x2f
 800d354:	d006      	beq.n	800d364 <create_name+0x48>
 800d356:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d358:	2b5c      	cmp	r3, #92	; 0x5c
 800d35a:	d110      	bne.n	800d37e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d35c:	e002      	b.n	800d364 <create_name+0x48>
 800d35e:	69bb      	ldr	r3, [r7, #24]
 800d360:	3301      	adds	r3, #1
 800d362:	61bb      	str	r3, [r7, #24]
 800d364:	693a      	ldr	r2, [r7, #16]
 800d366:	69bb      	ldr	r3, [r7, #24]
 800d368:	4413      	add	r3, r2
 800d36a:	781b      	ldrb	r3, [r3, #0]
 800d36c:	2b2f      	cmp	r3, #47	; 0x2f
 800d36e:	d0f6      	beq.n	800d35e <create_name+0x42>
 800d370:	693a      	ldr	r2, [r7, #16]
 800d372:	69bb      	ldr	r3, [r7, #24]
 800d374:	4413      	add	r3, r2
 800d376:	781b      	ldrb	r3, [r3, #0]
 800d378:	2b5c      	cmp	r3, #92	; 0x5c
 800d37a:	d0f0      	beq.n	800d35e <create_name+0x42>
			break;
 800d37c:	e02a      	b.n	800d3d4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	2bfe      	cmp	r3, #254	; 0xfe
 800d382:	d901      	bls.n	800d388 <create_name+0x6c>
 800d384:	2306      	movs	r3, #6
 800d386:	e17d      	b.n	800d684 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d388:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d38a:	b2db      	uxtb	r3, r3
 800d38c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d38e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d390:	2101      	movs	r1, #1
 800d392:	4618      	mov	r0, r3
 800d394:	f001 fc32 	bl	800ebfc <ff_convert>
 800d398:	4603      	mov	r3, r0
 800d39a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d39c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d101      	bne.n	800d3a6 <create_name+0x8a>
 800d3a2:	2306      	movs	r3, #6
 800d3a4:	e16e      	b.n	800d684 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d3a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3a8:	2b7f      	cmp	r3, #127	; 0x7f
 800d3aa:	d809      	bhi.n	800d3c0 <create_name+0xa4>
 800d3ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3ae:	4619      	mov	r1, r3
 800d3b0:	488d      	ldr	r0, [pc, #564]	; (800d5e8 <create_name+0x2cc>)
 800d3b2:	f7fe fb7c 	bl	800baae <chk_chr>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d001      	beq.n	800d3c0 <create_name+0xa4>
 800d3bc:	2306      	movs	r3, #6
 800d3be:	e161      	b.n	800d684 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	1c5a      	adds	r2, r3, #1
 800d3c4:	617a      	str	r2, [r7, #20]
 800d3c6:	005b      	lsls	r3, r3, #1
 800d3c8:	68fa      	ldr	r2, [r7, #12]
 800d3ca:	4413      	add	r3, r2
 800d3cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d3ce:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d3d0:	e7b4      	b.n	800d33c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d3d2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d3d4:	693a      	ldr	r2, [r7, #16]
 800d3d6:	69bb      	ldr	r3, [r7, #24]
 800d3d8:	441a      	add	r2, r3
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d3de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3e0:	2b1f      	cmp	r3, #31
 800d3e2:	d801      	bhi.n	800d3e8 <create_name+0xcc>
 800d3e4:	2304      	movs	r3, #4
 800d3e6:	e000      	b.n	800d3ea <create_name+0xce>
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d3ee:	e011      	b.n	800d414 <create_name+0xf8>
		w = lfn[di - 1];
 800d3f0:	697b      	ldr	r3, [r7, #20]
 800d3f2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d3f6:	3b01      	subs	r3, #1
 800d3f8:	005b      	lsls	r3, r3, #1
 800d3fa:	68fa      	ldr	r2, [r7, #12]
 800d3fc:	4413      	add	r3, r2
 800d3fe:	881b      	ldrh	r3, [r3, #0]
 800d400:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d402:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d404:	2b20      	cmp	r3, #32
 800d406:	d002      	beq.n	800d40e <create_name+0xf2>
 800d408:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d40a:	2b2e      	cmp	r3, #46	; 0x2e
 800d40c:	d106      	bne.n	800d41c <create_name+0x100>
		di--;
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	3b01      	subs	r3, #1
 800d412:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d1ea      	bne.n	800d3f0 <create_name+0xd4>
 800d41a:	e000      	b.n	800d41e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d41c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d41e:	697b      	ldr	r3, [r7, #20]
 800d420:	005b      	lsls	r3, r3, #1
 800d422:	68fa      	ldr	r2, [r7, #12]
 800d424:	4413      	add	r3, r2
 800d426:	2200      	movs	r2, #0
 800d428:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d101      	bne.n	800d434 <create_name+0x118>
 800d430:	2306      	movs	r3, #6
 800d432:	e127      	b.n	800d684 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	3324      	adds	r3, #36	; 0x24
 800d438:	220b      	movs	r2, #11
 800d43a:	2120      	movs	r1, #32
 800d43c:	4618      	mov	r0, r3
 800d43e:	f7fe faf4 	bl	800ba2a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d442:	2300      	movs	r3, #0
 800d444:	61bb      	str	r3, [r7, #24]
 800d446:	e002      	b.n	800d44e <create_name+0x132>
 800d448:	69bb      	ldr	r3, [r7, #24]
 800d44a:	3301      	adds	r3, #1
 800d44c:	61bb      	str	r3, [r7, #24]
 800d44e:	69bb      	ldr	r3, [r7, #24]
 800d450:	005b      	lsls	r3, r3, #1
 800d452:	68fa      	ldr	r2, [r7, #12]
 800d454:	4413      	add	r3, r2
 800d456:	881b      	ldrh	r3, [r3, #0]
 800d458:	2b20      	cmp	r3, #32
 800d45a:	d0f5      	beq.n	800d448 <create_name+0x12c>
 800d45c:	69bb      	ldr	r3, [r7, #24]
 800d45e:	005b      	lsls	r3, r3, #1
 800d460:	68fa      	ldr	r2, [r7, #12]
 800d462:	4413      	add	r3, r2
 800d464:	881b      	ldrh	r3, [r3, #0]
 800d466:	2b2e      	cmp	r3, #46	; 0x2e
 800d468:	d0ee      	beq.n	800d448 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d46a:	69bb      	ldr	r3, [r7, #24]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d009      	beq.n	800d484 <create_name+0x168>
 800d470:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d474:	f043 0303 	orr.w	r3, r3, #3
 800d478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d47c:	e002      	b.n	800d484 <create_name+0x168>
 800d47e:	697b      	ldr	r3, [r7, #20]
 800d480:	3b01      	subs	r3, #1
 800d482:	617b      	str	r3, [r7, #20]
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d009      	beq.n	800d49e <create_name+0x182>
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d490:	3b01      	subs	r3, #1
 800d492:	005b      	lsls	r3, r3, #1
 800d494:	68fa      	ldr	r2, [r7, #12]
 800d496:	4413      	add	r3, r2
 800d498:	881b      	ldrh	r3, [r3, #0]
 800d49a:	2b2e      	cmp	r3, #46	; 0x2e
 800d49c:	d1ef      	bne.n	800d47e <create_name+0x162>

	i = b = 0; ni = 8;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	623b      	str	r3, [r7, #32]
 800d4a8:	2308      	movs	r3, #8
 800d4aa:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d4ac:	69bb      	ldr	r3, [r7, #24]
 800d4ae:	1c5a      	adds	r2, r3, #1
 800d4b0:	61ba      	str	r2, [r7, #24]
 800d4b2:	005b      	lsls	r3, r3, #1
 800d4b4:	68fa      	ldr	r2, [r7, #12]
 800d4b6:	4413      	add	r3, r2
 800d4b8:	881b      	ldrh	r3, [r3, #0]
 800d4ba:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d4bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	f000 8090 	beq.w	800d5e4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d4c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d4c6:	2b20      	cmp	r3, #32
 800d4c8:	d006      	beq.n	800d4d8 <create_name+0x1bc>
 800d4ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d4cc:	2b2e      	cmp	r3, #46	; 0x2e
 800d4ce:	d10a      	bne.n	800d4e6 <create_name+0x1ca>
 800d4d0:	69ba      	ldr	r2, [r7, #24]
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	d006      	beq.n	800d4e6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800d4d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4dc:	f043 0303 	orr.w	r3, r3, #3
 800d4e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d4e4:	e07d      	b.n	800d5e2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d4e6:	6a3a      	ldr	r2, [r7, #32]
 800d4e8:	69fb      	ldr	r3, [r7, #28]
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d203      	bcs.n	800d4f6 <create_name+0x1da>
 800d4ee:	69ba      	ldr	r2, [r7, #24]
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	d123      	bne.n	800d53e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800d4f6:	69fb      	ldr	r3, [r7, #28]
 800d4f8:	2b0b      	cmp	r3, #11
 800d4fa:	d106      	bne.n	800d50a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800d4fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d500:	f043 0303 	orr.w	r3, r3, #3
 800d504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d508:	e075      	b.n	800d5f6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d50a:	69ba      	ldr	r2, [r7, #24]
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	429a      	cmp	r2, r3
 800d510:	d005      	beq.n	800d51e <create_name+0x202>
 800d512:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d516:	f043 0303 	orr.w	r3, r3, #3
 800d51a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800d51e:	69ba      	ldr	r2, [r7, #24]
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	429a      	cmp	r2, r3
 800d524:	d866      	bhi.n	800d5f4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	61bb      	str	r3, [r7, #24]
 800d52a:	2308      	movs	r3, #8
 800d52c:	623b      	str	r3, [r7, #32]
 800d52e:	230b      	movs	r3, #11
 800d530:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d532:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d536:	009b      	lsls	r3, r3, #2
 800d538:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d53c:	e051      	b.n	800d5e2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d53e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d540:	2b7f      	cmp	r3, #127	; 0x7f
 800d542:	d914      	bls.n	800d56e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d544:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d546:	2100      	movs	r1, #0
 800d548:	4618      	mov	r0, r3
 800d54a:	f001 fb57 	bl	800ebfc <ff_convert>
 800d54e:	4603      	mov	r3, r0
 800d550:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d552:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d554:	2b00      	cmp	r3, #0
 800d556:	d004      	beq.n	800d562 <create_name+0x246>
 800d558:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d55a:	3b80      	subs	r3, #128	; 0x80
 800d55c:	4a23      	ldr	r2, [pc, #140]	; (800d5ec <create_name+0x2d0>)
 800d55e:	5cd3      	ldrb	r3, [r2, r3]
 800d560:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d562:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d566:	f043 0302 	orr.w	r3, r3, #2
 800d56a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d56e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d570:	2b00      	cmp	r3, #0
 800d572:	d007      	beq.n	800d584 <create_name+0x268>
 800d574:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d576:	4619      	mov	r1, r3
 800d578:	481d      	ldr	r0, [pc, #116]	; (800d5f0 <create_name+0x2d4>)
 800d57a:	f7fe fa98 	bl	800baae <chk_chr>
 800d57e:	4603      	mov	r3, r0
 800d580:	2b00      	cmp	r3, #0
 800d582:	d008      	beq.n	800d596 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d584:	235f      	movs	r3, #95	; 0x5f
 800d586:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d58c:	f043 0303 	orr.w	r3, r3, #3
 800d590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d594:	e01b      	b.n	800d5ce <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d596:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d598:	2b40      	cmp	r3, #64	; 0x40
 800d59a:	d909      	bls.n	800d5b0 <create_name+0x294>
 800d59c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d59e:	2b5a      	cmp	r3, #90	; 0x5a
 800d5a0:	d806      	bhi.n	800d5b0 <create_name+0x294>
					b |= 2;
 800d5a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d5a6:	f043 0302 	orr.w	r3, r3, #2
 800d5aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d5ae:	e00e      	b.n	800d5ce <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d5b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5b2:	2b60      	cmp	r3, #96	; 0x60
 800d5b4:	d90b      	bls.n	800d5ce <create_name+0x2b2>
 800d5b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5b8:	2b7a      	cmp	r3, #122	; 0x7a
 800d5ba:	d808      	bhi.n	800d5ce <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800d5bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d5c0:	f043 0301 	orr.w	r3, r3, #1
 800d5c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d5c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5ca:	3b20      	subs	r3, #32
 800d5cc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d5ce:	6a3b      	ldr	r3, [r7, #32]
 800d5d0:	1c5a      	adds	r2, r3, #1
 800d5d2:	623a      	str	r2, [r7, #32]
 800d5d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d5d6:	b2d1      	uxtb	r1, r2
 800d5d8:	687a      	ldr	r2, [r7, #4]
 800d5da:	4413      	add	r3, r2
 800d5dc:	460a      	mov	r2, r1
 800d5de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d5e2:	e763      	b.n	800d4ac <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800d5e4:	bf00      	nop
 800d5e6:	e006      	b.n	800d5f6 <create_name+0x2da>
 800d5e8:	0800f724 	.word	0x0800f724
 800d5ec:	0800f800 	.word	0x0800f800
 800d5f0:	0800f730 	.word	0x0800f730
			if (si > di) break;			/* No extension */
 800d5f4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d5fc:	2be5      	cmp	r3, #229	; 0xe5
 800d5fe:	d103      	bne.n	800d608 <create_name+0x2ec>
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2205      	movs	r2, #5
 800d604:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800d608:	69fb      	ldr	r3, [r7, #28]
 800d60a:	2b08      	cmp	r3, #8
 800d60c:	d104      	bne.n	800d618 <create_name+0x2fc>
 800d60e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d612:	009b      	lsls	r3, r3, #2
 800d614:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d618:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d61c:	f003 030c 	and.w	r3, r3, #12
 800d620:	2b0c      	cmp	r3, #12
 800d622:	d005      	beq.n	800d630 <create_name+0x314>
 800d624:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d628:	f003 0303 	and.w	r3, r3, #3
 800d62c:	2b03      	cmp	r3, #3
 800d62e:	d105      	bne.n	800d63c <create_name+0x320>
 800d630:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d634:	f043 0302 	orr.w	r3, r3, #2
 800d638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d63c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d640:	f003 0302 	and.w	r3, r3, #2
 800d644:	2b00      	cmp	r3, #0
 800d646:	d117      	bne.n	800d678 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d648:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d64c:	f003 0303 	and.w	r3, r3, #3
 800d650:	2b01      	cmp	r3, #1
 800d652:	d105      	bne.n	800d660 <create_name+0x344>
 800d654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d658:	f043 0310 	orr.w	r3, r3, #16
 800d65c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d660:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d664:	f003 030c 	and.w	r3, r3, #12
 800d668:	2b04      	cmp	r3, #4
 800d66a:	d105      	bne.n	800d678 <create_name+0x35c>
 800d66c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d670:	f043 0308 	orr.w	r3, r3, #8
 800d674:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d67e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800d682:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d684:	4618      	mov	r0, r3
 800d686:	3728      	adds	r7, #40	; 0x28
 800d688:	46bd      	mov	sp, r7
 800d68a:	bd80      	pop	{r7, pc}

0800d68c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b086      	sub	sp, #24
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
 800d694:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d69a:	693b      	ldr	r3, [r7, #16]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d6a0:	e002      	b.n	800d6a8 <follow_path+0x1c>
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	3301      	adds	r3, #1
 800d6a6:	603b      	str	r3, [r7, #0]
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	781b      	ldrb	r3, [r3, #0]
 800d6ac:	2b2f      	cmp	r3, #47	; 0x2f
 800d6ae:	d0f8      	beq.n	800d6a2 <follow_path+0x16>
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	2b5c      	cmp	r3, #92	; 0x5c
 800d6b6:	d0f4      	beq.n	800d6a2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d6b8:	693b      	ldr	r3, [r7, #16]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	781b      	ldrb	r3, [r3, #0]
 800d6c2:	2b1f      	cmp	r3, #31
 800d6c4:	d80a      	bhi.n	800d6dc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2280      	movs	r2, #128	; 0x80
 800d6ca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d6ce:	2100      	movs	r1, #0
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f7fe ff35 	bl	800c540 <dir_sdi>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	75fb      	strb	r3, [r7, #23]
 800d6da:	e043      	b.n	800d764 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d6dc:	463b      	mov	r3, r7
 800d6de:	4619      	mov	r1, r3
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	f7ff fe1b 	bl	800d31c <create_name>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d6ea:	7dfb      	ldrb	r3, [r7, #23]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d134      	bne.n	800d75a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f7ff fb7d 	bl	800cdf0 <dir_find>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d700:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d702:	7dfb      	ldrb	r3, [r7, #23]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d00a      	beq.n	800d71e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d708:	7dfb      	ldrb	r3, [r7, #23]
 800d70a:	2b04      	cmp	r3, #4
 800d70c:	d127      	bne.n	800d75e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d70e:	7afb      	ldrb	r3, [r7, #11]
 800d710:	f003 0304 	and.w	r3, r3, #4
 800d714:	2b00      	cmp	r3, #0
 800d716:	d122      	bne.n	800d75e <follow_path+0xd2>
 800d718:	2305      	movs	r3, #5
 800d71a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d71c:	e01f      	b.n	800d75e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d71e:	7afb      	ldrb	r3, [r7, #11]
 800d720:	f003 0304 	and.w	r3, r3, #4
 800d724:	2b00      	cmp	r3, #0
 800d726:	d11c      	bne.n	800d762 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d728:	693b      	ldr	r3, [r7, #16]
 800d72a:	799b      	ldrb	r3, [r3, #6]
 800d72c:	f003 0310 	and.w	r3, r3, #16
 800d730:	2b00      	cmp	r3, #0
 800d732:	d102      	bne.n	800d73a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d734:	2305      	movs	r3, #5
 800d736:	75fb      	strb	r3, [r7, #23]
 800d738:	e014      	b.n	800d764 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	695b      	ldr	r3, [r3, #20]
 800d744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d748:	4413      	add	r3, r2
 800d74a:	4619      	mov	r1, r3
 800d74c:	68f8      	ldr	r0, [r7, #12]
 800d74e:	f7ff f87e 	bl	800c84e <ld_clust>
 800d752:	4602      	mov	r2, r0
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d758:	e7c0      	b.n	800d6dc <follow_path+0x50>
			if (res != FR_OK) break;
 800d75a:	bf00      	nop
 800d75c:	e002      	b.n	800d764 <follow_path+0xd8>
				break;
 800d75e:	bf00      	nop
 800d760:	e000      	b.n	800d764 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d762:	bf00      	nop
			}
		}
	}

	return res;
 800d764:	7dfb      	ldrb	r3, [r7, #23]
}
 800d766:	4618      	mov	r0, r3
 800d768:	3718      	adds	r7, #24
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}

0800d76e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d76e:	b480      	push	{r7}
 800d770:	b087      	sub	sp, #28
 800d772:	af00      	add	r7, sp, #0
 800d774:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d776:	f04f 33ff 	mov.w	r3, #4294967295
 800d77a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d031      	beq.n	800d7e8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	617b      	str	r3, [r7, #20]
 800d78a:	e002      	b.n	800d792 <get_ldnumber+0x24>
 800d78c:	697b      	ldr	r3, [r7, #20]
 800d78e:	3301      	adds	r3, #1
 800d790:	617b      	str	r3, [r7, #20]
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	781b      	ldrb	r3, [r3, #0]
 800d796:	2b1f      	cmp	r3, #31
 800d798:	d903      	bls.n	800d7a2 <get_ldnumber+0x34>
 800d79a:	697b      	ldr	r3, [r7, #20]
 800d79c:	781b      	ldrb	r3, [r3, #0]
 800d79e:	2b3a      	cmp	r3, #58	; 0x3a
 800d7a0:	d1f4      	bne.n	800d78c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	781b      	ldrb	r3, [r3, #0]
 800d7a6:	2b3a      	cmp	r3, #58	; 0x3a
 800d7a8:	d11c      	bne.n	800d7e4 <get_ldnumber+0x76>
			tp = *path;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	1c5a      	adds	r2, r3, #1
 800d7b4:	60fa      	str	r2, [r7, #12]
 800d7b6:	781b      	ldrb	r3, [r3, #0]
 800d7b8:	3b30      	subs	r3, #48	; 0x30
 800d7ba:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	2b09      	cmp	r3, #9
 800d7c0:	d80e      	bhi.n	800d7e0 <get_ldnumber+0x72>
 800d7c2:	68fa      	ldr	r2, [r7, #12]
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d10a      	bne.n	800d7e0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d7ca:	68bb      	ldr	r3, [r7, #8]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d107      	bne.n	800d7e0 <get_ldnumber+0x72>
					vol = (int)i;
 800d7d0:	68bb      	ldr	r3, [r7, #8]
 800d7d2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d7d4:	697b      	ldr	r3, [r7, #20]
 800d7d6:	3301      	adds	r3, #1
 800d7d8:	617b      	str	r3, [r7, #20]
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	697a      	ldr	r2, [r7, #20]
 800d7de:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d7e0:	693b      	ldr	r3, [r7, #16]
 800d7e2:	e002      	b.n	800d7ea <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d7e8:	693b      	ldr	r3, [r7, #16]
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	371c      	adds	r7, #28
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f4:	4770      	bx	lr
	...

0800d7f8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b082      	sub	sp, #8
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
 800d800:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2200      	movs	r2, #0
 800d806:	70da      	strb	r2, [r3, #3]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f04f 32ff 	mov.w	r2, #4294967295
 800d80e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d810:	6839      	ldr	r1, [r7, #0]
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f7fe fb16 	bl	800be44 <move_window>
 800d818:	4603      	mov	r3, r0
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d001      	beq.n	800d822 <check_fs+0x2a>
 800d81e:	2304      	movs	r3, #4
 800d820:	e038      	b.n	800d894 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	3334      	adds	r3, #52	; 0x34
 800d826:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d82a:	4618      	mov	r0, r3
 800d82c:	f7fe f85a 	bl	800b8e4 <ld_word>
 800d830:	4603      	mov	r3, r0
 800d832:	461a      	mov	r2, r3
 800d834:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d838:	429a      	cmp	r2, r3
 800d83a:	d001      	beq.n	800d840 <check_fs+0x48>
 800d83c:	2303      	movs	r3, #3
 800d83e:	e029      	b.n	800d894 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d846:	2be9      	cmp	r3, #233	; 0xe9
 800d848:	d009      	beq.n	800d85e <check_fs+0x66>
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d850:	2beb      	cmp	r3, #235	; 0xeb
 800d852:	d11e      	bne.n	800d892 <check_fs+0x9a>
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d85a:	2b90      	cmp	r3, #144	; 0x90
 800d85c:	d119      	bne.n	800d892 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	3334      	adds	r3, #52	; 0x34
 800d862:	3336      	adds	r3, #54	; 0x36
 800d864:	4618      	mov	r0, r3
 800d866:	f7fe f855 	bl	800b914 <ld_dword>
 800d86a:	4603      	mov	r3, r0
 800d86c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d870:	4a0a      	ldr	r2, [pc, #40]	; (800d89c <check_fs+0xa4>)
 800d872:	4293      	cmp	r3, r2
 800d874:	d101      	bne.n	800d87a <check_fs+0x82>
 800d876:	2300      	movs	r3, #0
 800d878:	e00c      	b.n	800d894 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	3334      	adds	r3, #52	; 0x34
 800d87e:	3352      	adds	r3, #82	; 0x52
 800d880:	4618      	mov	r0, r3
 800d882:	f7fe f847 	bl	800b914 <ld_dword>
 800d886:	4603      	mov	r3, r0
 800d888:	4a05      	ldr	r2, [pc, #20]	; (800d8a0 <check_fs+0xa8>)
 800d88a:	4293      	cmp	r3, r2
 800d88c:	d101      	bne.n	800d892 <check_fs+0x9a>
 800d88e:	2300      	movs	r3, #0
 800d890:	e000      	b.n	800d894 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d892:	2302      	movs	r3, #2
}
 800d894:	4618      	mov	r0, r3
 800d896:	3708      	adds	r7, #8
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}
 800d89c:	00544146 	.word	0x00544146
 800d8a0:	33544146 	.word	0x33544146

0800d8a4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b096      	sub	sp, #88	; 0x58
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	60f8      	str	r0, [r7, #12]
 800d8ac:	60b9      	str	r1, [r7, #8]
 800d8ae:	4613      	mov	r3, r2
 800d8b0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d8b8:	68f8      	ldr	r0, [r7, #12]
 800d8ba:	f7ff ff58 	bl	800d76e <get_ldnumber>
 800d8be:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d8c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	da01      	bge.n	800d8ca <find_volume+0x26>
 800d8c6:	230b      	movs	r3, #11
 800d8c8:	e230      	b.n	800dd2c <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d8ca:	4aa1      	ldr	r2, [pc, #644]	; (800db50 <find_volume+0x2ac>)
 800d8cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8d2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d101      	bne.n	800d8de <find_volume+0x3a>
 800d8da:	230c      	movs	r3, #12
 800d8dc:	e226      	b.n	800dd2c <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d8e2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d8e4:	79fb      	ldrb	r3, [r7, #7]
 800d8e6:	f023 0301 	bic.w	r3, r3, #1
 800d8ea:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ee:	781b      	ldrb	r3, [r3, #0]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d01a      	beq.n	800d92a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8f6:	785b      	ldrb	r3, [r3, #1]
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f7fd ff55 	bl	800b7a8 <disk_status>
 800d8fe:	4603      	mov	r3, r0
 800d900:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d904:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d908:	f003 0301 	and.w	r3, r3, #1
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d10c      	bne.n	800d92a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d910:	79fb      	ldrb	r3, [r7, #7]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d007      	beq.n	800d926 <find_volume+0x82>
 800d916:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d91a:	f003 0304 	and.w	r3, r3, #4
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d001      	beq.n	800d926 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d922:	230a      	movs	r3, #10
 800d924:	e202      	b.n	800dd2c <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800d926:	2300      	movs	r3, #0
 800d928:	e200      	b.n	800dd2c <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d92c:	2200      	movs	r2, #0
 800d92e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d932:	b2da      	uxtb	r2, r3
 800d934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d936:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d93a:	785b      	ldrb	r3, [r3, #1]
 800d93c:	4618      	mov	r0, r3
 800d93e:	f7fd ff4d 	bl	800b7dc <disk_initialize>
 800d942:	4603      	mov	r3, r0
 800d944:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d948:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d94c:	f003 0301 	and.w	r3, r3, #1
 800d950:	2b00      	cmp	r3, #0
 800d952:	d001      	beq.n	800d958 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d954:	2303      	movs	r3, #3
 800d956:	e1e9      	b.n	800dd2c <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d958:	79fb      	ldrb	r3, [r7, #7]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d007      	beq.n	800d96e <find_volume+0xca>
 800d95e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d962:	f003 0304 	and.w	r3, r3, #4
 800d966:	2b00      	cmp	r3, #0
 800d968:	d001      	beq.n	800d96e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d96a:	230a      	movs	r3, #10
 800d96c:	e1de      	b.n	800dd2c <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d96e:	2300      	movs	r3, #0
 800d970:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d972:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d974:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d976:	f7ff ff3f 	bl	800d7f8 <check_fs>
 800d97a:	4603      	mov	r3, r0
 800d97c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d980:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d984:	2b02      	cmp	r3, #2
 800d986:	d149      	bne.n	800da1c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d988:	2300      	movs	r3, #0
 800d98a:	643b      	str	r3, [r7, #64]	; 0x40
 800d98c:	e01e      	b.n	800d9cc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d990:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d996:	011b      	lsls	r3, r3, #4
 800d998:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d99c:	4413      	add	r3, r2
 800d99e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a2:	3304      	adds	r3, #4
 800d9a4:	781b      	ldrb	r3, [r3, #0]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d006      	beq.n	800d9b8 <find_volume+0x114>
 800d9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ac:	3308      	adds	r3, #8
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f7fd ffb0 	bl	800b914 <ld_dword>
 800d9b4:	4602      	mov	r2, r0
 800d9b6:	e000      	b.n	800d9ba <find_volume+0x116>
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9bc:	009b      	lsls	r3, r3, #2
 800d9be:	3358      	adds	r3, #88	; 0x58
 800d9c0:	443b      	add	r3, r7
 800d9c2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d9c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9c8:	3301      	adds	r3, #1
 800d9ca:	643b      	str	r3, [r7, #64]	; 0x40
 800d9cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9ce:	2b03      	cmp	r3, #3
 800d9d0:	d9dd      	bls.n	800d98e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d9d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d002      	beq.n	800d9e2 <find_volume+0x13e>
 800d9dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9de:	3b01      	subs	r3, #1
 800d9e0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d9e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9e4:	009b      	lsls	r3, r3, #2
 800d9e6:	3358      	adds	r3, #88	; 0x58
 800d9e8:	443b      	add	r3, r7
 800d9ea:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d9ee:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d9f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d005      	beq.n	800da02 <find_volume+0x15e>
 800d9f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d9f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d9fa:	f7ff fefd 	bl	800d7f8 <check_fs>
 800d9fe:	4603      	mov	r3, r0
 800da00:	e000      	b.n	800da04 <find_volume+0x160>
 800da02:	2303      	movs	r3, #3
 800da04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800da08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800da0c:	2b01      	cmp	r3, #1
 800da0e:	d905      	bls.n	800da1c <find_volume+0x178>
 800da10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da12:	3301      	adds	r3, #1
 800da14:	643b      	str	r3, [r7, #64]	; 0x40
 800da16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da18:	2b03      	cmp	r3, #3
 800da1a:	d9e2      	bls.n	800d9e2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800da1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800da20:	2b04      	cmp	r3, #4
 800da22:	d101      	bne.n	800da28 <find_volume+0x184>
 800da24:	2301      	movs	r3, #1
 800da26:	e181      	b.n	800dd2c <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800da28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800da2c:	2b01      	cmp	r3, #1
 800da2e:	d901      	bls.n	800da34 <find_volume+0x190>
 800da30:	230d      	movs	r3, #13
 800da32:	e17b      	b.n	800dd2c <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800da34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da36:	3334      	adds	r3, #52	; 0x34
 800da38:	330b      	adds	r3, #11
 800da3a:	4618      	mov	r0, r3
 800da3c:	f7fd ff52 	bl	800b8e4 <ld_word>
 800da40:	4603      	mov	r3, r0
 800da42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da46:	d001      	beq.n	800da4c <find_volume+0x1a8>
 800da48:	230d      	movs	r3, #13
 800da4a:	e16f      	b.n	800dd2c <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800da4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da4e:	3334      	adds	r3, #52	; 0x34
 800da50:	3316      	adds	r3, #22
 800da52:	4618      	mov	r0, r3
 800da54:	f7fd ff46 	bl	800b8e4 <ld_word>
 800da58:	4603      	mov	r3, r0
 800da5a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800da5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d106      	bne.n	800da70 <find_volume+0x1cc>
 800da62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da64:	3334      	adds	r3, #52	; 0x34
 800da66:	3324      	adds	r3, #36	; 0x24
 800da68:	4618      	mov	r0, r3
 800da6a:	f7fd ff53 	bl	800b914 <ld_dword>
 800da6e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800da70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800da74:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800da76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da78:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800da7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da7e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800da80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da82:	789b      	ldrb	r3, [r3, #2]
 800da84:	2b01      	cmp	r3, #1
 800da86:	d005      	beq.n	800da94 <find_volume+0x1f0>
 800da88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da8a:	789b      	ldrb	r3, [r3, #2]
 800da8c:	2b02      	cmp	r3, #2
 800da8e:	d001      	beq.n	800da94 <find_volume+0x1f0>
 800da90:	230d      	movs	r3, #13
 800da92:	e14b      	b.n	800dd2c <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800da94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da96:	789b      	ldrb	r3, [r3, #2]
 800da98:	461a      	mov	r2, r3
 800da9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da9c:	fb02 f303 	mul.w	r3, r2, r3
 800daa0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800daa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800daa8:	b29a      	uxth	r2, r3
 800daaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800daae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dab0:	895b      	ldrh	r3, [r3, #10]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d008      	beq.n	800dac8 <find_volume+0x224>
 800dab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dab8:	895b      	ldrh	r3, [r3, #10]
 800daba:	461a      	mov	r2, r3
 800dabc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dabe:	895b      	ldrh	r3, [r3, #10]
 800dac0:	3b01      	subs	r3, #1
 800dac2:	4013      	ands	r3, r2
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d001      	beq.n	800dacc <find_volume+0x228>
 800dac8:	230d      	movs	r3, #13
 800daca:	e12f      	b.n	800dd2c <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800dacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dace:	3334      	adds	r3, #52	; 0x34
 800dad0:	3311      	adds	r3, #17
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7fd ff06 	bl	800b8e4 <ld_word>
 800dad8:	4603      	mov	r3, r0
 800dada:	461a      	mov	r2, r3
 800dadc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dade:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800dae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dae2:	891b      	ldrh	r3, [r3, #8]
 800dae4:	f003 030f 	and.w	r3, r3, #15
 800dae8:	b29b      	uxth	r3, r3
 800daea:	2b00      	cmp	r3, #0
 800daec:	d001      	beq.n	800daf2 <find_volume+0x24e>
 800daee:	230d      	movs	r3, #13
 800daf0:	e11c      	b.n	800dd2c <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800daf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf4:	3334      	adds	r3, #52	; 0x34
 800daf6:	3313      	adds	r3, #19
 800daf8:	4618      	mov	r0, r3
 800dafa:	f7fd fef3 	bl	800b8e4 <ld_word>
 800dafe:	4603      	mov	r3, r0
 800db00:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800db02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db04:	2b00      	cmp	r3, #0
 800db06:	d106      	bne.n	800db16 <find_volume+0x272>
 800db08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db0a:	3334      	adds	r3, #52	; 0x34
 800db0c:	3320      	adds	r3, #32
 800db0e:	4618      	mov	r0, r3
 800db10:	f7fd ff00 	bl	800b914 <ld_dword>
 800db14:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800db16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db18:	3334      	adds	r3, #52	; 0x34
 800db1a:	330e      	adds	r3, #14
 800db1c:	4618      	mov	r0, r3
 800db1e:	f7fd fee1 	bl	800b8e4 <ld_word>
 800db22:	4603      	mov	r3, r0
 800db24:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800db26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d101      	bne.n	800db30 <find_volume+0x28c>
 800db2c:	230d      	movs	r3, #13
 800db2e:	e0fd      	b.n	800dd2c <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800db30:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800db32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db34:	4413      	add	r3, r2
 800db36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db38:	8912      	ldrh	r2, [r2, #8]
 800db3a:	0912      	lsrs	r2, r2, #4
 800db3c:	b292      	uxth	r2, r2
 800db3e:	4413      	add	r3, r2
 800db40:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800db42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800db44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db46:	429a      	cmp	r2, r3
 800db48:	d204      	bcs.n	800db54 <find_volume+0x2b0>
 800db4a:	230d      	movs	r3, #13
 800db4c:	e0ee      	b.n	800dd2c <find_volume+0x488>
 800db4e:	bf00      	nop
 800db50:	20001b64 	.word	0x20001b64
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800db54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800db56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db58:	1ad3      	subs	r3, r2, r3
 800db5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db5c:	8952      	ldrh	r2, [r2, #10]
 800db5e:	fbb3 f3f2 	udiv	r3, r3, r2
 800db62:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800db64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db66:	2b00      	cmp	r3, #0
 800db68:	d101      	bne.n	800db6e <find_volume+0x2ca>
 800db6a:	230d      	movs	r3, #13
 800db6c:	e0de      	b.n	800dd2c <find_volume+0x488>
		fmt = FS_FAT32;
 800db6e:	2303      	movs	r3, #3
 800db70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800db74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db76:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800db7a:	4293      	cmp	r3, r2
 800db7c:	d802      	bhi.n	800db84 <find_volume+0x2e0>
 800db7e:	2302      	movs	r3, #2
 800db80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800db84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db86:	f640 72f5 	movw	r2, #4085	; 0xff5
 800db8a:	4293      	cmp	r3, r2
 800db8c:	d802      	bhi.n	800db94 <find_volume+0x2f0>
 800db8e:	2301      	movs	r3, #1
 800db90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800db94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db96:	1c9a      	adds	r2, r3, #2
 800db98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db9a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800db9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dba0:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800dba2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dba6:	441a      	add	r2, r3
 800dba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbaa:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800dbac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dbae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbb0:	441a      	add	r2, r3
 800dbb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbb4:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800dbb6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dbba:	2b03      	cmp	r3, #3
 800dbbc:	d11e      	bne.n	800dbfc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800dbbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbc0:	3334      	adds	r3, #52	; 0x34
 800dbc2:	332a      	adds	r3, #42	; 0x2a
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7fd fe8d 	bl	800b8e4 <ld_word>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d001      	beq.n	800dbd4 <find_volume+0x330>
 800dbd0:	230d      	movs	r3, #13
 800dbd2:	e0ab      	b.n	800dd2c <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800dbd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbd6:	891b      	ldrh	r3, [r3, #8]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d001      	beq.n	800dbe0 <find_volume+0x33c>
 800dbdc:	230d      	movs	r3, #13
 800dbde:	e0a5      	b.n	800dd2c <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800dbe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbe2:	3334      	adds	r3, #52	; 0x34
 800dbe4:	332c      	adds	r3, #44	; 0x2c
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f7fd fe94 	bl	800b914 <ld_dword>
 800dbec:	4602      	mov	r2, r0
 800dbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbf0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800dbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbf4:	699b      	ldr	r3, [r3, #24]
 800dbf6:	009b      	lsls	r3, r3, #2
 800dbf8:	647b      	str	r3, [r7, #68]	; 0x44
 800dbfa:	e01f      	b.n	800dc3c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800dbfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbfe:	891b      	ldrh	r3, [r3, #8]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d101      	bne.n	800dc08 <find_volume+0x364>
 800dc04:	230d      	movs	r3, #13
 800dc06:	e091      	b.n	800dd2c <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800dc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc0e:	441a      	add	r2, r3
 800dc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc12:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800dc14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dc18:	2b02      	cmp	r3, #2
 800dc1a:	d103      	bne.n	800dc24 <find_volume+0x380>
 800dc1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc1e:	699b      	ldr	r3, [r3, #24]
 800dc20:	005b      	lsls	r3, r3, #1
 800dc22:	e00a      	b.n	800dc3a <find_volume+0x396>
 800dc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc26:	699a      	ldr	r2, [r3, #24]
 800dc28:	4613      	mov	r3, r2
 800dc2a:	005b      	lsls	r3, r3, #1
 800dc2c:	4413      	add	r3, r2
 800dc2e:	085a      	lsrs	r2, r3, #1
 800dc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc32:	699b      	ldr	r3, [r3, #24]
 800dc34:	f003 0301 	and.w	r3, r3, #1
 800dc38:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800dc3a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800dc3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc3e:	69da      	ldr	r2, [r3, #28]
 800dc40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc42:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800dc46:	0a5b      	lsrs	r3, r3, #9
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d201      	bcs.n	800dc50 <find_volume+0x3ac>
 800dc4c:	230d      	movs	r3, #13
 800dc4e:	e06d      	b.n	800dd2c <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800dc50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc52:	f04f 32ff 	mov.w	r2, #4294967295
 800dc56:	615a      	str	r2, [r3, #20]
 800dc58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc5a:	695a      	ldr	r2, [r3, #20]
 800dc5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc5e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800dc60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc62:	2280      	movs	r2, #128	; 0x80
 800dc64:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800dc66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dc6a:	2b03      	cmp	r3, #3
 800dc6c:	d149      	bne.n	800dd02 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800dc6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc70:	3334      	adds	r3, #52	; 0x34
 800dc72:	3330      	adds	r3, #48	; 0x30
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7fd fe35 	bl	800b8e4 <ld_word>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	2b01      	cmp	r3, #1
 800dc7e:	d140      	bne.n	800dd02 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800dc80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc82:	3301      	adds	r3, #1
 800dc84:	4619      	mov	r1, r3
 800dc86:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dc88:	f7fe f8dc 	bl	800be44 <move_window>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d137      	bne.n	800dd02 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800dc92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc94:	2200      	movs	r2, #0
 800dc96:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800dc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc9a:	3334      	adds	r3, #52	; 0x34
 800dc9c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dca0:	4618      	mov	r0, r3
 800dca2:	f7fd fe1f 	bl	800b8e4 <ld_word>
 800dca6:	4603      	mov	r3, r0
 800dca8:	461a      	mov	r2, r3
 800dcaa:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800dcae:	429a      	cmp	r2, r3
 800dcb0:	d127      	bne.n	800dd02 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800dcb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcb4:	3334      	adds	r3, #52	; 0x34
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f7fd fe2c 	bl	800b914 <ld_dword>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	4a1d      	ldr	r2, [pc, #116]	; (800dd34 <find_volume+0x490>)
 800dcc0:	4293      	cmp	r3, r2
 800dcc2:	d11e      	bne.n	800dd02 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800dcc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcc6:	3334      	adds	r3, #52	; 0x34
 800dcc8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800dccc:	4618      	mov	r0, r3
 800dcce:	f7fd fe21 	bl	800b914 <ld_dword>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	4a18      	ldr	r2, [pc, #96]	; (800dd38 <find_volume+0x494>)
 800dcd6:	4293      	cmp	r3, r2
 800dcd8:	d113      	bne.n	800dd02 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800dcda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcdc:	3334      	adds	r3, #52	; 0x34
 800dcde:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800dce2:	4618      	mov	r0, r3
 800dce4:	f7fd fe16 	bl	800b914 <ld_dword>
 800dce8:	4602      	mov	r2, r0
 800dcea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcec:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800dcee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcf0:	3334      	adds	r3, #52	; 0x34
 800dcf2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f7fd fe0c 	bl	800b914 <ld_dword>
 800dcfc:	4602      	mov	r2, r0
 800dcfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd00:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800dd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd04:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800dd08:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800dd0a:	4b0c      	ldr	r3, [pc, #48]	; (800dd3c <find_volume+0x498>)
 800dd0c:	881b      	ldrh	r3, [r3, #0]
 800dd0e:	3301      	adds	r3, #1
 800dd10:	b29a      	uxth	r2, r3
 800dd12:	4b0a      	ldr	r3, [pc, #40]	; (800dd3c <find_volume+0x498>)
 800dd14:	801a      	strh	r2, [r3, #0]
 800dd16:	4b09      	ldr	r3, [pc, #36]	; (800dd3c <find_volume+0x498>)
 800dd18:	881a      	ldrh	r2, [r3, #0]
 800dd1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd1c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800dd1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd20:	4a07      	ldr	r2, [pc, #28]	; (800dd40 <find_volume+0x49c>)
 800dd22:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800dd24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dd26:	f7fe f825 	bl	800bd74 <clear_lock>
#endif
	return FR_OK;
 800dd2a:	2300      	movs	r3, #0
}
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	3758      	adds	r7, #88	; 0x58
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}
 800dd34:	41615252 	.word	0x41615252
 800dd38:	61417272 	.word	0x61417272
 800dd3c:	20001b68 	.word	0x20001b68
 800dd40:	20001b8c 	.word	0x20001b8c

0800dd44 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b084      	sub	sp, #16
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800dd4e:	2309      	movs	r3, #9
 800dd50:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d01c      	beq.n	800dd92 <validate+0x4e>
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d018      	beq.n	800dd92 <validate+0x4e>
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	781b      	ldrb	r3, [r3, #0]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d013      	beq.n	800dd92 <validate+0x4e>
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	889a      	ldrh	r2, [r3, #4]
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	88db      	ldrh	r3, [r3, #6]
 800dd74:	429a      	cmp	r2, r3
 800dd76:	d10c      	bne.n	800dd92 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	785b      	ldrb	r3, [r3, #1]
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f7fd fd12 	bl	800b7a8 <disk_status>
 800dd84:	4603      	mov	r3, r0
 800dd86:	f003 0301 	and.w	r3, r3, #1
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d101      	bne.n	800dd92 <validate+0x4e>
			res = FR_OK;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800dd92:	7bfb      	ldrb	r3, [r7, #15]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d102      	bne.n	800dd9e <validate+0x5a>
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	e000      	b.n	800dda0 <validate+0x5c>
 800dd9e:	2300      	movs	r3, #0
 800dda0:	683a      	ldr	r2, [r7, #0]
 800dda2:	6013      	str	r3, [r2, #0]
	return res;
 800dda4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dda6:	4618      	mov	r0, r3
 800dda8:	3710      	adds	r7, #16
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}
	...

0800ddb0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b088      	sub	sp, #32
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	60f8      	str	r0, [r7, #12]
 800ddb8:	60b9      	str	r1, [r7, #8]
 800ddba:	4613      	mov	r3, r2
 800ddbc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ddc2:	f107 0310 	add.w	r3, r7, #16
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f7ff fcd1 	bl	800d76e <get_ldnumber>
 800ddcc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ddce:	69fb      	ldr	r3, [r7, #28]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	da01      	bge.n	800ddd8 <f_mount+0x28>
 800ddd4:	230b      	movs	r3, #11
 800ddd6:	e02b      	b.n	800de30 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ddd8:	4a17      	ldr	r2, [pc, #92]	; (800de38 <f_mount+0x88>)
 800ddda:	69fb      	ldr	r3, [r7, #28]
 800dddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dde0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800dde2:	69bb      	ldr	r3, [r7, #24]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d005      	beq.n	800ddf4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800dde8:	69b8      	ldr	r0, [r7, #24]
 800ddea:	f7fd ffc3 	bl	800bd74 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ddee:	69bb      	ldr	r3, [r7, #24]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d002      	beq.n	800de00 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800de00:	68fa      	ldr	r2, [r7, #12]
 800de02:	490d      	ldr	r1, [pc, #52]	; (800de38 <f_mount+0x88>)
 800de04:	69fb      	ldr	r3, [r7, #28]
 800de06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d002      	beq.n	800de16 <f_mount+0x66>
 800de10:	79fb      	ldrb	r3, [r7, #7]
 800de12:	2b01      	cmp	r3, #1
 800de14:	d001      	beq.n	800de1a <f_mount+0x6a>
 800de16:	2300      	movs	r3, #0
 800de18:	e00a      	b.n	800de30 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800de1a:	f107 010c 	add.w	r1, r7, #12
 800de1e:	f107 0308 	add.w	r3, r7, #8
 800de22:	2200      	movs	r2, #0
 800de24:	4618      	mov	r0, r3
 800de26:	f7ff fd3d 	bl	800d8a4 <find_volume>
 800de2a:	4603      	mov	r3, r0
 800de2c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800de2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800de30:	4618      	mov	r0, r3
 800de32:	3720      	adds	r7, #32
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}
 800de38:	20001b64 	.word	0x20001b64

0800de3c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b09a      	sub	sp, #104	; 0x68
 800de40:	af00      	add	r7, sp, #0
 800de42:	60f8      	str	r0, [r7, #12]
 800de44:	60b9      	str	r1, [r7, #8]
 800de46:	4613      	mov	r3, r2
 800de48:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d101      	bne.n	800de54 <f_open+0x18>
 800de50:	2309      	movs	r3, #9
 800de52:	e1ad      	b.n	800e1b0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800de54:	79fb      	ldrb	r3, [r7, #7]
 800de56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de5a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800de5c:	79fa      	ldrb	r2, [r7, #7]
 800de5e:	f107 0114 	add.w	r1, r7, #20
 800de62:	f107 0308 	add.w	r3, r7, #8
 800de66:	4618      	mov	r0, r3
 800de68:	f7ff fd1c 	bl	800d8a4 <find_volume>
 800de6c:	4603      	mov	r3, r0
 800de6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800de72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800de76:	2b00      	cmp	r3, #0
 800de78:	f040 8191 	bne.w	800e19e <f_open+0x362>
		dj.obj.fs = fs;
 800de7c:	697b      	ldr	r3, [r7, #20]
 800de7e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800de80:	68ba      	ldr	r2, [r7, #8]
 800de82:	f107 0318 	add.w	r3, r7, #24
 800de86:	4611      	mov	r1, r2
 800de88:	4618      	mov	r0, r3
 800de8a:	f7ff fbff 	bl	800d68c <follow_path>
 800de8e:	4603      	mov	r3, r0
 800de90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800de94:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d11a      	bne.n	800ded2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800de9c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800dea0:	b25b      	sxtb	r3, r3
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	da03      	bge.n	800deae <f_open+0x72>
				res = FR_INVALID_NAME;
 800dea6:	2306      	movs	r3, #6
 800dea8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800deac:	e011      	b.n	800ded2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800deae:	79fb      	ldrb	r3, [r7, #7]
 800deb0:	f023 0301 	bic.w	r3, r3, #1
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	bf14      	ite	ne
 800deb8:	2301      	movne	r3, #1
 800deba:	2300      	moveq	r3, #0
 800debc:	b2db      	uxtb	r3, r3
 800debe:	461a      	mov	r2, r3
 800dec0:	f107 0318 	add.w	r3, r7, #24
 800dec4:	4611      	mov	r1, r2
 800dec6:	4618      	mov	r0, r3
 800dec8:	f7fd fe0c 	bl	800bae4 <chk_lock>
 800decc:	4603      	mov	r3, r0
 800dece:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ded2:	79fb      	ldrb	r3, [r7, #7]
 800ded4:	f003 031c 	and.w	r3, r3, #28
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d07f      	beq.n	800dfdc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800dedc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d017      	beq.n	800df14 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800dee4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dee8:	2b04      	cmp	r3, #4
 800deea:	d10e      	bne.n	800df0a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800deec:	f7fd fe56 	bl	800bb9c <enq_lock>
 800def0:	4603      	mov	r3, r0
 800def2:	2b00      	cmp	r3, #0
 800def4:	d006      	beq.n	800df04 <f_open+0xc8>
 800def6:	f107 0318 	add.w	r3, r7, #24
 800defa:	4618      	mov	r0, r3
 800defc:	f7ff f838 	bl	800cf70 <dir_register>
 800df00:	4603      	mov	r3, r0
 800df02:	e000      	b.n	800df06 <f_open+0xca>
 800df04:	2312      	movs	r3, #18
 800df06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800df0a:	79fb      	ldrb	r3, [r7, #7]
 800df0c:	f043 0308 	orr.w	r3, r3, #8
 800df10:	71fb      	strb	r3, [r7, #7]
 800df12:	e010      	b.n	800df36 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800df14:	7fbb      	ldrb	r3, [r7, #30]
 800df16:	f003 0311 	and.w	r3, r3, #17
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d003      	beq.n	800df26 <f_open+0xea>
					res = FR_DENIED;
 800df1e:	2307      	movs	r3, #7
 800df20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800df24:	e007      	b.n	800df36 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800df26:	79fb      	ldrb	r3, [r7, #7]
 800df28:	f003 0304 	and.w	r3, r3, #4
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d002      	beq.n	800df36 <f_open+0xfa>
 800df30:	2308      	movs	r3, #8
 800df32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800df36:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d168      	bne.n	800e010 <f_open+0x1d4>
 800df3e:	79fb      	ldrb	r3, [r7, #7]
 800df40:	f003 0308 	and.w	r3, r3, #8
 800df44:	2b00      	cmp	r3, #0
 800df46:	d063      	beq.n	800e010 <f_open+0x1d4>
				dw = GET_FATTIME();
 800df48:	f7fa fb1e 	bl	8008588 <get_fattime>
 800df4c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800df4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df50:	330e      	adds	r3, #14
 800df52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800df54:	4618      	mov	r0, r3
 800df56:	f7fd fd1b 	bl	800b990 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800df5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df5c:	3316      	adds	r3, #22
 800df5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800df60:	4618      	mov	r0, r3
 800df62:	f7fd fd15 	bl	800b990 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800df66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df68:	330b      	adds	r3, #11
 800df6a:	2220      	movs	r2, #32
 800df6c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800df6e:	697b      	ldr	r3, [r7, #20]
 800df70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df72:	4611      	mov	r1, r2
 800df74:	4618      	mov	r0, r3
 800df76:	f7fe fc6a 	bl	800c84e <ld_clust>
 800df7a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800df80:	2200      	movs	r2, #0
 800df82:	4618      	mov	r0, r3
 800df84:	f7fe fc82 	bl	800c88c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800df88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df8a:	331c      	adds	r3, #28
 800df8c:	2100      	movs	r1, #0
 800df8e:	4618      	mov	r0, r3
 800df90:	f7fd fcfe 	bl	800b990 <st_dword>
					fs->wflag = 1;
 800df94:	697b      	ldr	r3, [r7, #20]
 800df96:	2201      	movs	r2, #1
 800df98:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800df9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d037      	beq.n	800e010 <f_open+0x1d4>
						dw = fs->winsect;
 800dfa0:	697b      	ldr	r3, [r7, #20]
 800dfa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfa4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800dfa6:	f107 0318 	add.w	r3, r7, #24
 800dfaa:	2200      	movs	r2, #0
 800dfac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f7fe f995 	bl	800c2de <remove_chain>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800dfba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d126      	bne.n	800e010 <f_open+0x1d4>
							res = move_window(fs, dw);
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f7fd ff3c 	bl	800be44 <move_window>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800dfd2:	697b      	ldr	r3, [r7, #20]
 800dfd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dfd6:	3a01      	subs	r2, #1
 800dfd8:	611a      	str	r2, [r3, #16]
 800dfda:	e019      	b.n	800e010 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800dfdc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d115      	bne.n	800e010 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800dfe4:	7fbb      	ldrb	r3, [r7, #30]
 800dfe6:	f003 0310 	and.w	r3, r3, #16
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d003      	beq.n	800dff6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800dfee:	2304      	movs	r3, #4
 800dff0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800dff4:	e00c      	b.n	800e010 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800dff6:	79fb      	ldrb	r3, [r7, #7]
 800dff8:	f003 0302 	and.w	r3, r3, #2
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d007      	beq.n	800e010 <f_open+0x1d4>
 800e000:	7fbb      	ldrb	r3, [r7, #30]
 800e002:	f003 0301 	and.w	r3, r3, #1
 800e006:	2b00      	cmp	r3, #0
 800e008:	d002      	beq.n	800e010 <f_open+0x1d4>
						res = FR_DENIED;
 800e00a:	2307      	movs	r3, #7
 800e00c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e010:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e014:	2b00      	cmp	r3, #0
 800e016:	d128      	bne.n	800e06a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e018:	79fb      	ldrb	r3, [r7, #7]
 800e01a:	f003 0308 	and.w	r3, r3, #8
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d003      	beq.n	800e02a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e022:	79fb      	ldrb	r3, [r7, #7]
 800e024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e028:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e032:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e038:	79fb      	ldrb	r3, [r7, #7]
 800e03a:	f023 0301 	bic.w	r3, r3, #1
 800e03e:	2b00      	cmp	r3, #0
 800e040:	bf14      	ite	ne
 800e042:	2301      	movne	r3, #1
 800e044:	2300      	moveq	r3, #0
 800e046:	b2db      	uxtb	r3, r3
 800e048:	461a      	mov	r2, r3
 800e04a:	f107 0318 	add.w	r3, r7, #24
 800e04e:	4611      	mov	r1, r2
 800e050:	4618      	mov	r0, r3
 800e052:	f7fd fdc5 	bl	800bbe0 <inc_lock>
 800e056:	4602      	mov	r2, r0
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	691b      	ldr	r3, [r3, #16]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d102      	bne.n	800e06a <f_open+0x22e>
 800e064:	2302      	movs	r3, #2
 800e066:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e06a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e06e:	2b00      	cmp	r3, #0
 800e070:	f040 8095 	bne.w	800e19e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e074:	697b      	ldr	r3, [r7, #20]
 800e076:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e078:	4611      	mov	r1, r2
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7fe fbe7 	bl	800c84e <ld_clust>
 800e080:	4602      	mov	r2, r0
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e088:	331c      	adds	r3, #28
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7fd fc42 	bl	800b914 <ld_dword>
 800e090:	4602      	mov	r2, r0
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	2200      	movs	r2, #0
 800e09a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e09c:	697a      	ldr	r2, [r7, #20]
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e0a2:	697b      	ldr	r3, [r7, #20]
 800e0a4:	88da      	ldrh	r2, [r3, #6]
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	79fa      	ldrb	r2, [r7, #7]
 800e0ae:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	2200      	movs	r2, #0
 800e0c0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	3330      	adds	r3, #48	; 0x30
 800e0c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e0ca:	2100      	movs	r1, #0
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f7fd fcac 	bl	800ba2a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e0d2:	79fb      	ldrb	r3, [r7, #7]
 800e0d4:	f003 0320 	and.w	r3, r3, #32
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d060      	beq.n	800e19e <f_open+0x362>
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	68db      	ldr	r3, [r3, #12]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d05c      	beq.n	800e19e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	68da      	ldr	r2, [r3, #12]
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e0ec:	697b      	ldr	r3, [r7, #20]
 800e0ee:	895b      	ldrh	r3, [r3, #10]
 800e0f0:	025b      	lsls	r3, r3, #9
 800e0f2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	689b      	ldr	r3, [r3, #8]
 800e0f8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	68db      	ldr	r3, [r3, #12]
 800e0fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e100:	e016      	b.n	800e130 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e106:	4618      	mov	r0, r3
 800e108:	f7fd ff57 	bl	800bfba <get_fat>
 800e10c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800e10e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e110:	2b01      	cmp	r3, #1
 800e112:	d802      	bhi.n	800e11a <f_open+0x2de>
 800e114:	2302      	movs	r3, #2
 800e116:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e11a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e11c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e120:	d102      	bne.n	800e128 <f_open+0x2ec>
 800e122:	2301      	movs	r3, #1
 800e124:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e128:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e12a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e12c:	1ad3      	subs	r3, r2, r3
 800e12e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e130:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e134:	2b00      	cmp	r3, #0
 800e136:	d103      	bne.n	800e140 <f_open+0x304>
 800e138:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e13a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e13c:	429a      	cmp	r2, r3
 800e13e:	d8e0      	bhi.n	800e102 <f_open+0x2c6>
				}
				fp->clust = clst;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e144:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e146:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d127      	bne.n	800e19e <f_open+0x362>
 800e14e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e154:	2b00      	cmp	r3, #0
 800e156:	d022      	beq.n	800e19e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e158:	697b      	ldr	r3, [r7, #20]
 800e15a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e15c:	4618      	mov	r0, r3
 800e15e:	f7fd ff0d 	bl	800bf7c <clust2sect>
 800e162:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e166:	2b00      	cmp	r3, #0
 800e168:	d103      	bne.n	800e172 <f_open+0x336>
						res = FR_INT_ERR;
 800e16a:	2302      	movs	r3, #2
 800e16c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e170:	e015      	b.n	800e19e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e174:	0a5a      	lsrs	r2, r3, #9
 800e176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e178:	441a      	add	r2, r3
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e17e:	697b      	ldr	r3, [r7, #20]
 800e180:	7858      	ldrb	r0, [r3, #1]
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	6a1a      	ldr	r2, [r3, #32]
 800e18c:	2301      	movs	r3, #1
 800e18e:	f7fd fb4b 	bl	800b828 <disk_read>
 800e192:	4603      	mov	r3, r0
 800e194:	2b00      	cmp	r3, #0
 800e196:	d002      	beq.n	800e19e <f_open+0x362>
 800e198:	2301      	movs	r3, #1
 800e19a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e19e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d002      	beq.n	800e1ac <f_open+0x370>
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e1ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	3768      	adds	r7, #104	; 0x68
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	bd80      	pop	{r7, pc}

0800e1b8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b08e      	sub	sp, #56	; 0x38
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	60f8      	str	r0, [r7, #12]
 800e1c0:	60b9      	str	r1, [r7, #8]
 800e1c2:	607a      	str	r2, [r7, #4]
 800e1c4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e1c6:	68bb      	ldr	r3, [r7, #8]
 800e1c8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	f107 0214 	add.w	r2, r7, #20
 800e1d6:	4611      	mov	r1, r2
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f7ff fdb3 	bl	800dd44 <validate>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e1e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d107      	bne.n	800e1fc <f_read+0x44>
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	7d5b      	ldrb	r3, [r3, #21]
 800e1f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e1f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d002      	beq.n	800e202 <f_read+0x4a>
 800e1fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e200:	e115      	b.n	800e42e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	7d1b      	ldrb	r3, [r3, #20]
 800e206:	f003 0301 	and.w	r3, r3, #1
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d101      	bne.n	800e212 <f_read+0x5a>
 800e20e:	2307      	movs	r3, #7
 800e210:	e10d      	b.n	800e42e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	68da      	ldr	r2, [r3, #12]
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	699b      	ldr	r3, [r3, #24]
 800e21a:	1ad3      	subs	r3, r2, r3
 800e21c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e21e:	687a      	ldr	r2, [r7, #4]
 800e220:	6a3b      	ldr	r3, [r7, #32]
 800e222:	429a      	cmp	r2, r3
 800e224:	f240 80fe 	bls.w	800e424 <f_read+0x26c>
 800e228:	6a3b      	ldr	r3, [r7, #32]
 800e22a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e22c:	e0fa      	b.n	800e424 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	699b      	ldr	r3, [r3, #24]
 800e232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e236:	2b00      	cmp	r3, #0
 800e238:	f040 80c6 	bne.w	800e3c8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	699b      	ldr	r3, [r3, #24]
 800e240:	0a5b      	lsrs	r3, r3, #9
 800e242:	697a      	ldr	r2, [r7, #20]
 800e244:	8952      	ldrh	r2, [r2, #10]
 800e246:	3a01      	subs	r2, #1
 800e248:	4013      	ands	r3, r2
 800e24a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e24c:	69fb      	ldr	r3, [r7, #28]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d12f      	bne.n	800e2b2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	699b      	ldr	r3, [r3, #24]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d103      	bne.n	800e262 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	689b      	ldr	r3, [r3, #8]
 800e25e:	633b      	str	r3, [r7, #48]	; 0x30
 800e260:	e013      	b.n	800e28a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e266:	2b00      	cmp	r3, #0
 800e268:	d007      	beq.n	800e27a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	699b      	ldr	r3, [r3, #24]
 800e26e:	4619      	mov	r1, r3
 800e270:	68f8      	ldr	r0, [r7, #12]
 800e272:	f7fe f931 	bl	800c4d8 <clmt_clust>
 800e276:	6338      	str	r0, [r7, #48]	; 0x30
 800e278:	e007      	b.n	800e28a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e27a:	68fa      	ldr	r2, [r7, #12]
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	69db      	ldr	r3, [r3, #28]
 800e280:	4619      	mov	r1, r3
 800e282:	4610      	mov	r0, r2
 800e284:	f7fd fe99 	bl	800bfba <get_fat>
 800e288:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e28c:	2b01      	cmp	r3, #1
 800e28e:	d804      	bhi.n	800e29a <f_read+0xe2>
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	2202      	movs	r2, #2
 800e294:	755a      	strb	r2, [r3, #21]
 800e296:	2302      	movs	r3, #2
 800e298:	e0c9      	b.n	800e42e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e29c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2a0:	d104      	bne.n	800e2ac <f_read+0xf4>
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	2201      	movs	r2, #1
 800e2a6:	755a      	strb	r2, [r3, #21]
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	e0c0      	b.n	800e42e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2b0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e2b2:	697a      	ldr	r2, [r7, #20]
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	69db      	ldr	r3, [r3, #28]
 800e2b8:	4619      	mov	r1, r3
 800e2ba:	4610      	mov	r0, r2
 800e2bc:	f7fd fe5e 	bl	800bf7c <clust2sect>
 800e2c0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e2c2:	69bb      	ldr	r3, [r7, #24]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d104      	bne.n	800e2d2 <f_read+0x11a>
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	2202      	movs	r2, #2
 800e2cc:	755a      	strb	r2, [r3, #21]
 800e2ce:	2302      	movs	r3, #2
 800e2d0:	e0ad      	b.n	800e42e <f_read+0x276>
			sect += csect;
 800e2d2:	69ba      	ldr	r2, [r7, #24]
 800e2d4:	69fb      	ldr	r3, [r7, #28]
 800e2d6:	4413      	add	r3, r2
 800e2d8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	0a5b      	lsrs	r3, r3, #9
 800e2de:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d039      	beq.n	800e35a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e2e6:	69fa      	ldr	r2, [r7, #28]
 800e2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ea:	4413      	add	r3, r2
 800e2ec:	697a      	ldr	r2, [r7, #20]
 800e2ee:	8952      	ldrh	r2, [r2, #10]
 800e2f0:	4293      	cmp	r3, r2
 800e2f2:	d905      	bls.n	800e300 <f_read+0x148>
					cc = fs->csize - csect;
 800e2f4:	697b      	ldr	r3, [r7, #20]
 800e2f6:	895b      	ldrh	r3, [r3, #10]
 800e2f8:	461a      	mov	r2, r3
 800e2fa:	69fb      	ldr	r3, [r7, #28]
 800e2fc:	1ad3      	subs	r3, r2, r3
 800e2fe:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e300:	697b      	ldr	r3, [r7, #20]
 800e302:	7858      	ldrb	r0, [r3, #1]
 800e304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e306:	69ba      	ldr	r2, [r7, #24]
 800e308:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e30a:	f7fd fa8d 	bl	800b828 <disk_read>
 800e30e:	4603      	mov	r3, r0
 800e310:	2b00      	cmp	r3, #0
 800e312:	d004      	beq.n	800e31e <f_read+0x166>
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	2201      	movs	r2, #1
 800e318:	755a      	strb	r2, [r3, #21]
 800e31a:	2301      	movs	r3, #1
 800e31c:	e087      	b.n	800e42e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	7d1b      	ldrb	r3, [r3, #20]
 800e322:	b25b      	sxtb	r3, r3
 800e324:	2b00      	cmp	r3, #0
 800e326:	da14      	bge.n	800e352 <f_read+0x19a>
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	6a1a      	ldr	r2, [r3, #32]
 800e32c:	69bb      	ldr	r3, [r7, #24]
 800e32e:	1ad3      	subs	r3, r2, r3
 800e330:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e332:	429a      	cmp	r2, r3
 800e334:	d90d      	bls.n	800e352 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	6a1a      	ldr	r2, [r3, #32]
 800e33a:	69bb      	ldr	r3, [r7, #24]
 800e33c:	1ad3      	subs	r3, r2, r3
 800e33e:	025b      	lsls	r3, r3, #9
 800e340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e342:	18d0      	adds	r0, r2, r3
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	3330      	adds	r3, #48	; 0x30
 800e348:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e34c:	4619      	mov	r1, r3
 800e34e:	f7fd fb4b 	bl	800b9e8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e354:	025b      	lsls	r3, r3, #9
 800e356:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800e358:	e050      	b.n	800e3fc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	6a1b      	ldr	r3, [r3, #32]
 800e35e:	69ba      	ldr	r2, [r7, #24]
 800e360:	429a      	cmp	r2, r3
 800e362:	d02e      	beq.n	800e3c2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	7d1b      	ldrb	r3, [r3, #20]
 800e368:	b25b      	sxtb	r3, r3
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	da18      	bge.n	800e3a0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e36e:	697b      	ldr	r3, [r7, #20]
 800e370:	7858      	ldrb	r0, [r3, #1]
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	6a1a      	ldr	r2, [r3, #32]
 800e37c:	2301      	movs	r3, #1
 800e37e:	f7fd fa73 	bl	800b868 <disk_write>
 800e382:	4603      	mov	r3, r0
 800e384:	2b00      	cmp	r3, #0
 800e386:	d004      	beq.n	800e392 <f_read+0x1da>
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	2201      	movs	r2, #1
 800e38c:	755a      	strb	r2, [r3, #21]
 800e38e:	2301      	movs	r3, #1
 800e390:	e04d      	b.n	800e42e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	7d1b      	ldrb	r3, [r3, #20]
 800e396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e39a:	b2da      	uxtb	r2, r3
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e3a0:	697b      	ldr	r3, [r7, #20]
 800e3a2:	7858      	ldrb	r0, [r3, #1]
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	69ba      	ldr	r2, [r7, #24]
 800e3ae:	f7fd fa3b 	bl	800b828 <disk_read>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d004      	beq.n	800e3c2 <f_read+0x20a>
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	2201      	movs	r2, #1
 800e3bc:	755a      	strb	r2, [r3, #21]
 800e3be:	2301      	movs	r3, #1
 800e3c0:	e035      	b.n	800e42e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	69ba      	ldr	r2, [r7, #24]
 800e3c6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	699b      	ldr	r3, [r3, #24]
 800e3cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3d0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e3d4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e3d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	429a      	cmp	r2, r3
 800e3dc:	d901      	bls.n	800e3e2 <f_read+0x22a>
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	699b      	ldr	r3, [r3, #24]
 800e3ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3f0:	4413      	add	r3, r2
 800e3f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e3f8:	f7fd faf6 	bl	800b9e8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e3fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e400:	4413      	add	r3, r2
 800e402:	627b      	str	r3, [r7, #36]	; 0x24
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	699a      	ldr	r2, [r3, #24]
 800e408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e40a:	441a      	add	r2, r3
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	619a      	str	r2, [r3, #24]
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	681a      	ldr	r2, [r3, #0]
 800e414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e416:	441a      	add	r2, r3
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	601a      	str	r2, [r3, #0]
 800e41c:	687a      	ldr	r2, [r7, #4]
 800e41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e420:	1ad3      	subs	r3, r2, r3
 800e422:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2b00      	cmp	r3, #0
 800e428:	f47f af01 	bne.w	800e22e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e42c:	2300      	movs	r3, #0
}
 800e42e:	4618      	mov	r0, r3
 800e430:	3738      	adds	r7, #56	; 0x38
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}

0800e436 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e436:	b580      	push	{r7, lr}
 800e438:	b086      	sub	sp, #24
 800e43a:	af00      	add	r7, sp, #0
 800e43c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f107 0208 	add.w	r2, r7, #8
 800e444:	4611      	mov	r1, r2
 800e446:	4618      	mov	r0, r3
 800e448:	f7ff fc7c 	bl	800dd44 <validate>
 800e44c:	4603      	mov	r3, r0
 800e44e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e450:	7dfb      	ldrb	r3, [r7, #23]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d168      	bne.n	800e528 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	7d1b      	ldrb	r3, [r3, #20]
 800e45a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d062      	beq.n	800e528 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	7d1b      	ldrb	r3, [r3, #20]
 800e466:	b25b      	sxtb	r3, r3
 800e468:	2b00      	cmp	r3, #0
 800e46a:	da15      	bge.n	800e498 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	7858      	ldrb	r0, [r3, #1]
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	6a1a      	ldr	r2, [r3, #32]
 800e47a:	2301      	movs	r3, #1
 800e47c:	f7fd f9f4 	bl	800b868 <disk_write>
 800e480:	4603      	mov	r3, r0
 800e482:	2b00      	cmp	r3, #0
 800e484:	d001      	beq.n	800e48a <f_sync+0x54>
 800e486:	2301      	movs	r3, #1
 800e488:	e04f      	b.n	800e52a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	7d1b      	ldrb	r3, [r3, #20]
 800e48e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e492:	b2da      	uxtb	r2, r3
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e498:	f7fa f876 	bl	8008588 <get_fattime>
 800e49c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e49e:	68ba      	ldr	r2, [r7, #8]
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4a4:	4619      	mov	r1, r3
 800e4a6:	4610      	mov	r0, r2
 800e4a8:	f7fd fccc 	bl	800be44 <move_window>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e4b0:	7dfb      	ldrb	r3, [r7, #23]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d138      	bne.n	800e528 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4ba:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	330b      	adds	r3, #11
 800e4c0:	781a      	ldrb	r2, [r3, #0]
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	330b      	adds	r3, #11
 800e4c6:	f042 0220 	orr.w	r2, r2, #32
 800e4ca:	b2d2      	uxtb	r2, r2
 800e4cc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	6818      	ldr	r0, [r3, #0]
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	689b      	ldr	r3, [r3, #8]
 800e4d6:	461a      	mov	r2, r3
 800e4d8:	68f9      	ldr	r1, [r7, #12]
 800e4da:	f7fe f9d7 	bl	800c88c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	f103 021c 	add.w	r2, r3, #28
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	68db      	ldr	r3, [r3, #12]
 800e4e8:	4619      	mov	r1, r3
 800e4ea:	4610      	mov	r0, r2
 800e4ec:	f7fd fa50 	bl	800b990 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	3316      	adds	r3, #22
 800e4f4:	6939      	ldr	r1, [r7, #16]
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f7fd fa4a 	bl	800b990 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	3312      	adds	r3, #18
 800e500:	2100      	movs	r1, #0
 800e502:	4618      	mov	r0, r3
 800e504:	f7fd fa29 	bl	800b95a <st_word>
					fs->wflag = 1;
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	2201      	movs	r2, #1
 800e50c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e50e:	68bb      	ldr	r3, [r7, #8]
 800e510:	4618      	mov	r0, r3
 800e512:	f7fd fcc5 	bl	800bea0 <sync_fs>
 800e516:	4603      	mov	r3, r0
 800e518:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	7d1b      	ldrb	r3, [r3, #20]
 800e51e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e522:	b2da      	uxtb	r2, r3
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e528:	7dfb      	ldrb	r3, [r7, #23]
}
 800e52a:	4618      	mov	r0, r3
 800e52c:	3718      	adds	r7, #24
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd80      	pop	{r7, pc}

0800e532 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e532:	b580      	push	{r7, lr}
 800e534:	b084      	sub	sp, #16
 800e536:	af00      	add	r7, sp, #0
 800e538:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f7ff ff7b 	bl	800e436 <f_sync>
 800e540:	4603      	mov	r3, r0
 800e542:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e544:	7bfb      	ldrb	r3, [r7, #15]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d118      	bne.n	800e57c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f107 0208 	add.w	r2, r7, #8
 800e550:	4611      	mov	r1, r2
 800e552:	4618      	mov	r0, r3
 800e554:	f7ff fbf6 	bl	800dd44 <validate>
 800e558:	4603      	mov	r3, r0
 800e55a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e55c:	7bfb      	ldrb	r3, [r7, #15]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d10c      	bne.n	800e57c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	691b      	ldr	r3, [r3, #16]
 800e566:	4618      	mov	r0, r3
 800e568:	f7fd fbc8 	bl	800bcfc <dec_lock>
 800e56c:	4603      	mov	r3, r0
 800e56e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e570:	7bfb      	ldrb	r3, [r7, #15]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d102      	bne.n	800e57c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	2200      	movs	r2, #0
 800e57a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e57c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e57e:	4618      	mov	r0, r3
 800e580:	3710      	adds	r7, #16
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}

0800e586 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800e586:	b580      	push	{r7, lr}
 800e588:	b090      	sub	sp, #64	; 0x40
 800e58a:	af00      	add	r7, sp, #0
 800e58c:	6078      	str	r0, [r7, #4]
 800e58e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f107 0208 	add.w	r2, r7, #8
 800e596:	4611      	mov	r1, r2
 800e598:	4618      	mov	r0, r3
 800e59a:	f7ff fbd3 	bl	800dd44 <validate>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800e5a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d103      	bne.n	800e5b4 <f_lseek+0x2e>
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	7d5b      	ldrb	r3, [r3, #21]
 800e5b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800e5b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d002      	beq.n	800e5c2 <f_lseek+0x3c>
 800e5bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e5c0:	e1e6      	b.n	800e990 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	f000 80d1 	beq.w	800e76e <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5d2:	d15a      	bne.n	800e68a <f_lseek+0x104>
			tbl = fp->cltbl;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5d8:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5dc:	1d1a      	adds	r2, r3, #4
 800e5de:	627a      	str	r2, [r7, #36]	; 0x24
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	617b      	str	r3, [r7, #20]
 800e5e4:	2302      	movs	r3, #2
 800e5e6:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	689b      	ldr	r3, [r3, #8]
 800e5ec:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800e5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d03a      	beq.n	800e66a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5f6:	613b      	str	r3, [r7, #16]
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5fe:	3302      	adds	r3, #2
 800e600:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800e602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e604:	60fb      	str	r3, [r7, #12]
 800e606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e608:	3301      	adds	r3, #1
 800e60a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e610:	4618      	mov	r0, r3
 800e612:	f7fd fcd2 	bl	800bfba <get_fat>
 800e616:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e61a:	2b01      	cmp	r3, #1
 800e61c:	d804      	bhi.n	800e628 <f_lseek+0xa2>
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2202      	movs	r2, #2
 800e622:	755a      	strb	r2, [r3, #21]
 800e624:	2302      	movs	r3, #2
 800e626:	e1b3      	b.n	800e990 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e62a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e62e:	d104      	bne.n	800e63a <f_lseek+0xb4>
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2201      	movs	r2, #1
 800e634:	755a      	strb	r2, [r3, #21]
 800e636:	2301      	movs	r3, #1
 800e638:	e1aa      	b.n	800e990 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	3301      	adds	r3, #1
 800e63e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e640:	429a      	cmp	r2, r3
 800e642:	d0de      	beq.n	800e602 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800e644:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e646:	697b      	ldr	r3, [r7, #20]
 800e648:	429a      	cmp	r2, r3
 800e64a:	d809      	bhi.n	800e660 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800e64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e64e:	1d1a      	adds	r2, r3, #4
 800e650:	627a      	str	r2, [r7, #36]	; 0x24
 800e652:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e654:	601a      	str	r2, [r3, #0]
 800e656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e658:	1d1a      	adds	r2, r3, #4
 800e65a:	627a      	str	r2, [r7, #36]	; 0x24
 800e65c:	693a      	ldr	r2, [r7, #16]
 800e65e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	699b      	ldr	r3, [r3, #24]
 800e664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e666:	429a      	cmp	r2, r3
 800e668:	d3c4      	bcc.n	800e5f4 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e66e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e670:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800e672:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	429a      	cmp	r2, r3
 800e678:	d803      	bhi.n	800e682 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800e67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e67c:	2200      	movs	r2, #0
 800e67e:	601a      	str	r2, [r3, #0]
 800e680:	e184      	b.n	800e98c <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e682:	2311      	movs	r3, #17
 800e684:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800e688:	e180      	b.n	800e98c <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	68db      	ldr	r3, [r3, #12]
 800e68e:	683a      	ldr	r2, [r7, #0]
 800e690:	429a      	cmp	r2, r3
 800e692:	d902      	bls.n	800e69a <f_lseek+0x114>
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	68db      	ldr	r3, [r3, #12]
 800e698:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	683a      	ldr	r2, [r7, #0]
 800e69e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	f000 8172 	beq.w	800e98c <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	3b01      	subs	r3, #1
 800e6ac:	4619      	mov	r1, r3
 800e6ae:	6878      	ldr	r0, [r7, #4]
 800e6b0:	f7fd ff12 	bl	800c4d8 <clmt_clust>
 800e6b4:	4602      	mov	r2, r0
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800e6ba:	68ba      	ldr	r2, [r7, #8]
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	69db      	ldr	r3, [r3, #28]
 800e6c0:	4619      	mov	r1, r3
 800e6c2:	4610      	mov	r0, r2
 800e6c4:	f7fd fc5a 	bl	800bf7c <clust2sect>
 800e6c8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e6ca:	69bb      	ldr	r3, [r7, #24]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d104      	bne.n	800e6da <f_lseek+0x154>
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2202      	movs	r2, #2
 800e6d4:	755a      	strb	r2, [r3, #21]
 800e6d6:	2302      	movs	r3, #2
 800e6d8:	e15a      	b.n	800e990 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	3b01      	subs	r3, #1
 800e6de:	0a5b      	lsrs	r3, r3, #9
 800e6e0:	68ba      	ldr	r2, [r7, #8]
 800e6e2:	8952      	ldrh	r2, [r2, #10]
 800e6e4:	3a01      	subs	r2, #1
 800e6e6:	4013      	ands	r3, r2
 800e6e8:	69ba      	ldr	r2, [r7, #24]
 800e6ea:	4413      	add	r3, r2
 800e6ec:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	699b      	ldr	r3, [r3, #24]
 800e6f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	f000 8148 	beq.w	800e98c <f_lseek+0x406>
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	6a1b      	ldr	r3, [r3, #32]
 800e700:	69ba      	ldr	r2, [r7, #24]
 800e702:	429a      	cmp	r2, r3
 800e704:	f000 8142 	beq.w	800e98c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	7d1b      	ldrb	r3, [r3, #20]
 800e70c:	b25b      	sxtb	r3, r3
 800e70e:	2b00      	cmp	r3, #0
 800e710:	da18      	bge.n	800e744 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	7858      	ldrb	r0, [r3, #1]
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	6a1a      	ldr	r2, [r3, #32]
 800e720:	2301      	movs	r3, #1
 800e722:	f7fd f8a1 	bl	800b868 <disk_write>
 800e726:	4603      	mov	r3, r0
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d004      	beq.n	800e736 <f_lseek+0x1b0>
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2201      	movs	r2, #1
 800e730:	755a      	strb	r2, [r3, #21]
 800e732:	2301      	movs	r3, #1
 800e734:	e12c      	b.n	800e990 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	7d1b      	ldrb	r3, [r3, #20]
 800e73a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e73e:	b2da      	uxtb	r2, r3
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800e744:	68bb      	ldr	r3, [r7, #8]
 800e746:	7858      	ldrb	r0, [r3, #1]
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e74e:	2301      	movs	r3, #1
 800e750:	69ba      	ldr	r2, [r7, #24]
 800e752:	f7fd f869 	bl	800b828 <disk_read>
 800e756:	4603      	mov	r3, r0
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d004      	beq.n	800e766 <f_lseek+0x1e0>
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2201      	movs	r2, #1
 800e760:	755a      	strb	r2, [r3, #21]
 800e762:	2301      	movs	r3, #1
 800e764:	e114      	b.n	800e990 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	69ba      	ldr	r2, [r7, #24]
 800e76a:	621a      	str	r2, [r3, #32]
 800e76c:	e10e      	b.n	800e98c <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	68db      	ldr	r3, [r3, #12]
 800e772:	683a      	ldr	r2, [r7, #0]
 800e774:	429a      	cmp	r2, r3
 800e776:	d908      	bls.n	800e78a <f_lseek+0x204>
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	7d1b      	ldrb	r3, [r3, #20]
 800e77c:	f003 0302 	and.w	r3, r3, #2
 800e780:	2b00      	cmp	r3, #0
 800e782:	d102      	bne.n	800e78a <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	68db      	ldr	r3, [r3, #12]
 800e788:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	699b      	ldr	r3, [r3, #24]
 800e78e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800e790:	2300      	movs	r3, #0
 800e792:	637b      	str	r3, [r7, #52]	; 0x34
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e798:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	f000 80a7 	beq.w	800e8f0 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	895b      	ldrh	r3, [r3, #10]
 800e7a6:	025b      	lsls	r3, r3, #9
 800e7a8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800e7aa:	6a3b      	ldr	r3, [r7, #32]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d01b      	beq.n	800e7e8 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	1e5a      	subs	r2, r3, #1
 800e7b4:	69fb      	ldr	r3, [r7, #28]
 800e7b6:	fbb2 f2f3 	udiv	r2, r2, r3
 800e7ba:	6a3b      	ldr	r3, [r7, #32]
 800e7bc:	1e59      	subs	r1, r3, #1
 800e7be:	69fb      	ldr	r3, [r7, #28]
 800e7c0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800e7c4:	429a      	cmp	r2, r3
 800e7c6:	d30f      	bcc.n	800e7e8 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800e7c8:	6a3b      	ldr	r3, [r7, #32]
 800e7ca:	1e5a      	subs	r2, r3, #1
 800e7cc:	69fb      	ldr	r3, [r7, #28]
 800e7ce:	425b      	negs	r3, r3
 800e7d0:	401a      	ands	r2, r3
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	699b      	ldr	r3, [r3, #24]
 800e7da:	683a      	ldr	r2, [r7, #0]
 800e7dc:	1ad3      	subs	r3, r2, r3
 800e7de:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	69db      	ldr	r3, [r3, #28]
 800e7e4:	63bb      	str	r3, [r7, #56]	; 0x38
 800e7e6:	e022      	b.n	800e82e <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	689b      	ldr	r3, [r3, #8]
 800e7ec:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800e7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d119      	bne.n	800e828 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2100      	movs	r1, #0
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f7fd fdd5 	bl	800c3a8 <create_chain>
 800e7fe:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e802:	2b01      	cmp	r3, #1
 800e804:	d104      	bne.n	800e810 <f_lseek+0x28a>
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	2202      	movs	r2, #2
 800e80a:	755a      	strb	r2, [r3, #21]
 800e80c:	2302      	movs	r3, #2
 800e80e:	e0bf      	b.n	800e990 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e812:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e816:	d104      	bne.n	800e822 <f_lseek+0x29c>
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2201      	movs	r2, #1
 800e81c:	755a      	strb	r2, [r3, #21]
 800e81e:	2301      	movs	r3, #1
 800e820:	e0b6      	b.n	800e990 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e826:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e82c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800e82e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e830:	2b00      	cmp	r3, #0
 800e832:	d05d      	beq.n	800e8f0 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800e834:	e03a      	b.n	800e8ac <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800e836:	683a      	ldr	r2, [r7, #0]
 800e838:	69fb      	ldr	r3, [r7, #28]
 800e83a:	1ad3      	subs	r3, r2, r3
 800e83c:	603b      	str	r3, [r7, #0]
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	699a      	ldr	r2, [r3, #24]
 800e842:	69fb      	ldr	r3, [r7, #28]
 800e844:	441a      	add	r2, r3
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	7d1b      	ldrb	r3, [r3, #20]
 800e84e:	f003 0302 	and.w	r3, r3, #2
 800e852:	2b00      	cmp	r3, #0
 800e854:	d00b      	beq.n	800e86e <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e85a:	4618      	mov	r0, r3
 800e85c:	f7fd fda4 	bl	800c3a8 <create_chain>
 800e860:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800e862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e864:	2b00      	cmp	r3, #0
 800e866:	d108      	bne.n	800e87a <f_lseek+0x2f4>
							ofs = 0; break;
 800e868:	2300      	movs	r3, #0
 800e86a:	603b      	str	r3, [r7, #0]
 800e86c:	e022      	b.n	800e8b4 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e872:	4618      	mov	r0, r3
 800e874:	f7fd fba1 	bl	800bfba <get_fat>
 800e878:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e87c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e880:	d104      	bne.n	800e88c <f_lseek+0x306>
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2201      	movs	r2, #1
 800e886:	755a      	strb	r2, [r3, #21]
 800e888:	2301      	movs	r3, #1
 800e88a:	e081      	b.n	800e990 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800e88c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e88e:	2b01      	cmp	r3, #1
 800e890:	d904      	bls.n	800e89c <f_lseek+0x316>
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	699b      	ldr	r3, [r3, #24]
 800e896:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e898:	429a      	cmp	r2, r3
 800e89a:	d304      	bcc.n	800e8a6 <f_lseek+0x320>
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2202      	movs	r2, #2
 800e8a0:	755a      	strb	r2, [r3, #21]
 800e8a2:	2302      	movs	r3, #2
 800e8a4:	e074      	b.n	800e990 <f_lseek+0x40a>
					fp->clust = clst;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e8aa:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800e8ac:	683a      	ldr	r2, [r7, #0]
 800e8ae:	69fb      	ldr	r3, [r7, #28]
 800e8b0:	429a      	cmp	r2, r3
 800e8b2:	d8c0      	bhi.n	800e836 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	699a      	ldr	r2, [r3, #24]
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	441a      	add	r2, r3
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d012      	beq.n	800e8f0 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f7fd fb54 	bl	800bf7c <clust2sect>
 800e8d4:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800e8d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d104      	bne.n	800e8e6 <f_lseek+0x360>
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2202      	movs	r2, #2
 800e8e0:	755a      	strb	r2, [r3, #21]
 800e8e2:	2302      	movs	r3, #2
 800e8e4:	e054      	b.n	800e990 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	0a5b      	lsrs	r3, r3, #9
 800e8ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e8ec:	4413      	add	r3, r2
 800e8ee:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	699a      	ldr	r2, [r3, #24]
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	68db      	ldr	r3, [r3, #12]
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	d90a      	bls.n	800e912 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	699a      	ldr	r2, [r3, #24]
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	7d1b      	ldrb	r3, [r3, #20]
 800e908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e90c:	b2da      	uxtb	r2, r3
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	699b      	ldr	r3, [r3, #24]
 800e916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d036      	beq.n	800e98c <f_lseek+0x406>
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	6a1b      	ldr	r3, [r3, #32]
 800e922:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e924:	429a      	cmp	r2, r3
 800e926:	d031      	beq.n	800e98c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	7d1b      	ldrb	r3, [r3, #20]
 800e92c:	b25b      	sxtb	r3, r3
 800e92e:	2b00      	cmp	r3, #0
 800e930:	da18      	bge.n	800e964 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	7858      	ldrb	r0, [r3, #1]
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	6a1a      	ldr	r2, [r3, #32]
 800e940:	2301      	movs	r3, #1
 800e942:	f7fc ff91 	bl	800b868 <disk_write>
 800e946:	4603      	mov	r3, r0
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d004      	beq.n	800e956 <f_lseek+0x3d0>
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2201      	movs	r2, #1
 800e950:	755a      	strb	r2, [r3, #21]
 800e952:	2301      	movs	r3, #1
 800e954:	e01c      	b.n	800e990 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	7d1b      	ldrb	r3, [r3, #20]
 800e95a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e95e:	b2da      	uxtb	r2, r3
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e964:	68bb      	ldr	r3, [r7, #8]
 800e966:	7858      	ldrb	r0, [r3, #1]
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e96e:	2301      	movs	r3, #1
 800e970:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e972:	f7fc ff59 	bl	800b828 <disk_read>
 800e976:	4603      	mov	r3, r0
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d004      	beq.n	800e986 <f_lseek+0x400>
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2201      	movs	r2, #1
 800e980:	755a      	strb	r2, [r3, #21]
 800e982:	2301      	movs	r3, #1
 800e984:	e004      	b.n	800e990 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e98a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800e98c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800e990:	4618      	mov	r0, r3
 800e992:	3740      	adds	r7, #64	; 0x40
 800e994:	46bd      	mov	sp, r7
 800e996:	bd80      	pop	{r7, pc}

0800e998 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b086      	sub	sp, #24
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d101      	bne.n	800e9ac <f_opendir+0x14>
 800e9a8:	2309      	movs	r3, #9
 800e9aa:	e064      	b.n	800ea76 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800e9b0:	f107 010c 	add.w	r1, r7, #12
 800e9b4:	463b      	mov	r3, r7
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	f7fe ff73 	bl	800d8a4 <find_volume>
 800e9be:	4603      	mov	r3, r0
 800e9c0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e9c2:	7dfb      	ldrb	r3, [r7, #23]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d14f      	bne.n	800ea68 <f_opendir+0xd0>
		obj->fs = fs;
 800e9c8:	68fa      	ldr	r2, [r7, #12]
 800e9ca:	693b      	ldr	r3, [r7, #16]
 800e9cc:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	4619      	mov	r1, r3
 800e9d2:	6878      	ldr	r0, [r7, #4]
 800e9d4:	f7fe fe5a 	bl	800d68c <follow_path>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800e9dc:	7dfb      	ldrb	r3, [r7, #23]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d13d      	bne.n	800ea5e <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e9e8:	b25b      	sxtb	r3, r3
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	db12      	blt.n	800ea14 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800e9ee:	693b      	ldr	r3, [r7, #16]
 800e9f0:	799b      	ldrb	r3, [r3, #6]
 800e9f2:	f003 0310 	and.w	r3, r3, #16
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d00a      	beq.n	800ea10 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800e9fa:	68fa      	ldr	r2, [r7, #12]
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	6a1b      	ldr	r3, [r3, #32]
 800ea00:	4619      	mov	r1, r3
 800ea02:	4610      	mov	r0, r2
 800ea04:	f7fd ff23 	bl	800c84e <ld_clust>
 800ea08:	4602      	mov	r2, r0
 800ea0a:	693b      	ldr	r3, [r7, #16]
 800ea0c:	609a      	str	r2, [r3, #8]
 800ea0e:	e001      	b.n	800ea14 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800ea10:	2305      	movs	r3, #5
 800ea12:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800ea14:	7dfb      	ldrb	r3, [r7, #23]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d121      	bne.n	800ea5e <f_opendir+0xc6>
				obj->id = fs->id;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	88da      	ldrh	r2, [r3, #6]
 800ea1e:	693b      	ldr	r3, [r7, #16]
 800ea20:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800ea22:	2100      	movs	r1, #0
 800ea24:	6878      	ldr	r0, [r7, #4]
 800ea26:	f7fd fd8b 	bl	800c540 <dir_sdi>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800ea2e:	7dfb      	ldrb	r3, [r7, #23]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d114      	bne.n	800ea5e <f_opendir+0xc6>
					if (obj->sclust) {
 800ea34:	693b      	ldr	r3, [r7, #16]
 800ea36:	689b      	ldr	r3, [r3, #8]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d00d      	beq.n	800ea58 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800ea3c:	2100      	movs	r1, #0
 800ea3e:	6878      	ldr	r0, [r7, #4]
 800ea40:	f7fd f8ce 	bl	800bbe0 <inc_lock>
 800ea44:	4602      	mov	r2, r0
 800ea46:	693b      	ldr	r3, [r7, #16]
 800ea48:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800ea4a:	693b      	ldr	r3, [r7, #16]
 800ea4c:	691b      	ldr	r3, [r3, #16]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d105      	bne.n	800ea5e <f_opendir+0xc6>
 800ea52:	2312      	movs	r3, #18
 800ea54:	75fb      	strb	r3, [r7, #23]
 800ea56:	e002      	b.n	800ea5e <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800ea58:	693b      	ldr	r3, [r7, #16]
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800ea5e:	7dfb      	ldrb	r3, [r7, #23]
 800ea60:	2b04      	cmp	r3, #4
 800ea62:	d101      	bne.n	800ea68 <f_opendir+0xd0>
 800ea64:	2305      	movs	r3, #5
 800ea66:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800ea68:	7dfb      	ldrb	r3, [r7, #23]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d002      	beq.n	800ea74 <f_opendir+0xdc>
 800ea6e:	693b      	ldr	r3, [r7, #16]
 800ea70:	2200      	movs	r2, #0
 800ea72:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ea74:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	3718      	adds	r7, #24
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}

0800ea7e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800ea7e:	b580      	push	{r7, lr}
 800ea80:	b084      	sub	sp, #16
 800ea82:	af00      	add	r7, sp, #0
 800ea84:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	f107 0208 	add.w	r2, r7, #8
 800ea8c:	4611      	mov	r1, r2
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f7ff f958 	bl	800dd44 <validate>
 800ea94:	4603      	mov	r3, r0
 800ea96:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ea98:	7bfb      	ldrb	r3, [r7, #15]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d110      	bne.n	800eac0 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	691b      	ldr	r3, [r3, #16]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d006      	beq.n	800eab4 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	691b      	ldr	r3, [r3, #16]
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f7fd f926 	bl	800bcfc <dec_lock>
 800eab0:	4603      	mov	r3, r0
 800eab2:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800eab4:	7bfb      	ldrb	r3, [r7, #15]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d102      	bne.n	800eac0 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2200      	movs	r2, #0
 800eabe:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800eac0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3710      	adds	r7, #16
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}

0800eaca <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800eaca:	b580      	push	{r7, lr}
 800eacc:	b084      	sub	sp, #16
 800eace:	af00      	add	r7, sp, #0
 800ead0:	6078      	str	r0, [r7, #4]
 800ead2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f107 0208 	add.w	r2, r7, #8
 800eada:	4611      	mov	r1, r2
 800eadc:	4618      	mov	r0, r3
 800eade:	f7ff f931 	bl	800dd44 <validate>
 800eae2:	4603      	mov	r3, r0
 800eae4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800eae6:	7bfb      	ldrb	r3, [r7, #15]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d126      	bne.n	800eb3a <f_readdir+0x70>
		if (!fno) {
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d106      	bne.n	800eb00 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800eaf2:	2100      	movs	r1, #0
 800eaf4:	6878      	ldr	r0, [r7, #4]
 800eaf6:	f7fd fd23 	bl	800c540 <dir_sdi>
 800eafa:	4603      	mov	r3, r0
 800eafc:	73fb      	strb	r3, [r7, #15]
 800eafe:	e01c      	b.n	800eb3a <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800eb00:	2100      	movs	r1, #0
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f7fe f8cd 	bl	800cca2 <dir_read>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800eb0c:	7bfb      	ldrb	r3, [r7, #15]
 800eb0e:	2b04      	cmp	r3, #4
 800eb10:	d101      	bne.n	800eb16 <f_readdir+0x4c>
 800eb12:	2300      	movs	r3, #0
 800eb14:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800eb16:	7bfb      	ldrb	r3, [r7, #15]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d10e      	bne.n	800eb3a <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800eb1c:	6839      	ldr	r1, [r7, #0]
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f7fe fb1e 	bl	800d160 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800eb24:	2100      	movs	r1, #0
 800eb26:	6878      	ldr	r0, [r7, #4]
 800eb28:	f7fd fd85 	bl	800c636 <dir_next>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800eb30:	7bfb      	ldrb	r3, [r7, #15]
 800eb32:	2b04      	cmp	r3, #4
 800eb34:	d101      	bne.n	800eb3a <f_readdir+0x70>
 800eb36:	2300      	movs	r3, #0
 800eb38:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800eb3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	3710      	adds	r7, #16
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd80      	pop	{r7, pc}

0800eb44 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800eb44:	b480      	push	{r7}
 800eb46:	b087      	sub	sp, #28
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	60f8      	str	r0, [r7, #12]
 800eb4c:	60b9      	str	r1, [r7, #8]
 800eb4e:	4613      	mov	r3, r2
 800eb50:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800eb52:	2301      	movs	r3, #1
 800eb54:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800eb56:	2300      	movs	r3, #0
 800eb58:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800eb5a:	4b1f      	ldr	r3, [pc, #124]	; (800ebd8 <FATFS_LinkDriverEx+0x94>)
 800eb5c:	7a5b      	ldrb	r3, [r3, #9]
 800eb5e:	b2db      	uxtb	r3, r3
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d131      	bne.n	800ebc8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800eb64:	4b1c      	ldr	r3, [pc, #112]	; (800ebd8 <FATFS_LinkDriverEx+0x94>)
 800eb66:	7a5b      	ldrb	r3, [r3, #9]
 800eb68:	b2db      	uxtb	r3, r3
 800eb6a:	461a      	mov	r2, r3
 800eb6c:	4b1a      	ldr	r3, [pc, #104]	; (800ebd8 <FATFS_LinkDriverEx+0x94>)
 800eb6e:	2100      	movs	r1, #0
 800eb70:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800eb72:	4b19      	ldr	r3, [pc, #100]	; (800ebd8 <FATFS_LinkDriverEx+0x94>)
 800eb74:	7a5b      	ldrb	r3, [r3, #9]
 800eb76:	b2db      	uxtb	r3, r3
 800eb78:	4a17      	ldr	r2, [pc, #92]	; (800ebd8 <FATFS_LinkDriverEx+0x94>)
 800eb7a:	009b      	lsls	r3, r3, #2
 800eb7c:	4413      	add	r3, r2
 800eb7e:	68fa      	ldr	r2, [r7, #12]
 800eb80:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800eb82:	4b15      	ldr	r3, [pc, #84]	; (800ebd8 <FATFS_LinkDriverEx+0x94>)
 800eb84:	7a5b      	ldrb	r3, [r3, #9]
 800eb86:	b2db      	uxtb	r3, r3
 800eb88:	461a      	mov	r2, r3
 800eb8a:	4b13      	ldr	r3, [pc, #76]	; (800ebd8 <FATFS_LinkDriverEx+0x94>)
 800eb8c:	4413      	add	r3, r2
 800eb8e:	79fa      	ldrb	r2, [r7, #7]
 800eb90:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800eb92:	4b11      	ldr	r3, [pc, #68]	; (800ebd8 <FATFS_LinkDriverEx+0x94>)
 800eb94:	7a5b      	ldrb	r3, [r3, #9]
 800eb96:	b2db      	uxtb	r3, r3
 800eb98:	1c5a      	adds	r2, r3, #1
 800eb9a:	b2d1      	uxtb	r1, r2
 800eb9c:	4a0e      	ldr	r2, [pc, #56]	; (800ebd8 <FATFS_LinkDriverEx+0x94>)
 800eb9e:	7251      	strb	r1, [r2, #9]
 800eba0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800eba2:	7dbb      	ldrb	r3, [r7, #22]
 800eba4:	3330      	adds	r3, #48	; 0x30
 800eba6:	b2da      	uxtb	r2, r3
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	3301      	adds	r3, #1
 800ebb0:	223a      	movs	r2, #58	; 0x3a
 800ebb2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ebb4:	68bb      	ldr	r3, [r7, #8]
 800ebb6:	3302      	adds	r3, #2
 800ebb8:	222f      	movs	r2, #47	; 0x2f
 800ebba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ebbc:	68bb      	ldr	r3, [r7, #8]
 800ebbe:	3303      	adds	r3, #3
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ebc8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	371c      	adds	r7, #28
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd4:	4770      	bx	lr
 800ebd6:	bf00      	nop
 800ebd8:	20001d8c 	.word	0x20001d8c

0800ebdc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b082      	sub	sp, #8
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
 800ebe4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	6839      	ldr	r1, [r7, #0]
 800ebea:	6878      	ldr	r0, [r7, #4]
 800ebec:	f7ff ffaa 	bl	800eb44 <FATFS_LinkDriverEx>
 800ebf0:	4603      	mov	r3, r0
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3708      	adds	r7, #8
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}
	...

0800ebfc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	b085      	sub	sp, #20
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	4603      	mov	r3, r0
 800ec04:	6039      	str	r1, [r7, #0]
 800ec06:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ec08:	88fb      	ldrh	r3, [r7, #6]
 800ec0a:	2b7f      	cmp	r3, #127	; 0x7f
 800ec0c:	d802      	bhi.n	800ec14 <ff_convert+0x18>
		c = chr;
 800ec0e:	88fb      	ldrh	r3, [r7, #6]
 800ec10:	81fb      	strh	r3, [r7, #14]
 800ec12:	e025      	b.n	800ec60 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d00b      	beq.n	800ec32 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ec1a:	88fb      	ldrh	r3, [r7, #6]
 800ec1c:	2bff      	cmp	r3, #255	; 0xff
 800ec1e:	d805      	bhi.n	800ec2c <ff_convert+0x30>
 800ec20:	88fb      	ldrh	r3, [r7, #6]
 800ec22:	3b80      	subs	r3, #128	; 0x80
 800ec24:	4a12      	ldr	r2, [pc, #72]	; (800ec70 <ff_convert+0x74>)
 800ec26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec2a:	e000      	b.n	800ec2e <ff_convert+0x32>
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	81fb      	strh	r3, [r7, #14]
 800ec30:	e016      	b.n	800ec60 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ec32:	2300      	movs	r3, #0
 800ec34:	81fb      	strh	r3, [r7, #14]
 800ec36:	e009      	b.n	800ec4c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ec38:	89fb      	ldrh	r3, [r7, #14]
 800ec3a:	4a0d      	ldr	r2, [pc, #52]	; (800ec70 <ff_convert+0x74>)
 800ec3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec40:	88fa      	ldrh	r2, [r7, #6]
 800ec42:	429a      	cmp	r2, r3
 800ec44:	d006      	beq.n	800ec54 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ec46:	89fb      	ldrh	r3, [r7, #14]
 800ec48:	3301      	adds	r3, #1
 800ec4a:	81fb      	strh	r3, [r7, #14]
 800ec4c:	89fb      	ldrh	r3, [r7, #14]
 800ec4e:	2b7f      	cmp	r3, #127	; 0x7f
 800ec50:	d9f2      	bls.n	800ec38 <ff_convert+0x3c>
 800ec52:	e000      	b.n	800ec56 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ec54:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ec56:	89fb      	ldrh	r3, [r7, #14]
 800ec58:	3380      	adds	r3, #128	; 0x80
 800ec5a:	b29b      	uxth	r3, r3
 800ec5c:	b2db      	uxtb	r3, r3
 800ec5e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ec60:	89fb      	ldrh	r3, [r7, #14]
}
 800ec62:	4618      	mov	r0, r3
 800ec64:	3714      	adds	r7, #20
 800ec66:	46bd      	mov	sp, r7
 800ec68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6c:	4770      	bx	lr
 800ec6e:	bf00      	nop
 800ec70:	0800f890 	.word	0x0800f890

0800ec74 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ec74:	b480      	push	{r7}
 800ec76:	b087      	sub	sp, #28
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ec7e:	88fb      	ldrh	r3, [r7, #6]
 800ec80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec84:	d201      	bcs.n	800ec8a <ff_wtoupper+0x16>
 800ec86:	4b3e      	ldr	r3, [pc, #248]	; (800ed80 <ff_wtoupper+0x10c>)
 800ec88:	e000      	b.n	800ec8c <ff_wtoupper+0x18>
 800ec8a:	4b3e      	ldr	r3, [pc, #248]	; (800ed84 <ff_wtoupper+0x110>)
 800ec8c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ec8e:	697b      	ldr	r3, [r7, #20]
 800ec90:	1c9a      	adds	r2, r3, #2
 800ec92:	617a      	str	r2, [r7, #20]
 800ec94:	881b      	ldrh	r3, [r3, #0]
 800ec96:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ec98:	8a7b      	ldrh	r3, [r7, #18]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d068      	beq.n	800ed70 <ff_wtoupper+0xfc>
 800ec9e:	88fa      	ldrh	r2, [r7, #6]
 800eca0:	8a7b      	ldrh	r3, [r7, #18]
 800eca2:	429a      	cmp	r2, r3
 800eca4:	d364      	bcc.n	800ed70 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800eca6:	697b      	ldr	r3, [r7, #20]
 800eca8:	1c9a      	adds	r2, r3, #2
 800ecaa:	617a      	str	r2, [r7, #20]
 800ecac:	881b      	ldrh	r3, [r3, #0]
 800ecae:	823b      	strh	r3, [r7, #16]
 800ecb0:	8a3b      	ldrh	r3, [r7, #16]
 800ecb2:	0a1b      	lsrs	r3, r3, #8
 800ecb4:	81fb      	strh	r3, [r7, #14]
 800ecb6:	8a3b      	ldrh	r3, [r7, #16]
 800ecb8:	b2db      	uxtb	r3, r3
 800ecba:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ecbc:	88fa      	ldrh	r2, [r7, #6]
 800ecbe:	8a79      	ldrh	r1, [r7, #18]
 800ecc0:	8a3b      	ldrh	r3, [r7, #16]
 800ecc2:	440b      	add	r3, r1
 800ecc4:	429a      	cmp	r2, r3
 800ecc6:	da49      	bge.n	800ed5c <ff_wtoupper+0xe8>
			switch (cmd) {
 800ecc8:	89fb      	ldrh	r3, [r7, #14]
 800ecca:	2b08      	cmp	r3, #8
 800eccc:	d84f      	bhi.n	800ed6e <ff_wtoupper+0xfa>
 800ecce:	a201      	add	r2, pc, #4	; (adr r2, 800ecd4 <ff_wtoupper+0x60>)
 800ecd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecd4:	0800ecf9 	.word	0x0800ecf9
 800ecd8:	0800ed0b 	.word	0x0800ed0b
 800ecdc:	0800ed21 	.word	0x0800ed21
 800ece0:	0800ed29 	.word	0x0800ed29
 800ece4:	0800ed31 	.word	0x0800ed31
 800ece8:	0800ed39 	.word	0x0800ed39
 800ecec:	0800ed41 	.word	0x0800ed41
 800ecf0:	0800ed49 	.word	0x0800ed49
 800ecf4:	0800ed51 	.word	0x0800ed51
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ecf8:	88fa      	ldrh	r2, [r7, #6]
 800ecfa:	8a7b      	ldrh	r3, [r7, #18]
 800ecfc:	1ad3      	subs	r3, r2, r3
 800ecfe:	005b      	lsls	r3, r3, #1
 800ed00:	697a      	ldr	r2, [r7, #20]
 800ed02:	4413      	add	r3, r2
 800ed04:	881b      	ldrh	r3, [r3, #0]
 800ed06:	80fb      	strh	r3, [r7, #6]
 800ed08:	e027      	b.n	800ed5a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ed0a:	88fa      	ldrh	r2, [r7, #6]
 800ed0c:	8a7b      	ldrh	r3, [r7, #18]
 800ed0e:	1ad3      	subs	r3, r2, r3
 800ed10:	b29b      	uxth	r3, r3
 800ed12:	f003 0301 	and.w	r3, r3, #1
 800ed16:	b29b      	uxth	r3, r3
 800ed18:	88fa      	ldrh	r2, [r7, #6]
 800ed1a:	1ad3      	subs	r3, r2, r3
 800ed1c:	80fb      	strh	r3, [r7, #6]
 800ed1e:	e01c      	b.n	800ed5a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800ed20:	88fb      	ldrh	r3, [r7, #6]
 800ed22:	3b10      	subs	r3, #16
 800ed24:	80fb      	strh	r3, [r7, #6]
 800ed26:	e018      	b.n	800ed5a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ed28:	88fb      	ldrh	r3, [r7, #6]
 800ed2a:	3b20      	subs	r3, #32
 800ed2c:	80fb      	strh	r3, [r7, #6]
 800ed2e:	e014      	b.n	800ed5a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ed30:	88fb      	ldrh	r3, [r7, #6]
 800ed32:	3b30      	subs	r3, #48	; 0x30
 800ed34:	80fb      	strh	r3, [r7, #6]
 800ed36:	e010      	b.n	800ed5a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ed38:	88fb      	ldrh	r3, [r7, #6]
 800ed3a:	3b1a      	subs	r3, #26
 800ed3c:	80fb      	strh	r3, [r7, #6]
 800ed3e:	e00c      	b.n	800ed5a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ed40:	88fb      	ldrh	r3, [r7, #6]
 800ed42:	3308      	adds	r3, #8
 800ed44:	80fb      	strh	r3, [r7, #6]
 800ed46:	e008      	b.n	800ed5a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ed48:	88fb      	ldrh	r3, [r7, #6]
 800ed4a:	3b50      	subs	r3, #80	; 0x50
 800ed4c:	80fb      	strh	r3, [r7, #6]
 800ed4e:	e004      	b.n	800ed5a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ed50:	88fb      	ldrh	r3, [r7, #6]
 800ed52:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800ed56:	80fb      	strh	r3, [r7, #6]
 800ed58:	bf00      	nop
			}
			break;
 800ed5a:	e008      	b.n	800ed6e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ed5c:	89fb      	ldrh	r3, [r7, #14]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d195      	bne.n	800ec8e <ff_wtoupper+0x1a>
 800ed62:	8a3b      	ldrh	r3, [r7, #16]
 800ed64:	005b      	lsls	r3, r3, #1
 800ed66:	697a      	ldr	r2, [r7, #20]
 800ed68:	4413      	add	r3, r2
 800ed6a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ed6c:	e78f      	b.n	800ec8e <ff_wtoupper+0x1a>
			break;
 800ed6e:	bf00      	nop
	}

	return chr;
 800ed70:	88fb      	ldrh	r3, [r7, #6]
}
 800ed72:	4618      	mov	r0, r3
 800ed74:	371c      	adds	r7, #28
 800ed76:	46bd      	mov	sp, r7
 800ed78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7c:	4770      	bx	lr
 800ed7e:	bf00      	nop
 800ed80:	0800f990 	.word	0x0800f990
 800ed84:	0800fb84 	.word	0x0800fb84

0800ed88 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ed8c:	2201      	movs	r2, #1
 800ed8e:	490e      	ldr	r1, [pc, #56]	; (800edc8 <MX_USB_HOST_Init+0x40>)
 800ed90:	480e      	ldr	r0, [pc, #56]	; (800edcc <MX_USB_HOST_Init+0x44>)
 800ed92:	f7fb f8b5 	bl	8009f00 <USBH_Init>
 800ed96:	4603      	mov	r3, r0
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d001      	beq.n	800eda0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ed9c:	f7f2 fcf2 	bl	8001784 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800eda0:	490b      	ldr	r1, [pc, #44]	; (800edd0 <MX_USB_HOST_Init+0x48>)
 800eda2:	480a      	ldr	r0, [pc, #40]	; (800edcc <MX_USB_HOST_Init+0x44>)
 800eda4:	f7fb f93a 	bl	800a01c <USBH_RegisterClass>
 800eda8:	4603      	mov	r3, r0
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d001      	beq.n	800edb2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800edae:	f7f2 fce9 	bl	8001784 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800edb2:	4806      	ldr	r0, [pc, #24]	; (800edcc <MX_USB_HOST_Init+0x44>)
 800edb4:	f7fb f9be 	bl	800a134 <USBH_Start>
 800edb8:	4603      	mov	r3, r0
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d001      	beq.n	800edc2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800edbe:	f7f2 fce1 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800edc2:	bf00      	nop
 800edc4:	bd80      	pop	{r7, pc}
 800edc6:	bf00      	nop
 800edc8:	0800ede9 	.word	0x0800ede9
 800edcc:	20001d98 	.word	0x20001d98
 800edd0:	20000048 	.word	0x20000048

0800edd4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800edd8:	4802      	ldr	r0, [pc, #8]	; (800ede4 <MX_USB_HOST_Process+0x10>)
 800edda:	f7fb f9bb 	bl	800a154 <USBH_Process>
}
 800edde:	bf00      	nop
 800ede0:	bd80      	pop	{r7, pc}
 800ede2:	bf00      	nop
 800ede4:	20001d98 	.word	0x20001d98

0800ede8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ede8:	b480      	push	{r7}
 800edea:	b083      	sub	sp, #12
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
 800edf0:	460b      	mov	r3, r1
 800edf2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800edf4:	78fb      	ldrb	r3, [r7, #3]
 800edf6:	3b01      	subs	r3, #1
 800edf8:	2b04      	cmp	r3, #4
 800edfa:	d819      	bhi.n	800ee30 <USBH_UserProcess+0x48>
 800edfc:	a201      	add	r2, pc, #4	; (adr r2, 800ee04 <USBH_UserProcess+0x1c>)
 800edfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee02:	bf00      	nop
 800ee04:	0800ee31 	.word	0x0800ee31
 800ee08:	0800ee21 	.word	0x0800ee21
 800ee0c:	0800ee31 	.word	0x0800ee31
 800ee10:	0800ee29 	.word	0x0800ee29
 800ee14:	0800ee19 	.word	0x0800ee19
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ee18:	4b09      	ldr	r3, [pc, #36]	; (800ee40 <USBH_UserProcess+0x58>)
 800ee1a:	2203      	movs	r2, #3
 800ee1c:	701a      	strb	r2, [r3, #0]
  break;
 800ee1e:	e008      	b.n	800ee32 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ee20:	4b07      	ldr	r3, [pc, #28]	; (800ee40 <USBH_UserProcess+0x58>)
 800ee22:	2202      	movs	r2, #2
 800ee24:	701a      	strb	r2, [r3, #0]
  break;
 800ee26:	e004      	b.n	800ee32 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ee28:	4b05      	ldr	r3, [pc, #20]	; (800ee40 <USBH_UserProcess+0x58>)
 800ee2a:	2201      	movs	r2, #1
 800ee2c:	701a      	strb	r2, [r3, #0]
  break;
 800ee2e:	e000      	b.n	800ee32 <USBH_UserProcess+0x4a>

  default:
  break;
 800ee30:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ee32:	bf00      	nop
 800ee34:	370c      	adds	r7, #12
 800ee36:	46bd      	mov	sp, r7
 800ee38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3c:	4770      	bx	lr
 800ee3e:	bf00      	nop
 800ee40:	20002170 	.word	0x20002170

0800ee44 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b08a      	sub	sp, #40	; 0x28
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ee4c:	f107 0314 	add.w	r3, r7, #20
 800ee50:	2200      	movs	r2, #0
 800ee52:	601a      	str	r2, [r3, #0]
 800ee54:	605a      	str	r2, [r3, #4]
 800ee56:	609a      	str	r2, [r3, #8]
 800ee58:	60da      	str	r2, [r3, #12]
 800ee5a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ee64:	d147      	bne.n	800eef6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ee66:	2300      	movs	r3, #0
 800ee68:	613b      	str	r3, [r7, #16]
 800ee6a:	4b25      	ldr	r3, [pc, #148]	; (800ef00 <HAL_HCD_MspInit+0xbc>)
 800ee6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee6e:	4a24      	ldr	r2, [pc, #144]	; (800ef00 <HAL_HCD_MspInit+0xbc>)
 800ee70:	f043 0301 	orr.w	r3, r3, #1
 800ee74:	6313      	str	r3, [r2, #48]	; 0x30
 800ee76:	4b22      	ldr	r3, [pc, #136]	; (800ef00 <HAL_HCD_MspInit+0xbc>)
 800ee78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee7a:	f003 0301 	and.w	r3, r3, #1
 800ee7e:	613b      	str	r3, [r7, #16]
 800ee80:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800ee82:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ee86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ee88:	2300      	movs	r3, #0
 800ee8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ee90:	f107 0314 	add.w	r3, r7, #20
 800ee94:	4619      	mov	r1, r3
 800ee96:	481b      	ldr	r0, [pc, #108]	; (800ef04 <HAL_HCD_MspInit+0xc0>)
 800ee98:	f7f3 fe26 	bl	8002ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ee9c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800eea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eea2:	2302      	movs	r3, #2
 800eea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eea6:	2300      	movs	r3, #0
 800eea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eeaa:	2303      	movs	r3, #3
 800eeac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800eeae:	230a      	movs	r3, #10
 800eeb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eeb2:	f107 0314 	add.w	r3, r7, #20
 800eeb6:	4619      	mov	r1, r3
 800eeb8:	4812      	ldr	r0, [pc, #72]	; (800ef04 <HAL_HCD_MspInit+0xc0>)
 800eeba:	f7f3 fe15 	bl	8002ae8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800eebe:	4b10      	ldr	r3, [pc, #64]	; (800ef00 <HAL_HCD_MspInit+0xbc>)
 800eec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eec2:	4a0f      	ldr	r2, [pc, #60]	; (800ef00 <HAL_HCD_MspInit+0xbc>)
 800eec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eec8:	6353      	str	r3, [r2, #52]	; 0x34
 800eeca:	2300      	movs	r3, #0
 800eecc:	60fb      	str	r3, [r7, #12]
 800eece:	4b0c      	ldr	r3, [pc, #48]	; (800ef00 <HAL_HCD_MspInit+0xbc>)
 800eed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eed2:	4a0b      	ldr	r2, [pc, #44]	; (800ef00 <HAL_HCD_MspInit+0xbc>)
 800eed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800eed8:	6453      	str	r3, [r2, #68]	; 0x44
 800eeda:	4b09      	ldr	r3, [pc, #36]	; (800ef00 <HAL_HCD_MspInit+0xbc>)
 800eedc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eee2:	60fb      	str	r3, [r7, #12]
 800eee4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800eee6:	2200      	movs	r2, #0
 800eee8:	2100      	movs	r1, #0
 800eeea:	2043      	movs	r0, #67	; 0x43
 800eeec:	f7f3 f987 	bl	80021fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800eef0:	2043      	movs	r0, #67	; 0x43
 800eef2:	f7f3 f9a0 	bl	8002236 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800eef6:	bf00      	nop
 800eef8:	3728      	adds	r7, #40	; 0x28
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}
 800eefe:	bf00      	nop
 800ef00:	40023800 	.word	0x40023800
 800ef04:	40020000 	.word	0x40020000

0800ef08 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b082      	sub	sp, #8
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ef16:	4618      	mov	r0, r3
 800ef18:	f7fb fcfb 	bl	800a912 <USBH_LL_IncTimer>
}
 800ef1c:	bf00      	nop
 800ef1e:	3708      	adds	r7, #8
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}

0800ef24 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b082      	sub	sp, #8
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ef32:	4618      	mov	r0, r3
 800ef34:	f7fb fd33 	bl	800a99e <USBH_LL_Connect>
}
 800ef38:	bf00      	nop
 800ef3a:	3708      	adds	r7, #8
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}

0800ef40 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b082      	sub	sp, #8
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f7fb fd3c 	bl	800a9cc <USBH_LL_Disconnect>
}
 800ef54:	bf00      	nop
 800ef56:	3708      	adds	r7, #8
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	bd80      	pop	{r7, pc}

0800ef5c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ef5c:	b480      	push	{r7}
 800ef5e:	b083      	sub	sp, #12
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
 800ef64:	460b      	mov	r3, r1
 800ef66:	70fb      	strb	r3, [r7, #3]
 800ef68:	4613      	mov	r3, r2
 800ef6a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ef6c:	bf00      	nop
 800ef6e:	370c      	adds	r7, #12
 800ef70:	46bd      	mov	sp, r7
 800ef72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef76:	4770      	bx	lr

0800ef78 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b082      	sub	sp, #8
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ef86:	4618      	mov	r0, r3
 800ef88:	f7fb fced 	bl	800a966 <USBH_LL_PortEnabled>
}
 800ef8c:	bf00      	nop
 800ef8e:	3708      	adds	r7, #8
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}

0800ef94 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b082      	sub	sp, #8
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800efa2:	4618      	mov	r0, r3
 800efa4:	f7fb fced 	bl	800a982 <USBH_LL_PortDisabled>
}
 800efa8:	bf00      	nop
 800efaa:	3708      	adds	r7, #8
 800efac:	46bd      	mov	sp, r7
 800efae:	bd80      	pop	{r7, pc}

0800efb0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b082      	sub	sp, #8
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800efbe:	2b01      	cmp	r3, #1
 800efc0:	d12a      	bne.n	800f018 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800efc2:	4a18      	ldr	r2, [pc, #96]	; (800f024 <USBH_LL_Init+0x74>)
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	4a15      	ldr	r2, [pc, #84]	; (800f024 <USBH_LL_Init+0x74>)
 800efce:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800efd2:	4b14      	ldr	r3, [pc, #80]	; (800f024 <USBH_LL_Init+0x74>)
 800efd4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800efd8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800efda:	4b12      	ldr	r3, [pc, #72]	; (800f024 <USBH_LL_Init+0x74>)
 800efdc:	2208      	movs	r2, #8
 800efde:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800efe0:	4b10      	ldr	r3, [pc, #64]	; (800f024 <USBH_LL_Init+0x74>)
 800efe2:	2201      	movs	r2, #1
 800efe4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800efe6:	4b0f      	ldr	r3, [pc, #60]	; (800f024 <USBH_LL_Init+0x74>)
 800efe8:	2200      	movs	r2, #0
 800efea:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800efec:	4b0d      	ldr	r3, [pc, #52]	; (800f024 <USBH_LL_Init+0x74>)
 800efee:	2202      	movs	r2, #2
 800eff0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800eff2:	4b0c      	ldr	r3, [pc, #48]	; (800f024 <USBH_LL_Init+0x74>)
 800eff4:	2200      	movs	r2, #0
 800eff6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800eff8:	480a      	ldr	r0, [pc, #40]	; (800f024 <USBH_LL_Init+0x74>)
 800effa:	f7f4 f80f 	bl	800301c <HAL_HCD_Init>
 800effe:	4603      	mov	r3, r0
 800f000:	2b00      	cmp	r3, #0
 800f002:	d001      	beq.n	800f008 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800f004:	f7f2 fbbe 	bl	8001784 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800f008:	4806      	ldr	r0, [pc, #24]	; (800f024 <USBH_LL_Init+0x74>)
 800f00a:	f7f4 fbf2 	bl	80037f2 <HAL_HCD_GetCurrentFrame>
 800f00e:	4603      	mov	r3, r0
 800f010:	4619      	mov	r1, r3
 800f012:	6878      	ldr	r0, [r7, #4]
 800f014:	f7fb fc6e 	bl	800a8f4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800f018:	2300      	movs	r3, #0
}
 800f01a:	4618      	mov	r0, r3
 800f01c:	3708      	adds	r7, #8
 800f01e:	46bd      	mov	sp, r7
 800f020:	bd80      	pop	{r7, pc}
 800f022:	bf00      	nop
 800f024:	20002174 	.word	0x20002174

0800f028 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b084      	sub	sp, #16
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f030:	2300      	movs	r3, #0
 800f032:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f034:	2300      	movs	r3, #0
 800f036:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f03e:	4618      	mov	r0, r3
 800f040:	f7f4 fb61 	bl	8003706 <HAL_HCD_Start>
 800f044:	4603      	mov	r3, r0
 800f046:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f048:	7bfb      	ldrb	r3, [r7, #15]
 800f04a:	4618      	mov	r0, r3
 800f04c:	f000 f98c 	bl	800f368 <USBH_Get_USB_Status>
 800f050:	4603      	mov	r3, r0
 800f052:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f054:	7bbb      	ldrb	r3, [r7, #14]
}
 800f056:	4618      	mov	r0, r3
 800f058:	3710      	adds	r7, #16
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}

0800f05e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800f05e:	b580      	push	{r7, lr}
 800f060:	b084      	sub	sp, #16
 800f062:	af00      	add	r7, sp, #0
 800f064:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f066:	2300      	movs	r3, #0
 800f068:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f06a:	2300      	movs	r3, #0
 800f06c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f074:	4618      	mov	r0, r3
 800f076:	f7f4 fb69 	bl	800374c <HAL_HCD_Stop>
 800f07a:	4603      	mov	r3, r0
 800f07c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f07e:	7bfb      	ldrb	r3, [r7, #15]
 800f080:	4618      	mov	r0, r3
 800f082:	f000 f971 	bl	800f368 <USBH_Get_USB_Status>
 800f086:	4603      	mov	r3, r0
 800f088:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f08a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f08c:	4618      	mov	r0, r3
 800f08e:	3710      	adds	r7, #16
 800f090:	46bd      	mov	sp, r7
 800f092:	bd80      	pop	{r7, pc}

0800f094 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b084      	sub	sp, #16
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800f09c:	2301      	movs	r3, #1
 800f09e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f7f4 fbb1 	bl	800380e <HAL_HCD_GetCurrentSpeed>
 800f0ac:	4603      	mov	r3, r0
 800f0ae:	2b02      	cmp	r3, #2
 800f0b0:	d00c      	beq.n	800f0cc <USBH_LL_GetSpeed+0x38>
 800f0b2:	2b02      	cmp	r3, #2
 800f0b4:	d80d      	bhi.n	800f0d2 <USBH_LL_GetSpeed+0x3e>
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d002      	beq.n	800f0c0 <USBH_LL_GetSpeed+0x2c>
 800f0ba:	2b01      	cmp	r3, #1
 800f0bc:	d003      	beq.n	800f0c6 <USBH_LL_GetSpeed+0x32>
 800f0be:	e008      	b.n	800f0d2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	73fb      	strb	r3, [r7, #15]
    break;
 800f0c4:	e008      	b.n	800f0d8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800f0c6:	2301      	movs	r3, #1
 800f0c8:	73fb      	strb	r3, [r7, #15]
    break;
 800f0ca:	e005      	b.n	800f0d8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800f0cc:	2302      	movs	r3, #2
 800f0ce:	73fb      	strb	r3, [r7, #15]
    break;
 800f0d0:	e002      	b.n	800f0d8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800f0d2:	2301      	movs	r3, #1
 800f0d4:	73fb      	strb	r3, [r7, #15]
    break;
 800f0d6:	bf00      	nop
  }
  return  speed;
 800f0d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0da:	4618      	mov	r0, r3
 800f0dc:	3710      	adds	r7, #16
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	bd80      	pop	{r7, pc}

0800f0e2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800f0e2:	b580      	push	{r7, lr}
 800f0e4:	b084      	sub	sp, #16
 800f0e6:	af00      	add	r7, sp, #0
 800f0e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	f7f4 fb44 	bl	8003786 <HAL_HCD_ResetPort>
 800f0fe:	4603      	mov	r3, r0
 800f100:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f102:	7bfb      	ldrb	r3, [r7, #15]
 800f104:	4618      	mov	r0, r3
 800f106:	f000 f92f 	bl	800f368 <USBH_Get_USB_Status>
 800f10a:	4603      	mov	r3, r0
 800f10c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f10e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f110:	4618      	mov	r0, r3
 800f112:	3710      	adds	r7, #16
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}

0800f118 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b082      	sub	sp, #8
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
 800f120:	460b      	mov	r3, r1
 800f122:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f12a:	78fa      	ldrb	r2, [r7, #3]
 800f12c:	4611      	mov	r1, r2
 800f12e:	4618      	mov	r0, r3
 800f130:	f7f4 fb4b 	bl	80037ca <HAL_HCD_HC_GetXferCount>
 800f134:	4603      	mov	r3, r0
}
 800f136:	4618      	mov	r0, r3
 800f138:	3708      	adds	r7, #8
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}

0800f13e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f13e:	b590      	push	{r4, r7, lr}
 800f140:	b089      	sub	sp, #36	; 0x24
 800f142:	af04      	add	r7, sp, #16
 800f144:	6078      	str	r0, [r7, #4]
 800f146:	4608      	mov	r0, r1
 800f148:	4611      	mov	r1, r2
 800f14a:	461a      	mov	r2, r3
 800f14c:	4603      	mov	r3, r0
 800f14e:	70fb      	strb	r3, [r7, #3]
 800f150:	460b      	mov	r3, r1
 800f152:	70bb      	strb	r3, [r7, #2]
 800f154:	4613      	mov	r3, r2
 800f156:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f158:	2300      	movs	r3, #0
 800f15a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f15c:	2300      	movs	r3, #0
 800f15e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f166:	787c      	ldrb	r4, [r7, #1]
 800f168:	78ba      	ldrb	r2, [r7, #2]
 800f16a:	78f9      	ldrb	r1, [r7, #3]
 800f16c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f16e:	9302      	str	r3, [sp, #8]
 800f170:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f174:	9301      	str	r3, [sp, #4]
 800f176:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f17a:	9300      	str	r3, [sp, #0]
 800f17c:	4623      	mov	r3, r4
 800f17e:	f7f3 ffaf 	bl	80030e0 <HAL_HCD_HC_Init>
 800f182:	4603      	mov	r3, r0
 800f184:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800f186:	7bfb      	ldrb	r3, [r7, #15]
 800f188:	4618      	mov	r0, r3
 800f18a:	f000 f8ed 	bl	800f368 <USBH_Get_USB_Status>
 800f18e:	4603      	mov	r3, r0
 800f190:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f192:	7bbb      	ldrb	r3, [r7, #14]
}
 800f194:	4618      	mov	r0, r3
 800f196:	3714      	adds	r7, #20
 800f198:	46bd      	mov	sp, r7
 800f19a:	bd90      	pop	{r4, r7, pc}

0800f19c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b084      	sub	sp, #16
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
 800f1a4:	460b      	mov	r3, r1
 800f1a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f1b6:	78fa      	ldrb	r2, [r7, #3]
 800f1b8:	4611      	mov	r1, r2
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f7f4 f81f 	bl	80031fe <HAL_HCD_HC_Halt>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f1c4:	7bfb      	ldrb	r3, [r7, #15]
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	f000 f8ce 	bl	800f368 <USBH_Get_USB_Status>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	3710      	adds	r7, #16
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	bd80      	pop	{r7, pc}

0800f1da <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800f1da:	b590      	push	{r4, r7, lr}
 800f1dc:	b089      	sub	sp, #36	; 0x24
 800f1de:	af04      	add	r7, sp, #16
 800f1e0:	6078      	str	r0, [r7, #4]
 800f1e2:	4608      	mov	r0, r1
 800f1e4:	4611      	mov	r1, r2
 800f1e6:	461a      	mov	r2, r3
 800f1e8:	4603      	mov	r3, r0
 800f1ea:	70fb      	strb	r3, [r7, #3]
 800f1ec:	460b      	mov	r3, r1
 800f1ee:	70bb      	strb	r3, [r7, #2]
 800f1f0:	4613      	mov	r3, r2
 800f1f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f202:	787c      	ldrb	r4, [r7, #1]
 800f204:	78ba      	ldrb	r2, [r7, #2]
 800f206:	78f9      	ldrb	r1, [r7, #3]
 800f208:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f20c:	9303      	str	r3, [sp, #12]
 800f20e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f210:	9302      	str	r3, [sp, #8]
 800f212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f214:	9301      	str	r3, [sp, #4]
 800f216:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f21a:	9300      	str	r3, [sp, #0]
 800f21c:	4623      	mov	r3, r4
 800f21e:	f7f4 f811 	bl	8003244 <HAL_HCD_HC_SubmitRequest>
 800f222:	4603      	mov	r3, r0
 800f224:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800f226:	7bfb      	ldrb	r3, [r7, #15]
 800f228:	4618      	mov	r0, r3
 800f22a:	f000 f89d 	bl	800f368 <USBH_Get_USB_Status>
 800f22e:	4603      	mov	r3, r0
 800f230:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f232:	7bbb      	ldrb	r3, [r7, #14]
}
 800f234:	4618      	mov	r0, r3
 800f236:	3714      	adds	r7, #20
 800f238:	46bd      	mov	sp, r7
 800f23a:	bd90      	pop	{r4, r7, pc}

0800f23c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b082      	sub	sp, #8
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
 800f244:	460b      	mov	r3, r1
 800f246:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f24e:	78fa      	ldrb	r2, [r7, #3]
 800f250:	4611      	mov	r1, r2
 800f252:	4618      	mov	r0, r3
 800f254:	f7f4 faa5 	bl	80037a2 <HAL_HCD_HC_GetURBState>
 800f258:	4603      	mov	r3, r0
}
 800f25a:	4618      	mov	r0, r3
 800f25c:	3708      	adds	r7, #8
 800f25e:	46bd      	mov	sp, r7
 800f260:	bd80      	pop	{r7, pc}

0800f262 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800f262:	b580      	push	{r7, lr}
 800f264:	b082      	sub	sp, #8
 800f266:	af00      	add	r7, sp, #0
 800f268:	6078      	str	r0, [r7, #4]
 800f26a:	460b      	mov	r3, r1
 800f26c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f274:	2b01      	cmp	r3, #1
 800f276:	d103      	bne.n	800f280 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800f278:	78fb      	ldrb	r3, [r7, #3]
 800f27a:	4618      	mov	r0, r3
 800f27c:	f000 f8a0 	bl	800f3c0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800f280:	20c8      	movs	r0, #200	; 0xc8
 800f282:	f7f2 febd 	bl	8002000 <HAL_Delay>
  return USBH_OK;
 800f286:	2300      	movs	r3, #0
}
 800f288:	4618      	mov	r0, r3
 800f28a:	3708      	adds	r7, #8
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bd80      	pop	{r7, pc}

0800f290 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f290:	b480      	push	{r7}
 800f292:	b085      	sub	sp, #20
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
 800f298:	460b      	mov	r3, r1
 800f29a:	70fb      	strb	r3, [r7, #3]
 800f29c:	4613      	mov	r3, r2
 800f29e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f2a6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f2a8:	78fb      	ldrb	r3, [r7, #3]
 800f2aa:	68fa      	ldr	r2, [r7, #12]
 800f2ac:	212c      	movs	r1, #44	; 0x2c
 800f2ae:	fb01 f303 	mul.w	r3, r1, r3
 800f2b2:	4413      	add	r3, r2
 800f2b4:	333b      	adds	r3, #59	; 0x3b
 800f2b6:	781b      	ldrb	r3, [r3, #0]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d009      	beq.n	800f2d0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f2bc:	78fb      	ldrb	r3, [r7, #3]
 800f2be:	68fa      	ldr	r2, [r7, #12]
 800f2c0:	212c      	movs	r1, #44	; 0x2c
 800f2c2:	fb01 f303 	mul.w	r3, r1, r3
 800f2c6:	4413      	add	r3, r2
 800f2c8:	3354      	adds	r3, #84	; 0x54
 800f2ca:	78ba      	ldrb	r2, [r7, #2]
 800f2cc:	701a      	strb	r2, [r3, #0]
 800f2ce:	e008      	b.n	800f2e2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f2d0:	78fb      	ldrb	r3, [r7, #3]
 800f2d2:	68fa      	ldr	r2, [r7, #12]
 800f2d4:	212c      	movs	r1, #44	; 0x2c
 800f2d6:	fb01 f303 	mul.w	r3, r1, r3
 800f2da:	4413      	add	r3, r2
 800f2dc:	3355      	adds	r3, #85	; 0x55
 800f2de:	78ba      	ldrb	r2, [r7, #2]
 800f2e0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f2e2:	2300      	movs	r3, #0
}
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	3714      	adds	r7, #20
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ee:	4770      	bx	lr

0800f2f0 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f2f0:	b480      	push	{r7}
 800f2f2:	b085      	sub	sp, #20
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
 800f2f8:	460b      	mov	r3, r1
 800f2fa:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f306:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800f308:	78fb      	ldrb	r3, [r7, #3]
 800f30a:	68ba      	ldr	r2, [r7, #8]
 800f30c:	212c      	movs	r1, #44	; 0x2c
 800f30e:	fb01 f303 	mul.w	r3, r1, r3
 800f312:	4413      	add	r3, r2
 800f314:	333b      	adds	r3, #59	; 0x3b
 800f316:	781b      	ldrb	r3, [r3, #0]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d009      	beq.n	800f330 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800f31c:	78fb      	ldrb	r3, [r7, #3]
 800f31e:	68ba      	ldr	r2, [r7, #8]
 800f320:	212c      	movs	r1, #44	; 0x2c
 800f322:	fb01 f303 	mul.w	r3, r1, r3
 800f326:	4413      	add	r3, r2
 800f328:	3354      	adds	r3, #84	; 0x54
 800f32a:	781b      	ldrb	r3, [r3, #0]
 800f32c:	73fb      	strb	r3, [r7, #15]
 800f32e:	e008      	b.n	800f342 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800f330:	78fb      	ldrb	r3, [r7, #3]
 800f332:	68ba      	ldr	r2, [r7, #8]
 800f334:	212c      	movs	r1, #44	; 0x2c
 800f336:	fb01 f303 	mul.w	r3, r1, r3
 800f33a:	4413      	add	r3, r2
 800f33c:	3355      	adds	r3, #85	; 0x55
 800f33e:	781b      	ldrb	r3, [r3, #0]
 800f340:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800f342:	7bfb      	ldrb	r3, [r7, #15]
}
 800f344:	4618      	mov	r0, r3
 800f346:	3714      	adds	r7, #20
 800f348:	46bd      	mov	sp, r7
 800f34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34e:	4770      	bx	lr

0800f350 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b082      	sub	sp, #8
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f358:	6878      	ldr	r0, [r7, #4]
 800f35a:	f7f2 fe51 	bl	8002000 <HAL_Delay>
}
 800f35e:	bf00      	nop
 800f360:	3708      	adds	r7, #8
 800f362:	46bd      	mov	sp, r7
 800f364:	bd80      	pop	{r7, pc}
	...

0800f368 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f368:	b480      	push	{r7}
 800f36a:	b085      	sub	sp, #20
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	4603      	mov	r3, r0
 800f370:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f372:	2300      	movs	r3, #0
 800f374:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f376:	79fb      	ldrb	r3, [r7, #7]
 800f378:	2b03      	cmp	r3, #3
 800f37a:	d817      	bhi.n	800f3ac <USBH_Get_USB_Status+0x44>
 800f37c:	a201      	add	r2, pc, #4	; (adr r2, 800f384 <USBH_Get_USB_Status+0x1c>)
 800f37e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f382:	bf00      	nop
 800f384:	0800f395 	.word	0x0800f395
 800f388:	0800f39b 	.word	0x0800f39b
 800f38c:	0800f3a1 	.word	0x0800f3a1
 800f390:	0800f3a7 	.word	0x0800f3a7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f394:	2300      	movs	r3, #0
 800f396:	73fb      	strb	r3, [r7, #15]
    break;
 800f398:	e00b      	b.n	800f3b2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f39a:	2302      	movs	r3, #2
 800f39c:	73fb      	strb	r3, [r7, #15]
    break;
 800f39e:	e008      	b.n	800f3b2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f3a0:	2301      	movs	r3, #1
 800f3a2:	73fb      	strb	r3, [r7, #15]
    break;
 800f3a4:	e005      	b.n	800f3b2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f3a6:	2302      	movs	r3, #2
 800f3a8:	73fb      	strb	r3, [r7, #15]
    break;
 800f3aa:	e002      	b.n	800f3b2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f3ac:	2302      	movs	r3, #2
 800f3ae:	73fb      	strb	r3, [r7, #15]
    break;
 800f3b0:	bf00      	nop
  }
  return usb_status;
 800f3b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	3714      	adds	r7, #20
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3be:	4770      	bx	lr

0800f3c0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b084      	sub	sp, #16
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800f3ca:	79fb      	ldrb	r3, [r7, #7]
 800f3cc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 1)
 800f3ce:	79fb      	ldrb	r3, [r7, #7]
 800f3d0:	2b01      	cmp	r3, #1
 800f3d2:	d102      	bne.n	800f3da <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	73fb      	strb	r3, [r7, #15]
 800f3d8:	e001      	b.n	800f3de <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800f3da:	2301      	movs	r3, #1
 800f3dc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800f3de:	7bfb      	ldrb	r3, [r7, #15]
 800f3e0:	461a      	mov	r2, r3
 800f3e2:	2101      	movs	r1, #1
 800f3e4:	4803      	ldr	r0, [pc, #12]	; (800f3f4 <MX_DriverVbusFS+0x34>)
 800f3e6:	f7f3 fde7 	bl	8002fb8 <HAL_GPIO_WritePin>
}
 800f3ea:	bf00      	nop
 800f3ec:	3710      	adds	r7, #16
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd80      	pop	{r7, pc}
 800f3f2:	bf00      	nop
 800f3f4:	40020800 	.word	0x40020800

0800f3f8 <malloc>:
 800f3f8:	4b02      	ldr	r3, [pc, #8]	; (800f404 <malloc+0xc>)
 800f3fa:	4601      	mov	r1, r0
 800f3fc:	6818      	ldr	r0, [r3, #0]
 800f3fe:	f000 b82b 	b.w	800f458 <_malloc_r>
 800f402:	bf00      	nop
 800f404:	200000b4 	.word	0x200000b4

0800f408 <free>:
 800f408:	4b02      	ldr	r3, [pc, #8]	; (800f414 <free+0xc>)
 800f40a:	4601      	mov	r1, r0
 800f40c:	6818      	ldr	r0, [r3, #0]
 800f40e:	f000 b92b 	b.w	800f668 <_free_r>
 800f412:	bf00      	nop
 800f414:	200000b4 	.word	0x200000b4

0800f418 <sbrk_aligned>:
 800f418:	b570      	push	{r4, r5, r6, lr}
 800f41a:	4e0e      	ldr	r6, [pc, #56]	; (800f454 <sbrk_aligned+0x3c>)
 800f41c:	460c      	mov	r4, r1
 800f41e:	6831      	ldr	r1, [r6, #0]
 800f420:	4605      	mov	r5, r0
 800f422:	b911      	cbnz	r1, 800f42a <sbrk_aligned+0x12>
 800f424:	f000 f8d6 	bl	800f5d4 <_sbrk_r>
 800f428:	6030      	str	r0, [r6, #0]
 800f42a:	4621      	mov	r1, r4
 800f42c:	4628      	mov	r0, r5
 800f42e:	f000 f8d1 	bl	800f5d4 <_sbrk_r>
 800f432:	1c43      	adds	r3, r0, #1
 800f434:	d00a      	beq.n	800f44c <sbrk_aligned+0x34>
 800f436:	1cc4      	adds	r4, r0, #3
 800f438:	f024 0403 	bic.w	r4, r4, #3
 800f43c:	42a0      	cmp	r0, r4
 800f43e:	d007      	beq.n	800f450 <sbrk_aligned+0x38>
 800f440:	1a21      	subs	r1, r4, r0
 800f442:	4628      	mov	r0, r5
 800f444:	f000 f8c6 	bl	800f5d4 <_sbrk_r>
 800f448:	3001      	adds	r0, #1
 800f44a:	d101      	bne.n	800f450 <sbrk_aligned+0x38>
 800f44c:	f04f 34ff 	mov.w	r4, #4294967295
 800f450:	4620      	mov	r0, r4
 800f452:	bd70      	pop	{r4, r5, r6, pc}
 800f454:	2000247c 	.word	0x2000247c

0800f458 <_malloc_r>:
 800f458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f45c:	1ccd      	adds	r5, r1, #3
 800f45e:	f025 0503 	bic.w	r5, r5, #3
 800f462:	3508      	adds	r5, #8
 800f464:	2d0c      	cmp	r5, #12
 800f466:	bf38      	it	cc
 800f468:	250c      	movcc	r5, #12
 800f46a:	2d00      	cmp	r5, #0
 800f46c:	4607      	mov	r7, r0
 800f46e:	db01      	blt.n	800f474 <_malloc_r+0x1c>
 800f470:	42a9      	cmp	r1, r5
 800f472:	d905      	bls.n	800f480 <_malloc_r+0x28>
 800f474:	230c      	movs	r3, #12
 800f476:	603b      	str	r3, [r7, #0]
 800f478:	2600      	movs	r6, #0
 800f47a:	4630      	mov	r0, r6
 800f47c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f480:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f554 <_malloc_r+0xfc>
 800f484:	f000 f868 	bl	800f558 <__malloc_lock>
 800f488:	f8d8 3000 	ldr.w	r3, [r8]
 800f48c:	461c      	mov	r4, r3
 800f48e:	bb5c      	cbnz	r4, 800f4e8 <_malloc_r+0x90>
 800f490:	4629      	mov	r1, r5
 800f492:	4638      	mov	r0, r7
 800f494:	f7ff ffc0 	bl	800f418 <sbrk_aligned>
 800f498:	1c43      	adds	r3, r0, #1
 800f49a:	4604      	mov	r4, r0
 800f49c:	d155      	bne.n	800f54a <_malloc_r+0xf2>
 800f49e:	f8d8 4000 	ldr.w	r4, [r8]
 800f4a2:	4626      	mov	r6, r4
 800f4a4:	2e00      	cmp	r6, #0
 800f4a6:	d145      	bne.n	800f534 <_malloc_r+0xdc>
 800f4a8:	2c00      	cmp	r4, #0
 800f4aa:	d048      	beq.n	800f53e <_malloc_r+0xe6>
 800f4ac:	6823      	ldr	r3, [r4, #0]
 800f4ae:	4631      	mov	r1, r6
 800f4b0:	4638      	mov	r0, r7
 800f4b2:	eb04 0903 	add.w	r9, r4, r3
 800f4b6:	f000 f88d 	bl	800f5d4 <_sbrk_r>
 800f4ba:	4581      	cmp	r9, r0
 800f4bc:	d13f      	bne.n	800f53e <_malloc_r+0xe6>
 800f4be:	6821      	ldr	r1, [r4, #0]
 800f4c0:	1a6d      	subs	r5, r5, r1
 800f4c2:	4629      	mov	r1, r5
 800f4c4:	4638      	mov	r0, r7
 800f4c6:	f7ff ffa7 	bl	800f418 <sbrk_aligned>
 800f4ca:	3001      	adds	r0, #1
 800f4cc:	d037      	beq.n	800f53e <_malloc_r+0xe6>
 800f4ce:	6823      	ldr	r3, [r4, #0]
 800f4d0:	442b      	add	r3, r5
 800f4d2:	6023      	str	r3, [r4, #0]
 800f4d4:	f8d8 3000 	ldr.w	r3, [r8]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d038      	beq.n	800f54e <_malloc_r+0xf6>
 800f4dc:	685a      	ldr	r2, [r3, #4]
 800f4de:	42a2      	cmp	r2, r4
 800f4e0:	d12b      	bne.n	800f53a <_malloc_r+0xe2>
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	605a      	str	r2, [r3, #4]
 800f4e6:	e00f      	b.n	800f508 <_malloc_r+0xb0>
 800f4e8:	6822      	ldr	r2, [r4, #0]
 800f4ea:	1b52      	subs	r2, r2, r5
 800f4ec:	d41f      	bmi.n	800f52e <_malloc_r+0xd6>
 800f4ee:	2a0b      	cmp	r2, #11
 800f4f0:	d917      	bls.n	800f522 <_malloc_r+0xca>
 800f4f2:	1961      	adds	r1, r4, r5
 800f4f4:	42a3      	cmp	r3, r4
 800f4f6:	6025      	str	r5, [r4, #0]
 800f4f8:	bf18      	it	ne
 800f4fa:	6059      	strne	r1, [r3, #4]
 800f4fc:	6863      	ldr	r3, [r4, #4]
 800f4fe:	bf08      	it	eq
 800f500:	f8c8 1000 	streq.w	r1, [r8]
 800f504:	5162      	str	r2, [r4, r5]
 800f506:	604b      	str	r3, [r1, #4]
 800f508:	4638      	mov	r0, r7
 800f50a:	f104 060b 	add.w	r6, r4, #11
 800f50e:	f000 f829 	bl	800f564 <__malloc_unlock>
 800f512:	f026 0607 	bic.w	r6, r6, #7
 800f516:	1d23      	adds	r3, r4, #4
 800f518:	1af2      	subs	r2, r6, r3
 800f51a:	d0ae      	beq.n	800f47a <_malloc_r+0x22>
 800f51c:	1b9b      	subs	r3, r3, r6
 800f51e:	50a3      	str	r3, [r4, r2]
 800f520:	e7ab      	b.n	800f47a <_malloc_r+0x22>
 800f522:	42a3      	cmp	r3, r4
 800f524:	6862      	ldr	r2, [r4, #4]
 800f526:	d1dd      	bne.n	800f4e4 <_malloc_r+0x8c>
 800f528:	f8c8 2000 	str.w	r2, [r8]
 800f52c:	e7ec      	b.n	800f508 <_malloc_r+0xb0>
 800f52e:	4623      	mov	r3, r4
 800f530:	6864      	ldr	r4, [r4, #4]
 800f532:	e7ac      	b.n	800f48e <_malloc_r+0x36>
 800f534:	4634      	mov	r4, r6
 800f536:	6876      	ldr	r6, [r6, #4]
 800f538:	e7b4      	b.n	800f4a4 <_malloc_r+0x4c>
 800f53a:	4613      	mov	r3, r2
 800f53c:	e7cc      	b.n	800f4d8 <_malloc_r+0x80>
 800f53e:	230c      	movs	r3, #12
 800f540:	603b      	str	r3, [r7, #0]
 800f542:	4638      	mov	r0, r7
 800f544:	f000 f80e 	bl	800f564 <__malloc_unlock>
 800f548:	e797      	b.n	800f47a <_malloc_r+0x22>
 800f54a:	6025      	str	r5, [r4, #0]
 800f54c:	e7dc      	b.n	800f508 <_malloc_r+0xb0>
 800f54e:	605b      	str	r3, [r3, #4]
 800f550:	deff      	udf	#255	; 0xff
 800f552:	bf00      	nop
 800f554:	20002478 	.word	0x20002478

0800f558 <__malloc_lock>:
 800f558:	4801      	ldr	r0, [pc, #4]	; (800f560 <__malloc_lock+0x8>)
 800f55a:	f000 b875 	b.w	800f648 <__retarget_lock_acquire_recursive>
 800f55e:	bf00      	nop
 800f560:	200025bc 	.word	0x200025bc

0800f564 <__malloc_unlock>:
 800f564:	4801      	ldr	r0, [pc, #4]	; (800f56c <__malloc_unlock+0x8>)
 800f566:	f000 b870 	b.w	800f64a <__retarget_lock_release_recursive>
 800f56a:	bf00      	nop
 800f56c:	200025bc 	.word	0x200025bc

0800f570 <memset>:
 800f570:	4402      	add	r2, r0
 800f572:	4603      	mov	r3, r0
 800f574:	4293      	cmp	r3, r2
 800f576:	d100      	bne.n	800f57a <memset+0xa>
 800f578:	4770      	bx	lr
 800f57a:	f803 1b01 	strb.w	r1, [r3], #1
 800f57e:	e7f9      	b.n	800f574 <memset+0x4>

0800f580 <strncpy>:
 800f580:	b510      	push	{r4, lr}
 800f582:	3901      	subs	r1, #1
 800f584:	4603      	mov	r3, r0
 800f586:	b132      	cbz	r2, 800f596 <strncpy+0x16>
 800f588:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f58c:	f803 4b01 	strb.w	r4, [r3], #1
 800f590:	3a01      	subs	r2, #1
 800f592:	2c00      	cmp	r4, #0
 800f594:	d1f7      	bne.n	800f586 <strncpy+0x6>
 800f596:	441a      	add	r2, r3
 800f598:	2100      	movs	r1, #0
 800f59a:	4293      	cmp	r3, r2
 800f59c:	d100      	bne.n	800f5a0 <strncpy+0x20>
 800f59e:	bd10      	pop	{r4, pc}
 800f5a0:	f803 1b01 	strb.w	r1, [r3], #1
 800f5a4:	e7f9      	b.n	800f59a <strncpy+0x1a>

0800f5a6 <strstr>:
 800f5a6:	780a      	ldrb	r2, [r1, #0]
 800f5a8:	b570      	push	{r4, r5, r6, lr}
 800f5aa:	b96a      	cbnz	r2, 800f5c8 <strstr+0x22>
 800f5ac:	bd70      	pop	{r4, r5, r6, pc}
 800f5ae:	429a      	cmp	r2, r3
 800f5b0:	d109      	bne.n	800f5c6 <strstr+0x20>
 800f5b2:	460c      	mov	r4, r1
 800f5b4:	4605      	mov	r5, r0
 800f5b6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d0f6      	beq.n	800f5ac <strstr+0x6>
 800f5be:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800f5c2:	429e      	cmp	r6, r3
 800f5c4:	d0f7      	beq.n	800f5b6 <strstr+0x10>
 800f5c6:	3001      	adds	r0, #1
 800f5c8:	7803      	ldrb	r3, [r0, #0]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d1ef      	bne.n	800f5ae <strstr+0x8>
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	e7ec      	b.n	800f5ac <strstr+0x6>
	...

0800f5d4 <_sbrk_r>:
 800f5d4:	b538      	push	{r3, r4, r5, lr}
 800f5d6:	4d06      	ldr	r5, [pc, #24]	; (800f5f0 <_sbrk_r+0x1c>)
 800f5d8:	2300      	movs	r3, #0
 800f5da:	4604      	mov	r4, r0
 800f5dc:	4608      	mov	r0, r1
 800f5de:	602b      	str	r3, [r5, #0]
 800f5e0:	f7f2 fa70 	bl	8001ac4 <_sbrk>
 800f5e4:	1c43      	adds	r3, r0, #1
 800f5e6:	d102      	bne.n	800f5ee <_sbrk_r+0x1a>
 800f5e8:	682b      	ldr	r3, [r5, #0]
 800f5ea:	b103      	cbz	r3, 800f5ee <_sbrk_r+0x1a>
 800f5ec:	6023      	str	r3, [r4, #0]
 800f5ee:	bd38      	pop	{r3, r4, r5, pc}
 800f5f0:	200025b8 	.word	0x200025b8

0800f5f4 <__errno>:
 800f5f4:	4b01      	ldr	r3, [pc, #4]	; (800f5fc <__errno+0x8>)
 800f5f6:	6818      	ldr	r0, [r3, #0]
 800f5f8:	4770      	bx	lr
 800f5fa:	bf00      	nop
 800f5fc:	200000b4 	.word	0x200000b4

0800f600 <__libc_init_array>:
 800f600:	b570      	push	{r4, r5, r6, lr}
 800f602:	4d0d      	ldr	r5, [pc, #52]	; (800f638 <__libc_init_array+0x38>)
 800f604:	4c0d      	ldr	r4, [pc, #52]	; (800f63c <__libc_init_array+0x3c>)
 800f606:	1b64      	subs	r4, r4, r5
 800f608:	10a4      	asrs	r4, r4, #2
 800f60a:	2600      	movs	r6, #0
 800f60c:	42a6      	cmp	r6, r4
 800f60e:	d109      	bne.n	800f624 <__libc_init_array+0x24>
 800f610:	4d0b      	ldr	r5, [pc, #44]	; (800f640 <__libc_init_array+0x40>)
 800f612:	4c0c      	ldr	r4, [pc, #48]	; (800f644 <__libc_init_array+0x44>)
 800f614:	f000 f874 	bl	800f700 <_init>
 800f618:	1b64      	subs	r4, r4, r5
 800f61a:	10a4      	asrs	r4, r4, #2
 800f61c:	2600      	movs	r6, #0
 800f61e:	42a6      	cmp	r6, r4
 800f620:	d105      	bne.n	800f62e <__libc_init_array+0x2e>
 800f622:	bd70      	pop	{r4, r5, r6, pc}
 800f624:	f855 3b04 	ldr.w	r3, [r5], #4
 800f628:	4798      	blx	r3
 800f62a:	3601      	adds	r6, #1
 800f62c:	e7ee      	b.n	800f60c <__libc_init_array+0xc>
 800f62e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f632:	4798      	blx	r3
 800f634:	3601      	adds	r6, #1
 800f636:	e7f2      	b.n	800f61e <__libc_init_array+0x1e>
 800f638:	0800fc48 	.word	0x0800fc48
 800f63c:	0800fc48 	.word	0x0800fc48
 800f640:	0800fc48 	.word	0x0800fc48
 800f644:	0800fc4c 	.word	0x0800fc4c

0800f648 <__retarget_lock_acquire_recursive>:
 800f648:	4770      	bx	lr

0800f64a <__retarget_lock_release_recursive>:
 800f64a:	4770      	bx	lr

0800f64c <memcpy>:
 800f64c:	440a      	add	r2, r1
 800f64e:	4291      	cmp	r1, r2
 800f650:	f100 33ff 	add.w	r3, r0, #4294967295
 800f654:	d100      	bne.n	800f658 <memcpy+0xc>
 800f656:	4770      	bx	lr
 800f658:	b510      	push	{r4, lr}
 800f65a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f65e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f662:	4291      	cmp	r1, r2
 800f664:	d1f9      	bne.n	800f65a <memcpy+0xe>
 800f666:	bd10      	pop	{r4, pc}

0800f668 <_free_r>:
 800f668:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f66a:	2900      	cmp	r1, #0
 800f66c:	d044      	beq.n	800f6f8 <_free_r+0x90>
 800f66e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f672:	9001      	str	r0, [sp, #4]
 800f674:	2b00      	cmp	r3, #0
 800f676:	f1a1 0404 	sub.w	r4, r1, #4
 800f67a:	bfb8      	it	lt
 800f67c:	18e4      	addlt	r4, r4, r3
 800f67e:	f7ff ff6b 	bl	800f558 <__malloc_lock>
 800f682:	4a1e      	ldr	r2, [pc, #120]	; (800f6fc <_free_r+0x94>)
 800f684:	9801      	ldr	r0, [sp, #4]
 800f686:	6813      	ldr	r3, [r2, #0]
 800f688:	b933      	cbnz	r3, 800f698 <_free_r+0x30>
 800f68a:	6063      	str	r3, [r4, #4]
 800f68c:	6014      	str	r4, [r2, #0]
 800f68e:	b003      	add	sp, #12
 800f690:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f694:	f7ff bf66 	b.w	800f564 <__malloc_unlock>
 800f698:	42a3      	cmp	r3, r4
 800f69a:	d908      	bls.n	800f6ae <_free_r+0x46>
 800f69c:	6825      	ldr	r5, [r4, #0]
 800f69e:	1961      	adds	r1, r4, r5
 800f6a0:	428b      	cmp	r3, r1
 800f6a2:	bf01      	itttt	eq
 800f6a4:	6819      	ldreq	r1, [r3, #0]
 800f6a6:	685b      	ldreq	r3, [r3, #4]
 800f6a8:	1949      	addeq	r1, r1, r5
 800f6aa:	6021      	streq	r1, [r4, #0]
 800f6ac:	e7ed      	b.n	800f68a <_free_r+0x22>
 800f6ae:	461a      	mov	r2, r3
 800f6b0:	685b      	ldr	r3, [r3, #4]
 800f6b2:	b10b      	cbz	r3, 800f6b8 <_free_r+0x50>
 800f6b4:	42a3      	cmp	r3, r4
 800f6b6:	d9fa      	bls.n	800f6ae <_free_r+0x46>
 800f6b8:	6811      	ldr	r1, [r2, #0]
 800f6ba:	1855      	adds	r5, r2, r1
 800f6bc:	42a5      	cmp	r5, r4
 800f6be:	d10b      	bne.n	800f6d8 <_free_r+0x70>
 800f6c0:	6824      	ldr	r4, [r4, #0]
 800f6c2:	4421      	add	r1, r4
 800f6c4:	1854      	adds	r4, r2, r1
 800f6c6:	42a3      	cmp	r3, r4
 800f6c8:	6011      	str	r1, [r2, #0]
 800f6ca:	d1e0      	bne.n	800f68e <_free_r+0x26>
 800f6cc:	681c      	ldr	r4, [r3, #0]
 800f6ce:	685b      	ldr	r3, [r3, #4]
 800f6d0:	6053      	str	r3, [r2, #4]
 800f6d2:	440c      	add	r4, r1
 800f6d4:	6014      	str	r4, [r2, #0]
 800f6d6:	e7da      	b.n	800f68e <_free_r+0x26>
 800f6d8:	d902      	bls.n	800f6e0 <_free_r+0x78>
 800f6da:	230c      	movs	r3, #12
 800f6dc:	6003      	str	r3, [r0, #0]
 800f6de:	e7d6      	b.n	800f68e <_free_r+0x26>
 800f6e0:	6825      	ldr	r5, [r4, #0]
 800f6e2:	1961      	adds	r1, r4, r5
 800f6e4:	428b      	cmp	r3, r1
 800f6e6:	bf04      	itt	eq
 800f6e8:	6819      	ldreq	r1, [r3, #0]
 800f6ea:	685b      	ldreq	r3, [r3, #4]
 800f6ec:	6063      	str	r3, [r4, #4]
 800f6ee:	bf04      	itt	eq
 800f6f0:	1949      	addeq	r1, r1, r5
 800f6f2:	6021      	streq	r1, [r4, #0]
 800f6f4:	6054      	str	r4, [r2, #4]
 800f6f6:	e7ca      	b.n	800f68e <_free_r+0x26>
 800f6f8:	b003      	add	sp, #12
 800f6fa:	bd30      	pop	{r4, r5, pc}
 800f6fc:	20002478 	.word	0x20002478

0800f700 <_init>:
 800f700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f702:	bf00      	nop
 800f704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f706:	bc08      	pop	{r3}
 800f708:	469e      	mov	lr, r3
 800f70a:	4770      	bx	lr

0800f70c <_fini>:
 800f70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f70e:	bf00      	nop
 800f710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f712:	bc08      	pop	{r3}
 800f714:	469e      	mov	lr, r3
 800f716:	4770      	bx	lr
