
STM32F4-RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003600  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080037a0  080037a0  000137a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003834  08003834  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08003834  08003834  00013834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800383c  0800383c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800383c  0800383c  0001383c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003840  08003840  00013840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08003844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  20000060  080038a4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  080038a4  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009d1b  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019d2  00000000  00000000  00029dee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000898  00000000  00000000  0002b7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000694  00000000  00000000  0002c058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000163ab  00000000  00000000  0002c6ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b393  00000000  00000000  00042a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b768  00000000  00000000  0004de2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000278c  00000000  00000000  000d9594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000dbd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003788 	.word	0x08003788

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08003788 	.word	0x08003788

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b590      	push	{r4, r7, lr}
 800057e:	b097      	sub	sp, #92	; 0x5c
 8000580:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 fb5f 	bl	8000c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f8a9 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 f9c9 	bl	8000920 <MX_GPIO_Init>
  MX_RTC_Init();
 800058e:	f000 f90f 	bl	80007b0 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000592:	f000 f99b 	bl	80008cc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Disable Wakeup Timer and configure it
  HAL_RTCEx_DeactivateWakeUpTimer(RtcHandle);
 8000596:	484a      	ldr	r0, [pc, #296]	; (80006c0 <main+0x144>)
 8000598:	f002 f838 	bl	800260c <HAL_RTCEx_DeactivateWakeUpTimer>
  char message[50];
  uint8_t size;
  //uint16_t mseconds;

  //UART HELLO
  size = sprintf(message,"\n\rHello\r");
 800059c:	463b      	mov	r3, r7
 800059e:	4949      	ldr	r1, [pc, #292]	; (80006c4 <main+0x148>)
 80005a0:	4618      	mov	r0, r3
 80005a2:	f002 fc4d 	bl	8002e40 <siprintf>
 80005a6:	4603      	mov	r3, r0
 80005a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  HAL_UART_Transmit(UartHandle, (uint8_t*)message, size, 50);
 80005ac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80005b0:	b29a      	uxth	r2, r3
 80005b2:	4639      	mov	r1, r7
 80005b4:	2332      	movs	r3, #50	; 0x32
 80005b6:	4844      	ldr	r0, [pc, #272]	; (80006c8 <main+0x14c>)
 80005b8:	f002 f8cd 	bl	8002756 <HAL_UART_Transmit>

  //Set Time
  sTime.Hours = 12;
 80005bc:	230c      	movs	r3, #12
 80005be:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  sTime.Minutes = 59;
 80005c2:	233b      	movs	r3, #59	; 0x3b
 80005c4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  sTime.Seconds = 50;
 80005c8:	2332      	movs	r3, #50	; 0x32
 80005ca:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  HAL_RTC_SetTime(RtcHandle, &sTime, RTC_FORMAT_BIN);
 80005ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005d2:	2200      	movs	r2, #0
 80005d4:	4619      	mov	r1, r3
 80005d6:	483a      	ldr	r0, [pc, #232]	; (80006c0 <main+0x144>)
 80005d8:	f001 fc66 	bl	8001ea8 <HAL_RTC_SetTime>

  //Set Date
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 80005dc:	2305      	movs	r3, #5
 80005de:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sDate.Month = 1;
 80005e2:	2301      	movs	r3, #1
 80005e4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sDate.Date = 26;
 80005e8:	231a      	movs	r3, #26
 80005ea:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sDate.Year = 24; // from 0-99 (1972 == 72, start year = 1900)
 80005ee:	2318      	movs	r3, #24
 80005f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  HAL_RTC_SetDate(RtcHandle, &sDate, RTC_FORMAT_BIN);
 80005f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005f8:	2200      	movs	r2, #0
 80005fa:	4619      	mov	r1, r3
 80005fc:	4830      	ldr	r0, [pc, #192]	; (80006c0 <main+0x144>)
 80005fe:	f001 fd4b 	bl	8002098 <HAL_RTC_SetDate>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 HAL_RTC_GetTime(RtcHandle, &sTime, RTC_FORMAT_BIN);
 8000602:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000606:	2200      	movs	r2, #0
 8000608:	4619      	mov	r1, r3
 800060a:	482d      	ldr	r0, [pc, #180]	; (80006c0 <main+0x144>)
 800060c:	f001 fce6 	bl	8001fdc <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(RtcHandle, &sDate, RTC_FORMAT_BIN);
 8000610:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000614:	2200      	movs	r2, #0
 8000616:	4619      	mov	r1, r3
 8000618:	4829      	ldr	r0, [pc, #164]	; (80006c0 <main+0x144>)
 800061a:	f001 fdc1 	bl	80021a0 <HAL_RTC_GetDate>
	 uint16_t mseconds = (sTime.SubSeconds * 1000) / (sTime.SecondFraction + 1);
 800061e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000620:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000624:	fb03 f202 	mul.w	r2, r3, r2
 8000628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800062a:	3301      	adds	r3, #1
 800062c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000630:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	 // Send time and date over uart
	 size = sprintf(message, "Date: %2.2u-%2.2u-%4.4u   ", sDate.Month, sDate.Date, sDate.Year + YearStart);
 8000634:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000638:	4619      	mov	r1, r3
 800063a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800063e:	461c      	mov	r4, r3
 8000640:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000644:	461a      	mov	r2, r3
 8000646:	4b21      	ldr	r3, [pc, #132]	; (80006cc <main+0x150>)
 8000648:	881b      	ldrh	r3, [r3, #0]
 800064a:	4413      	add	r3, r2
 800064c:	4638      	mov	r0, r7
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	4623      	mov	r3, r4
 8000652:	460a      	mov	r2, r1
 8000654:	491e      	ldr	r1, [pc, #120]	; (80006d0 <main+0x154>)
 8000656:	f002 fbf3 	bl	8002e40 <siprintf>
 800065a:	4603      	mov	r3, r0
 800065c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 HAL_UART_Transmit(UartHandle, (uint8_t*)message, size, 50);
 8000660:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000664:	b29a      	uxth	r2, r3
 8000666:	4639      	mov	r1, r7
 8000668:	2332      	movs	r3, #50	; 0x32
 800066a:	4817      	ldr	r0, [pc, #92]	; (80006c8 <main+0x14c>)
 800066c:	f002 f873 	bl	8002756 <HAL_UART_Transmit>
	 size = sprintf(message, "Time: %2.2u:%2.2u:%2.2u:%3.3u\n\r", sTime.Hours, sTime.Minutes, sTime.Seconds, mseconds);
 8000670:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000674:	4619      	mov	r1, r3
 8000676:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800067a:	461c      	mov	r4, r3
 800067c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000680:	461a      	mov	r2, r3
 8000682:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8000686:	4638      	mov	r0, r7
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	9200      	str	r2, [sp, #0]
 800068c:	4623      	mov	r3, r4
 800068e:	460a      	mov	r2, r1
 8000690:	4910      	ldr	r1, [pc, #64]	; (80006d4 <main+0x158>)
 8000692:	f002 fbd5 	bl	8002e40 <siprintf>
 8000696:	4603      	mov	r3, r0
 8000698:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 HAL_UART_Transmit(UartHandle, (uint8_t*)message, size, 50);
 800069c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	4639      	mov	r1, r7
 80006a4:	2332      	movs	r3, #50	; 0x32
 80006a6:	4808      	ldr	r0, [pc, #32]	; (80006c8 <main+0x14c>)
 80006a8:	f002 f855 	bl	8002756 <HAL_UART_Transmit>

	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80006ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006b0:	4809      	ldr	r0, [pc, #36]	; (80006d8 <main+0x15c>)
 80006b2:	f000 fde0 	bl	8001276 <HAL_GPIO_TogglePin>
	 HAL_Delay(1000);
 80006b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ba:	f000 fb35 	bl	8000d28 <HAL_Delay>
  {
 80006be:	e7a0      	b.n	8000602 <main+0x86>
 80006c0:	2000007c 	.word	0x2000007c
 80006c4:	080037a0 	.word	0x080037a0
 80006c8:	2000009c 	.word	0x2000009c
 80006cc:	20000000 	.word	0x20000000
 80006d0:	080037ac 	.word	0x080037ac
 80006d4:	080037c8 	.word	0x080037c8
 80006d8:	40020c00 	.word	0x40020c00

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b094      	sub	sp, #80	; 0x50
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	2230      	movs	r2, #48	; 0x30
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f002 fbc8 	bl	8002e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	4b28      	ldr	r3, [pc, #160]	; (80007a8 <SystemClock_Config+0xcc>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	4a27      	ldr	r2, [pc, #156]	; (80007a8 <SystemClock_Config+0xcc>)
 800070a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070e:	6413      	str	r3, [r2, #64]	; 0x40
 8000710:	4b25      	ldr	r3, [pc, #148]	; (80007a8 <SystemClock_Config+0xcc>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	4b22      	ldr	r3, [pc, #136]	; (80007ac <SystemClock_Config+0xd0>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a21      	ldr	r2, [pc, #132]	; (80007ac <SystemClock_Config+0xd0>)
 8000726:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <SystemClock_Config+0xd0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000738:	2301      	movs	r3, #1
 800073a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800073c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000742:	2302      	movs	r3, #2
 8000744:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000746:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800074a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800074c:	2304      	movs	r3, #4
 800074e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000750:	23c0      	movs	r3, #192	; 0xc0
 8000752:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000754:	2304      	movs	r3, #4
 8000756:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000758:	2308      	movs	r3, #8
 800075a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 0320 	add.w	r3, r7, #32
 8000760:	4618      	mov	r0, r3
 8000762:	f000 fda3 	bl	80012ac <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800076c:	f000 f92a 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000770:	230f      	movs	r3, #15
 8000772:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000774:	2302      	movs	r3, #2
 8000776:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800077c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000780:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000786:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	2103      	movs	r1, #3
 800078e:	4618      	mov	r0, r3
 8000790:	f001 f804 	bl	800179c <HAL_RCC_ClockConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800079a:	f000 f913 	bl	80009c4 <Error_Handler>
  }
}
 800079e:	bf00      	nop
 80007a0:	3750      	adds	r7, #80	; 0x50
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40007000 	.word	0x40007000

080007b0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b090      	sub	sp, #64	; 0x40
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80007b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80007c6:	2300      	movs	r3, #0
 80007c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80007ca:	463b      	mov	r3, r7
 80007cc:	2228      	movs	r2, #40	; 0x28
 80007ce:	2100      	movs	r1, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f002 fb55 	bl	8002e80 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007d6:	4b3b      	ldr	r3, [pc, #236]	; (80008c4 <MX_RTC_Init+0x114>)
 80007d8:	4a3b      	ldr	r2, [pc, #236]	; (80008c8 <MX_RTC_Init+0x118>)
 80007da:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007dc:	4b39      	ldr	r3, [pc, #228]	; (80008c4 <MX_RTC_Init+0x114>)
 80007de:	2200      	movs	r2, #0
 80007e0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 125-1;
 80007e2:	4b38      	ldr	r3, [pc, #224]	; (80008c4 <MX_RTC_Init+0x114>)
 80007e4:	227c      	movs	r2, #124	; 0x7c
 80007e6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 8000-1;
 80007e8:	4b36      	ldr	r3, [pc, #216]	; (80008c4 <MX_RTC_Init+0x114>)
 80007ea:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80007ee:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007f0:	4b34      	ldr	r3, [pc, #208]	; (80008c4 <MX_RTC_Init+0x114>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007f6:	4b33      	ldr	r3, [pc, #204]	; (80008c4 <MX_RTC_Init+0x114>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007fc:	4b31      	ldr	r3, [pc, #196]	; (80008c4 <MX_RTC_Init+0x114>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000802:	4830      	ldr	r0, [pc, #192]	; (80008c4 <MX_RTC_Init+0x114>)
 8000804:	f001 fada 	bl	8001dbc <HAL_RTC_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800080e:	f000 f8d9 	bl	80009c4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000824:	2300      	movs	r3, #0
 8000826:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000828:	2300      	movs	r3, #0
 800082a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800082c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000830:	2200      	movs	r2, #0
 8000832:	4619      	mov	r1, r3
 8000834:	4823      	ldr	r0, [pc, #140]	; (80008c4 <MX_RTC_Init+0x114>)
 8000836:	f001 fb37 	bl	8001ea8 <HAL_RTC_SetTime>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000840:	f000 f8c0 	bl	80009c4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000844:	2301      	movs	r3, #1
 8000846:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800084a:	2301      	movs	r3, #1
 800084c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 1;
 8000850:	2301      	movs	r3, #1
 8000852:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800085c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000860:	2200      	movs	r2, #0
 8000862:	4619      	mov	r1, r3
 8000864:	4817      	ldr	r0, [pc, #92]	; (80008c4 <MX_RTC_Init+0x114>)
 8000866:	f001 fc17 	bl	8002098 <HAL_RTC_SetDate>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000870:	f000 f8a8 	bl	80009c4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000888:	2300      	movs	r3, #0
 800088a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000890:	2300      	movs	r3, #0
 8000892:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8000898:	2301      	movs	r3, #1
 800089a:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800089e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80008a4:	463b      	mov	r3, r7
 80008a6:	2200      	movs	r2, #0
 80008a8:	4619      	mov	r1, r3
 80008aa:	4806      	ldr	r0, [pc, #24]	; (80008c4 <MX_RTC_Init+0x114>)
 80008ac:	f001 fcc7 	bl	800223e <HAL_RTC_SetAlarm>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 80008b6:	f000 f885 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	3740      	adds	r7, #64	; 0x40
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	2000007c 	.word	0x2000007c
 80008c8:	40002800 	.word	0x40002800

080008cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_USART1_UART_Init+0x4c>)
 80008d2:	4a12      	ldr	r2, [pc, #72]	; (800091c <MX_USART1_UART_Init+0x50>)
 80008d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <MX_USART1_UART_Init+0x4c>)
 80008d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_USART1_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_USART1_UART_Init+0x4c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_USART1_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_USART1_UART_Init+0x4c>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <MX_USART1_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_USART1_UART_Init+0x4c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_USART1_UART_Init+0x4c>)
 8000904:	f001 feda 	bl	80026bc <HAL_UART_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800090e:	f000 f859 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	2000009c 	.word	0x2000009c
 800091c:	40011000 	.word	0x40011000

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	4b20      	ldr	r3, [pc, #128]	; (80009bc <MX_GPIO_Init+0x9c>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a1f      	ldr	r2, [pc, #124]	; (80009bc <MX_GPIO_Init+0x9c>)
 8000940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <MX_GPIO_Init+0x9c>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b19      	ldr	r3, [pc, #100]	; (80009bc <MX_GPIO_Init+0x9c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a18      	ldr	r2, [pc, #96]	; (80009bc <MX_GPIO_Init+0x9c>)
 800095c:	f043 0308 	orr.w	r3, r3, #8
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b16      	ldr	r3, [pc, #88]	; (80009bc <MX_GPIO_Init+0x9c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0308 	and.w	r3, r3, #8
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	4b12      	ldr	r3, [pc, #72]	; (80009bc <MX_GPIO_Init+0x9c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a11      	ldr	r2, [pc, #68]	; (80009bc <MX_GPIO_Init+0x9c>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_GPIO_Init+0x9c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000990:	480b      	ldr	r0, [pc, #44]	; (80009c0 <MX_GPIO_Init+0xa0>)
 8000992:	f000 fc57 	bl	8001244 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000996:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800099a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	4619      	mov	r1, r3
 80009ae:	4804      	ldr	r0, [pc, #16]	; (80009c0 <MX_GPIO_Init+0xa0>)
 80009b0:	f000 fac4 	bl	8000f3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b4:	bf00      	nop
 80009b6:	3720      	adds	r7, #32
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020c00 	.word	0x40020c00

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009cc:	e7fe      	b.n	80009cc <Error_Handler+0x8>
	...

080009d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <HAL_MspInit+0x4c>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	4a0f      	ldr	r2, [pc, #60]	; (8000a1c <HAL_MspInit+0x4c>)
 80009e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e4:	6453      	str	r3, [r2, #68]	; 0x44
 80009e6:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <HAL_MspInit+0x4c>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <HAL_MspInit+0x4c>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	4a08      	ldr	r2, [pc, #32]	; (8000a1c <HAL_MspInit+0x4c>)
 80009fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a00:	6413      	str	r3, [r2, #64]	; 0x40
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_MspInit+0x4c>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a0e:	2007      	movs	r0, #7
 8000a10:	f000 fa60 	bl	8000ed4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a14:	bf00      	nop
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40023800 	.word	0x40023800

08000a20 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b088      	sub	sp, #32
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a28:	f107 0308 	add.w	r3, r7, #8
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
 8000a38:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a0c      	ldr	r2, [pc, #48]	; (8000a70 <HAL_RTC_MspInit+0x50>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d110      	bne.n	8000a66 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a44:	2302      	movs	r3, #2
 8000a46:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV8;
 8000a48:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <HAL_RTC_MspInit+0x54>)
 8000a4a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a4c:	f107 0308 	add.w	r3, r7, #8
 8000a50:	4618      	mov	r0, r3
 8000a52:	f001 f8c3 	bl	8001bdc <HAL_RCCEx_PeriphCLKConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000a5c:	f7ff ffb2 	bl	80009c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <HAL_RTC_MspInit+0x58>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a66:	bf00      	nop
 8000a68:	3720      	adds	r7, #32
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40002800 	.word	0x40002800
 8000a74:	00080300 	.word	0x00080300
 8000a78:	42470e3c 	.word	0x42470e3c

08000a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	; 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a19      	ldr	r2, [pc, #100]	; (8000b00 <HAL_UART_MspInit+0x84>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d12b      	bne.n	8000af6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <HAL_UART_MspInit+0x88>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	4a17      	ldr	r2, [pc, #92]	; (8000b04 <HAL_UART_MspInit+0x88>)
 8000aa8:	f043 0310 	orr.w	r3, r3, #16
 8000aac:	6453      	str	r3, [r2, #68]	; 0x44
 8000aae:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <HAL_UART_MspInit+0x88>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	f003 0310 	and.w	r3, r3, #16
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <HAL_UART_MspInit+0x88>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a10      	ldr	r2, [pc, #64]	; (8000b04 <HAL_UART_MspInit+0x88>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <HAL_UART_MspInit+0x88>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ad6:	23c0      	movs	r3, #192	; 0xc0
 8000ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ae6:	2307      	movs	r3, #7
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	4805      	ldr	r0, [pc, #20]	; (8000b08 <HAL_UART_MspInit+0x8c>)
 8000af2:	f000 fa23 	bl	8000f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000af6:	bf00      	nop
 8000af8:	3728      	adds	r7, #40	; 0x28
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40011000 	.word	0x40011000
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020400 	.word	0x40020400

08000b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <NMI_Handler+0x4>

08000b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b16:	e7fe      	b.n	8000b16 <HardFault_Handler+0x4>

08000b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <MemManage_Handler+0x4>

08000b1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <BusFault_Handler+0x4>

08000b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <UsageFault_Handler+0x4>

08000b2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b58:	f000 f8c6 	bl	8000ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b68:	4a14      	ldr	r2, [pc, #80]	; (8000bbc <_sbrk+0x5c>)
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <_sbrk+0x60>)
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b74:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <_sbrk+0x64>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d102      	bne.n	8000b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <_sbrk+0x64>)
 8000b7e:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <_sbrk+0x68>)
 8000b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b82:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <_sbrk+0x64>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d207      	bcs.n	8000ba0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b90:	f002 f97e 	bl	8002e90 <__errno>
 8000b94:	4603      	mov	r3, r0
 8000b96:	220c      	movs	r2, #12
 8000b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9e:	e009      	b.n	8000bb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <_sbrk+0x64>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ba6:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <_sbrk+0x64>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	4a05      	ldr	r2, [pc, #20]	; (8000bc4 <_sbrk+0x64>)
 8000bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3718      	adds	r7, #24
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20020000 	.word	0x20020000
 8000bc0:	00000400 	.word	0x00000400
 8000bc4:	200000e0 	.word	0x200000e0
 8000bc8:	20000230 	.word	0x20000230

08000bcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <SystemInit+0x20>)
 8000bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bd6:	4a05      	ldr	r2, [pc, #20]	; (8000bec <SystemInit+0x20>)
 8000bd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bf4:	480d      	ldr	r0, [pc, #52]	; (8000c2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bf6:	490e      	ldr	r1, [pc, #56]	; (8000c30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bf8:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bfc:	e002      	b.n	8000c04 <LoopCopyDataInit>

08000bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c02:	3304      	adds	r3, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c08:	d3f9      	bcc.n	8000bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0a:	4a0b      	ldr	r2, [pc, #44]	; (8000c38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c0c:	4c0b      	ldr	r4, [pc, #44]	; (8000c3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c10:	e001      	b.n	8000c16 <LoopFillZerobss>

08000c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c14:	3204      	adds	r2, #4

08000c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c18:	d3fb      	bcc.n	8000c12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c1a:	f7ff ffd7 	bl	8000bcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c1e:	f002 f93d 	bl	8002e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c22:	f7ff fcab 	bl	800057c <main>
  bx  lr    
 8000c26:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c30:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c34:	08003844 	.word	0x08003844
  ldr r2, =_sbss
 8000c38:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c3c:	20000230 	.word	0x20000230

08000c40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c40:	e7fe      	b.n	8000c40 <ADC_IRQHandler>
	...

08000c44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c48:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <HAL_Init+0x40>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	; (8000c84 <HAL_Init+0x40>)
 8000c4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <HAL_Init+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <HAL_Init+0x40>)
 8000c5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <HAL_Init+0x40>)
 8000c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c6c:	2003      	movs	r0, #3
 8000c6e:	f000 f931 	bl	8000ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c72:	2000      	movs	r0, #0
 8000c74:	f000 f808 	bl	8000c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c78:	f7ff feaa 	bl	80009d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023c00 	.word	0x40023c00

08000c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <HAL_InitTick+0x54>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_InitTick+0x58>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 f93b 	bl	8000f22 <HAL_SYSTICK_Config>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e00e      	b.n	8000cd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b0f      	cmp	r3, #15
 8000cba:	d80a      	bhi.n	8000cd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc4:	f000 f911 	bl	8000eea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc8:	4a06      	ldr	r2, [pc, #24]	; (8000ce4 <HAL_InitTick+0x5c>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	e000      	b.n	8000cd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000004 	.word	0x20000004
 8000ce0:	2000000c 	.word	0x2000000c
 8000ce4:	20000008 	.word	0x20000008

08000ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_IncTick+0x20>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_IncTick+0x24>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <HAL_IncTick+0x24>)
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	2000000c 	.word	0x2000000c
 8000d0c:	200000e4 	.word	0x200000e4

08000d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return uwTick;
 8000d14:	4b03      	ldr	r3, [pc, #12]	; (8000d24 <HAL_GetTick+0x14>)
 8000d16:	681b      	ldr	r3, [r3, #0]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	200000e4 	.word	0x200000e4

08000d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d30:	f7ff ffee 	bl	8000d10 <HAL_GetTick>
 8000d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d40:	d005      	beq.n	8000d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d42:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <HAL_Delay+0x44>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	461a      	mov	r2, r3
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d4e:	bf00      	nop
 8000d50:	f7ff ffde 	bl	8000d10 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d8f7      	bhi.n	8000d50 <HAL_Delay+0x28>
  {
  }
}
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	2000000c 	.word	0x2000000c

08000d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da2:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	60d3      	str	r3, [r2, #12]
}
 8000da8:	bf00      	nop
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	f003 0307 	and.w	r3, r3, #7
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	db0a      	blt.n	8000dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	490c      	ldr	r1, [pc, #48]	; (8000e20 <__NVIC_SetPriority+0x4c>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	0112      	lsls	r2, r2, #4
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	440b      	add	r3, r1
 8000df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dfc:	e00a      	b.n	8000e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4908      	ldr	r1, [pc, #32]	; (8000e24 <__NVIC_SetPriority+0x50>)
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	f003 030f 	and.w	r3, r3, #15
 8000e0a:	3b04      	subs	r3, #4
 8000e0c:	0112      	lsls	r2, r2, #4
 8000e0e:	b2d2      	uxtb	r2, r2
 8000e10:	440b      	add	r3, r1
 8000e12:	761a      	strb	r2, [r3, #24]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000e100 	.word	0xe000e100
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b089      	sub	sp, #36	; 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f1c3 0307 	rsb	r3, r3, #7
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	bf28      	it	cs
 8000e46:	2304      	movcs	r3, #4
 8000e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	2b06      	cmp	r3, #6
 8000e50:	d902      	bls.n	8000e58 <NVIC_EncodePriority+0x30>
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3b03      	subs	r3, #3
 8000e56:	e000      	b.n	8000e5a <NVIC_EncodePriority+0x32>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43da      	mvns	r2, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	43d9      	mvns	r1, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	4313      	orrs	r3, r2
         );
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3724      	adds	r7, #36	; 0x24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ea0:	d301      	bcc.n	8000ea6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e00f      	b.n	8000ec6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <SysTick_Config+0x40>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eae:	210f      	movs	r1, #15
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb4:	f7ff ff8e 	bl	8000dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <SysTick_Config+0x40>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ebe:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <SysTick_Config+0x40>)
 8000ec0:	2207      	movs	r2, #7
 8000ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	e000e010 	.word	0xe000e010

08000ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff ff47 	bl	8000d70 <__NVIC_SetPriorityGrouping>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b086      	sub	sp, #24
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	60b9      	str	r1, [r7, #8]
 8000ef4:	607a      	str	r2, [r7, #4]
 8000ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000efc:	f7ff ff5c 	bl	8000db8 <__NVIC_GetPriorityGrouping>
 8000f00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	68b9      	ldr	r1, [r7, #8]
 8000f06:	6978      	ldr	r0, [r7, #20]
 8000f08:	f7ff ff8e 	bl	8000e28 <NVIC_EncodePriority>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f12:	4611      	mov	r1, r2
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff5d 	bl	8000dd4 <__NVIC_SetPriority>
}
 8000f1a:	bf00      	nop
 8000f1c:	3718      	adds	r7, #24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff ffb0 	bl	8000e90 <SysTick_Config>
 8000f30:	4603      	mov	r3, r0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b089      	sub	sp, #36	; 0x24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
 8000f56:	e159      	b.n	800120c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f58:	2201      	movs	r2, #1
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	f040 8148 	bne.w	8001206 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 0303 	and.w	r3, r3, #3
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d005      	beq.n	8000f8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d130      	bne.n	8000ff0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	2203      	movs	r2, #3
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	68da      	ldr	r2, [r3, #12]
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	091b      	lsrs	r3, r3, #4
 8000fda:	f003 0201 	and.w	r2, r3, #1
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	2b03      	cmp	r3, #3
 8000ffa:	d017      	beq.n	800102c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	2203      	movs	r2, #3
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d123      	bne.n	8001080 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	08da      	lsrs	r2, r3, #3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3208      	adds	r2, #8
 8001040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	f003 0307 	and.w	r3, r3, #7
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	220f      	movs	r2, #15
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	691a      	ldr	r2, [r3, #16]
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	08da      	lsrs	r2, r3, #3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3208      	adds	r2, #8
 800107a:	69b9      	ldr	r1, [r7, #24]
 800107c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	2203      	movs	r2, #3
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0203 	and.w	r2, r3, #3
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f000 80a2 	beq.w	8001206 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	4b57      	ldr	r3, [pc, #348]	; (8001224 <HAL_GPIO_Init+0x2e8>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	4a56      	ldr	r2, [pc, #344]	; (8001224 <HAL_GPIO_Init+0x2e8>)
 80010cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d0:	6453      	str	r3, [r2, #68]	; 0x44
 80010d2:	4b54      	ldr	r3, [pc, #336]	; (8001224 <HAL_GPIO_Init+0x2e8>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010de:	4a52      	ldr	r2, [pc, #328]	; (8001228 <HAL_GPIO_Init+0x2ec>)
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	089b      	lsrs	r3, r3, #2
 80010e4:	3302      	adds	r3, #2
 80010e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f003 0303 	and.w	r3, r3, #3
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	220f      	movs	r2, #15
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4013      	ands	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a49      	ldr	r2, [pc, #292]	; (800122c <HAL_GPIO_Init+0x2f0>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d019      	beq.n	800113e <HAL_GPIO_Init+0x202>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a48      	ldr	r2, [pc, #288]	; (8001230 <HAL_GPIO_Init+0x2f4>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d013      	beq.n	800113a <HAL_GPIO_Init+0x1fe>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a47      	ldr	r2, [pc, #284]	; (8001234 <HAL_GPIO_Init+0x2f8>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d00d      	beq.n	8001136 <HAL_GPIO_Init+0x1fa>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a46      	ldr	r2, [pc, #280]	; (8001238 <HAL_GPIO_Init+0x2fc>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d007      	beq.n	8001132 <HAL_GPIO_Init+0x1f6>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a45      	ldr	r2, [pc, #276]	; (800123c <HAL_GPIO_Init+0x300>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d101      	bne.n	800112e <HAL_GPIO_Init+0x1f2>
 800112a:	2304      	movs	r3, #4
 800112c:	e008      	b.n	8001140 <HAL_GPIO_Init+0x204>
 800112e:	2307      	movs	r3, #7
 8001130:	e006      	b.n	8001140 <HAL_GPIO_Init+0x204>
 8001132:	2303      	movs	r3, #3
 8001134:	e004      	b.n	8001140 <HAL_GPIO_Init+0x204>
 8001136:	2302      	movs	r3, #2
 8001138:	e002      	b.n	8001140 <HAL_GPIO_Init+0x204>
 800113a:	2301      	movs	r3, #1
 800113c:	e000      	b.n	8001140 <HAL_GPIO_Init+0x204>
 800113e:	2300      	movs	r3, #0
 8001140:	69fa      	ldr	r2, [r7, #28]
 8001142:	f002 0203 	and.w	r2, r2, #3
 8001146:	0092      	lsls	r2, r2, #2
 8001148:	4093      	lsls	r3, r2
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4313      	orrs	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001150:	4935      	ldr	r1, [pc, #212]	; (8001228 <HAL_GPIO_Init+0x2ec>)
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	089b      	lsrs	r3, r3, #2
 8001156:	3302      	adds	r3, #2
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800115e:	4b38      	ldr	r3, [pc, #224]	; (8001240 <HAL_GPIO_Init+0x304>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	43db      	mvns	r3, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001182:	4a2f      	ldr	r2, [pc, #188]	; (8001240 <HAL_GPIO_Init+0x304>)
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001188:	4b2d      	ldr	r3, [pc, #180]	; (8001240 <HAL_GPIO_Init+0x304>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011ac:	4a24      	ldr	r2, [pc, #144]	; (8001240 <HAL_GPIO_Init+0x304>)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011b2:	4b23      	ldr	r3, [pc, #140]	; (8001240 <HAL_GPIO_Init+0x304>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011d6:	4a1a      	ldr	r2, [pc, #104]	; (8001240 <HAL_GPIO_Init+0x304>)
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011dc:	4b18      	ldr	r3, [pc, #96]	; (8001240 <HAL_GPIO_Init+0x304>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001200:	4a0f      	ldr	r2, [pc, #60]	; (8001240 <HAL_GPIO_Init+0x304>)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3301      	adds	r3, #1
 800120a:	61fb      	str	r3, [r7, #28]
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	2b0f      	cmp	r3, #15
 8001210:	f67f aea2 	bls.w	8000f58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	3724      	adds	r7, #36	; 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800
 8001228:	40013800 	.word	0x40013800
 800122c:	40020000 	.word	0x40020000
 8001230:	40020400 	.word	0x40020400
 8001234:	40020800 	.word	0x40020800
 8001238:	40020c00 	.word	0x40020c00
 800123c:	40021000 	.word	0x40021000
 8001240:	40013c00 	.word	0x40013c00

08001244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	807b      	strh	r3, [r7, #2]
 8001250:	4613      	mov	r3, r2
 8001252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001254:	787b      	ldrb	r3, [r7, #1]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800125a:	887a      	ldrh	r2, [r7, #2]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001260:	e003      	b.n	800126a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001262:	887b      	ldrh	r3, [r7, #2]
 8001264:	041a      	lsls	r2, r3, #16
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	619a      	str	r2, [r3, #24]
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001276:	b480      	push	{r7}
 8001278:	b085      	sub	sp, #20
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
 800127e:	460b      	mov	r3, r1
 8001280:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001288:	887a      	ldrh	r2, [r7, #2]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	4013      	ands	r3, r2
 800128e:	041a      	lsls	r2, r3, #16
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	43d9      	mvns	r1, r3
 8001294:	887b      	ldrh	r3, [r7, #2]
 8001296:	400b      	ands	r3, r1
 8001298:	431a      	orrs	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	619a      	str	r2, [r3, #24]
}
 800129e:	bf00      	nop
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e267      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d075      	beq.n	80013b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ca:	4b88      	ldr	r3, [pc, #544]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 030c 	and.w	r3, r3, #12
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	d00c      	beq.n	80012f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012d6:	4b85      	ldr	r3, [pc, #532]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012de:	2b08      	cmp	r3, #8
 80012e0:	d112      	bne.n	8001308 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012e2:	4b82      	ldr	r3, [pc, #520]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012ee:	d10b      	bne.n	8001308 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f0:	4b7e      	ldr	r3, [pc, #504]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d05b      	beq.n	80013b4 <HAL_RCC_OscConfig+0x108>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d157      	bne.n	80013b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e242      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001310:	d106      	bne.n	8001320 <HAL_RCC_OscConfig+0x74>
 8001312:	4b76      	ldr	r3, [pc, #472]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a75      	ldr	r2, [pc, #468]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 8001318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	e01d      	b.n	800135c <HAL_RCC_OscConfig+0xb0>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001328:	d10c      	bne.n	8001344 <HAL_RCC_OscConfig+0x98>
 800132a:	4b70      	ldr	r3, [pc, #448]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a6f      	ldr	r2, [pc, #444]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 8001330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	4b6d      	ldr	r3, [pc, #436]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a6c      	ldr	r2, [pc, #432]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 800133c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	e00b      	b.n	800135c <HAL_RCC_OscConfig+0xb0>
 8001344:	4b69      	ldr	r3, [pc, #420]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a68      	ldr	r2, [pc, #416]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 800134a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800134e:	6013      	str	r3, [r2, #0]
 8001350:	4b66      	ldr	r3, [pc, #408]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a65      	ldr	r2, [pc, #404]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 8001356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800135a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d013      	beq.n	800138c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001364:	f7ff fcd4 	bl	8000d10 <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800136c:	f7ff fcd0 	bl	8000d10 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b64      	cmp	r3, #100	; 0x64
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e207      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137e:	4b5b      	ldr	r3, [pc, #364]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d0f0      	beq.n	800136c <HAL_RCC_OscConfig+0xc0>
 800138a:	e014      	b.n	80013b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138c:	f7ff fcc0 	bl	8000d10 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001394:	f7ff fcbc 	bl	8000d10 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b64      	cmp	r3, #100	; 0x64
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e1f3      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a6:	4b51      	ldr	r3, [pc, #324]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f0      	bne.n	8001394 <HAL_RCC_OscConfig+0xe8>
 80013b2:	e000      	b.n	80013b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d063      	beq.n	800148a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013c2:	4b4a      	ldr	r3, [pc, #296]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 030c 	and.w	r3, r3, #12
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00b      	beq.n	80013e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ce:	4b47      	ldr	r3, [pc, #284]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013d6:	2b08      	cmp	r3, #8
 80013d8:	d11c      	bne.n	8001414 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013da:	4b44      	ldr	r3, [pc, #272]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d116      	bne.n	8001414 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e6:	4b41      	ldr	r3, [pc, #260]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d005      	beq.n	80013fe <HAL_RCC_OscConfig+0x152>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d001      	beq.n	80013fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e1c7      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fe:	4b3b      	ldr	r3, [pc, #236]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	691b      	ldr	r3, [r3, #16]
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	4937      	ldr	r1, [pc, #220]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 800140e:	4313      	orrs	r3, r2
 8001410:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001412:	e03a      	b.n	800148a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d020      	beq.n	800145e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800141c:	4b34      	ldr	r3, [pc, #208]	; (80014f0 <HAL_RCC_OscConfig+0x244>)
 800141e:	2201      	movs	r2, #1
 8001420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001422:	f7ff fc75 	bl	8000d10 <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800142a:	f7ff fc71 	bl	8000d10 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e1a8      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143c:	4b2b      	ldr	r3, [pc, #172]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0f0      	beq.n	800142a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001448:	4b28      	ldr	r3, [pc, #160]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	4925      	ldr	r1, [pc, #148]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 8001458:	4313      	orrs	r3, r2
 800145a:	600b      	str	r3, [r1, #0]
 800145c:	e015      	b.n	800148a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800145e:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <HAL_RCC_OscConfig+0x244>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001464:	f7ff fc54 	bl	8000d10 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800146c:	f7ff fc50 	bl	8000d10 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e187      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147e:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1f0      	bne.n	800146c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0308 	and.w	r3, r3, #8
 8001492:	2b00      	cmp	r3, #0
 8001494:	d036      	beq.n	8001504 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d016      	beq.n	80014cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <HAL_RCC_OscConfig+0x248>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a4:	f7ff fc34 	bl	8000d10 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ac:	f7ff fc30 	bl	8000d10 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e167      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014be:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 80014c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f0      	beq.n	80014ac <HAL_RCC_OscConfig+0x200>
 80014ca:	e01b      	b.n	8001504 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <HAL_RCC_OscConfig+0x248>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d2:	f7ff fc1d 	bl	8000d10 <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d8:	e00e      	b.n	80014f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014da:	f7ff fc19 	bl	8000d10 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d907      	bls.n	80014f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e150      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
 80014ec:	40023800 	.word	0x40023800
 80014f0:	42470000 	.word	0x42470000
 80014f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f8:	4b88      	ldr	r3, [pc, #544]	; (800171c <HAL_RCC_OscConfig+0x470>)
 80014fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1ea      	bne.n	80014da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 8097 	beq.w	8001640 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001512:	2300      	movs	r3, #0
 8001514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001516:	4b81      	ldr	r3, [pc, #516]	; (800171c <HAL_RCC_OscConfig+0x470>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10f      	bne.n	8001542 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	4b7d      	ldr	r3, [pc, #500]	; (800171c <HAL_RCC_OscConfig+0x470>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	4a7c      	ldr	r2, [pc, #496]	; (800171c <HAL_RCC_OscConfig+0x470>)
 800152c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001530:	6413      	str	r3, [r2, #64]	; 0x40
 8001532:	4b7a      	ldr	r3, [pc, #488]	; (800171c <HAL_RCC_OscConfig+0x470>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800153e:	2301      	movs	r3, #1
 8001540:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001542:	4b77      	ldr	r3, [pc, #476]	; (8001720 <HAL_RCC_OscConfig+0x474>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154a:	2b00      	cmp	r3, #0
 800154c:	d118      	bne.n	8001580 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800154e:	4b74      	ldr	r3, [pc, #464]	; (8001720 <HAL_RCC_OscConfig+0x474>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a73      	ldr	r2, [pc, #460]	; (8001720 <HAL_RCC_OscConfig+0x474>)
 8001554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800155a:	f7ff fbd9 	bl	8000d10 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001562:	f7ff fbd5 	bl	8000d10 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e10c      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001574:	4b6a      	ldr	r3, [pc, #424]	; (8001720 <HAL_RCC_OscConfig+0x474>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0f0      	beq.n	8001562 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d106      	bne.n	8001596 <HAL_RCC_OscConfig+0x2ea>
 8001588:	4b64      	ldr	r3, [pc, #400]	; (800171c <HAL_RCC_OscConfig+0x470>)
 800158a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158c:	4a63      	ldr	r2, [pc, #396]	; (800171c <HAL_RCC_OscConfig+0x470>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	6713      	str	r3, [r2, #112]	; 0x70
 8001594:	e01c      	b.n	80015d0 <HAL_RCC_OscConfig+0x324>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2b05      	cmp	r3, #5
 800159c:	d10c      	bne.n	80015b8 <HAL_RCC_OscConfig+0x30c>
 800159e:	4b5f      	ldr	r3, [pc, #380]	; (800171c <HAL_RCC_OscConfig+0x470>)
 80015a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a2:	4a5e      	ldr	r2, [pc, #376]	; (800171c <HAL_RCC_OscConfig+0x470>)
 80015a4:	f043 0304 	orr.w	r3, r3, #4
 80015a8:	6713      	str	r3, [r2, #112]	; 0x70
 80015aa:	4b5c      	ldr	r3, [pc, #368]	; (800171c <HAL_RCC_OscConfig+0x470>)
 80015ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ae:	4a5b      	ldr	r2, [pc, #364]	; (800171c <HAL_RCC_OscConfig+0x470>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6713      	str	r3, [r2, #112]	; 0x70
 80015b6:	e00b      	b.n	80015d0 <HAL_RCC_OscConfig+0x324>
 80015b8:	4b58      	ldr	r3, [pc, #352]	; (800171c <HAL_RCC_OscConfig+0x470>)
 80015ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015bc:	4a57      	ldr	r2, [pc, #348]	; (800171c <HAL_RCC_OscConfig+0x470>)
 80015be:	f023 0301 	bic.w	r3, r3, #1
 80015c2:	6713      	str	r3, [r2, #112]	; 0x70
 80015c4:	4b55      	ldr	r3, [pc, #340]	; (800171c <HAL_RCC_OscConfig+0x470>)
 80015c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c8:	4a54      	ldr	r2, [pc, #336]	; (800171c <HAL_RCC_OscConfig+0x470>)
 80015ca:	f023 0304 	bic.w	r3, r3, #4
 80015ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d015      	beq.n	8001604 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d8:	f7ff fb9a 	bl	8000d10 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015de:	e00a      	b.n	80015f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015e0:	f7ff fb96 	bl	8000d10 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e0cb      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f6:	4b49      	ldr	r3, [pc, #292]	; (800171c <HAL_RCC_OscConfig+0x470>)
 80015f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0ee      	beq.n	80015e0 <HAL_RCC_OscConfig+0x334>
 8001602:	e014      	b.n	800162e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001604:	f7ff fb84 	bl	8000d10 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800160a:	e00a      	b.n	8001622 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800160c:	f7ff fb80 	bl	8000d10 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	f241 3288 	movw	r2, #5000	; 0x1388
 800161a:	4293      	cmp	r3, r2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e0b5      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001622:	4b3e      	ldr	r3, [pc, #248]	; (800171c <HAL_RCC_OscConfig+0x470>)
 8001624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ee      	bne.n	800160c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800162e:	7dfb      	ldrb	r3, [r7, #23]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d105      	bne.n	8001640 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001634:	4b39      	ldr	r3, [pc, #228]	; (800171c <HAL_RCC_OscConfig+0x470>)
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	4a38      	ldr	r2, [pc, #224]	; (800171c <HAL_RCC_OscConfig+0x470>)
 800163a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800163e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	2b00      	cmp	r3, #0
 8001646:	f000 80a1 	beq.w	800178c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800164a:	4b34      	ldr	r3, [pc, #208]	; (800171c <HAL_RCC_OscConfig+0x470>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 030c 	and.w	r3, r3, #12
 8001652:	2b08      	cmp	r3, #8
 8001654:	d05c      	beq.n	8001710 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	2b02      	cmp	r3, #2
 800165c:	d141      	bne.n	80016e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165e:	4b31      	ldr	r3, [pc, #196]	; (8001724 <HAL_RCC_OscConfig+0x478>)
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7ff fb54 	bl	8000d10 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800166c:	f7ff fb50 	bl	8000d10 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e087      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167e:	4b27      	ldr	r3, [pc, #156]	; (800171c <HAL_RCC_OscConfig+0x470>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f0      	bne.n	800166c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69da      	ldr	r2, [r3, #28]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001698:	019b      	lsls	r3, r3, #6
 800169a:	431a      	orrs	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a0:	085b      	lsrs	r3, r3, #1
 80016a2:	3b01      	subs	r3, #1
 80016a4:	041b      	lsls	r3, r3, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ac:	061b      	lsls	r3, r3, #24
 80016ae:	491b      	ldr	r1, [pc, #108]	; (800171c <HAL_RCC_OscConfig+0x470>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016b4:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <HAL_RCC_OscConfig+0x478>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ba:	f7ff fb29 	bl	8000d10 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c2:	f7ff fb25 	bl	8000d10 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e05c      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <HAL_RCC_OscConfig+0x470>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0f0      	beq.n	80016c2 <HAL_RCC_OscConfig+0x416>
 80016e0:	e054      	b.n	800178c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e2:	4b10      	ldr	r3, [pc, #64]	; (8001724 <HAL_RCC_OscConfig+0x478>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e8:	f7ff fb12 	bl	8000d10 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f0:	f7ff fb0e 	bl	8000d10 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e045      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_RCC_OscConfig+0x470>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0x444>
 800170e:	e03d      	b.n	800178c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d107      	bne.n	8001728 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e038      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
 800171c:	40023800 	.word	0x40023800
 8001720:	40007000 	.word	0x40007000
 8001724:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001728:	4b1b      	ldr	r3, [pc, #108]	; (8001798 <HAL_RCC_OscConfig+0x4ec>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d028      	beq.n	8001788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001740:	429a      	cmp	r2, r3
 8001742:	d121      	bne.n	8001788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174e:	429a      	cmp	r2, r3
 8001750:	d11a      	bne.n	8001788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001758:	4013      	ands	r3, r2
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800175e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001760:	4293      	cmp	r3, r2
 8001762:	d111      	bne.n	8001788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176e:	085b      	lsrs	r3, r3, #1
 8001770:	3b01      	subs	r3, #1
 8001772:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001774:	429a      	cmp	r2, r3
 8001776:	d107      	bne.n	8001788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001782:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001784:	429a      	cmp	r2, r3
 8001786:	d001      	beq.n	800178c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e000      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800

0800179c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e0cc      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017b0:	4b68      	ldr	r3, [pc, #416]	; (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d90c      	bls.n	80017d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017be:	4b65      	ldr	r3, [pc, #404]	; (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c6:	4b63      	ldr	r3, [pc, #396]	; (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d001      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e0b8      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d020      	beq.n	8001826 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d005      	beq.n	80017fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017f0:	4b59      	ldr	r3, [pc, #356]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	4a58      	ldr	r2, [pc, #352]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0308 	and.w	r3, r3, #8
 8001804:	2b00      	cmp	r3, #0
 8001806:	d005      	beq.n	8001814 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001808:	4b53      	ldr	r3, [pc, #332]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	4a52      	ldr	r2, [pc, #328]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001812:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001814:	4b50      	ldr	r3, [pc, #320]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	494d      	ldr	r1, [pc, #308]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	4313      	orrs	r3, r2
 8001824:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d044      	beq.n	80018bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d107      	bne.n	800184a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183a:	4b47      	ldr	r3, [pc, #284]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d119      	bne.n	800187a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e07f      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d003      	beq.n	800185a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001856:	2b03      	cmp	r3, #3
 8001858:	d107      	bne.n	800186a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800185a:	4b3f      	ldr	r3, [pc, #252]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d109      	bne.n	800187a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e06f      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186a:	4b3b      	ldr	r3, [pc, #236]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e067      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800187a:	4b37      	ldr	r3, [pc, #220]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f023 0203 	bic.w	r2, r3, #3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	4934      	ldr	r1, [pc, #208]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	4313      	orrs	r3, r2
 800188a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800188c:	f7ff fa40 	bl	8000d10 <HAL_GetTick>
 8001890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001892:	e00a      	b.n	80018aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001894:	f7ff fa3c 	bl	8000d10 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e04f      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018aa:	4b2b      	ldr	r3, [pc, #172]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 020c 	and.w	r2, r3, #12
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d1eb      	bne.n	8001894 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018bc:	4b25      	ldr	r3, [pc, #148]	; (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d20c      	bcs.n	80018e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ca:	4b22      	ldr	r3, [pc, #136]	; (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d2:	4b20      	ldr	r3, [pc, #128]	; (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d001      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e032      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d008      	beq.n	8001902 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018f0:	4b19      	ldr	r3, [pc, #100]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	4916      	ldr	r1, [pc, #88]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0308 	and.w	r3, r3, #8
 800190a:	2b00      	cmp	r3, #0
 800190c:	d009      	beq.n	8001922 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800190e:	4b12      	ldr	r3, [pc, #72]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	490e      	ldr	r1, [pc, #56]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	4313      	orrs	r3, r2
 8001920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001922:	f000 f821 	bl	8001968 <HAL_RCC_GetSysClockFreq>
 8001926:	4602      	mov	r2, r0
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	091b      	lsrs	r3, r3, #4
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	490a      	ldr	r1, [pc, #40]	; (800195c <HAL_RCC_ClockConfig+0x1c0>)
 8001934:	5ccb      	ldrb	r3, [r1, r3]
 8001936:	fa22 f303 	lsr.w	r3, r2, r3
 800193a:	4a09      	ldr	r2, [pc, #36]	; (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 800193c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <HAL_RCC_ClockConfig+0x1c8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff f9a0 	bl	8000c88 <HAL_InitTick>

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40023c00 	.word	0x40023c00
 8001958:	40023800 	.word	0x40023800
 800195c:	080037e8 	.word	0x080037e8
 8001960:	20000004 	.word	0x20000004
 8001964:	20000008 	.word	0x20000008

08001968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800196c:	b094      	sub	sp, #80	; 0x50
 800196e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001970:	2300      	movs	r3, #0
 8001972:	647b      	str	r3, [r7, #68]	; 0x44
 8001974:	2300      	movs	r3, #0
 8001976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001978:	2300      	movs	r3, #0
 800197a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001980:	4b79      	ldr	r3, [pc, #484]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f003 030c 	and.w	r3, r3, #12
 8001988:	2b08      	cmp	r3, #8
 800198a:	d00d      	beq.n	80019a8 <HAL_RCC_GetSysClockFreq+0x40>
 800198c:	2b08      	cmp	r3, #8
 800198e:	f200 80e1 	bhi.w	8001b54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001992:	2b00      	cmp	r3, #0
 8001994:	d002      	beq.n	800199c <HAL_RCC_GetSysClockFreq+0x34>
 8001996:	2b04      	cmp	r3, #4
 8001998:	d003      	beq.n	80019a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800199a:	e0db      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800199c:	4b73      	ldr	r3, [pc, #460]	; (8001b6c <HAL_RCC_GetSysClockFreq+0x204>)
 800199e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80019a0:	e0db      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019a2:	4b73      	ldr	r3, [pc, #460]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x208>)
 80019a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019a6:	e0d8      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019a8:	4b6f      	ldr	r3, [pc, #444]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019b2:	4b6d      	ldr	r3, [pc, #436]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d063      	beq.n	8001a86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019be:	4b6a      	ldr	r3, [pc, #424]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	099b      	lsrs	r3, r3, #6
 80019c4:	2200      	movs	r2, #0
 80019c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80019c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019d0:	633b      	str	r3, [r7, #48]	; 0x30
 80019d2:	2300      	movs	r3, #0
 80019d4:	637b      	str	r3, [r7, #52]	; 0x34
 80019d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019da:	4622      	mov	r2, r4
 80019dc:	462b      	mov	r3, r5
 80019de:	f04f 0000 	mov.w	r0, #0
 80019e2:	f04f 0100 	mov.w	r1, #0
 80019e6:	0159      	lsls	r1, r3, #5
 80019e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019ec:	0150      	lsls	r0, r2, #5
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4621      	mov	r1, r4
 80019f4:	1a51      	subs	r1, r2, r1
 80019f6:	6139      	str	r1, [r7, #16]
 80019f8:	4629      	mov	r1, r5
 80019fa:	eb63 0301 	sbc.w	r3, r3, r1
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	f04f 0300 	mov.w	r3, #0
 8001a08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a0c:	4659      	mov	r1, fp
 8001a0e:	018b      	lsls	r3, r1, #6
 8001a10:	4651      	mov	r1, sl
 8001a12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a16:	4651      	mov	r1, sl
 8001a18:	018a      	lsls	r2, r1, #6
 8001a1a:	4651      	mov	r1, sl
 8001a1c:	ebb2 0801 	subs.w	r8, r2, r1
 8001a20:	4659      	mov	r1, fp
 8001a22:	eb63 0901 	sbc.w	r9, r3, r1
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a3a:	4690      	mov	r8, r2
 8001a3c:	4699      	mov	r9, r3
 8001a3e:	4623      	mov	r3, r4
 8001a40:	eb18 0303 	adds.w	r3, r8, r3
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	462b      	mov	r3, r5
 8001a48:	eb49 0303 	adc.w	r3, r9, r3
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	f04f 0300 	mov.w	r3, #0
 8001a56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a5a:	4629      	mov	r1, r5
 8001a5c:	024b      	lsls	r3, r1, #9
 8001a5e:	4621      	mov	r1, r4
 8001a60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a64:	4621      	mov	r1, r4
 8001a66:	024a      	lsls	r2, r1, #9
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a6e:	2200      	movs	r2, #0
 8001a70:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a78:	f7fe fc02 	bl	8000280 <__aeabi_uldivmod>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4613      	mov	r3, r2
 8001a82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a84:	e058      	b.n	8001b38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a86:	4b38      	ldr	r3, [pc, #224]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	099b      	lsrs	r3, r3, #6
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	4611      	mov	r1, r2
 8001a92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a96:	623b      	str	r3, [r7, #32]
 8001a98:	2300      	movs	r3, #0
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001aa0:	4642      	mov	r2, r8
 8001aa2:	464b      	mov	r3, r9
 8001aa4:	f04f 0000 	mov.w	r0, #0
 8001aa8:	f04f 0100 	mov.w	r1, #0
 8001aac:	0159      	lsls	r1, r3, #5
 8001aae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ab2:	0150      	lsls	r0, r2, #5
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4641      	mov	r1, r8
 8001aba:	ebb2 0a01 	subs.w	sl, r2, r1
 8001abe:	4649      	mov	r1, r9
 8001ac0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ad0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ad4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ad8:	ebb2 040a 	subs.w	r4, r2, sl
 8001adc:	eb63 050b 	sbc.w	r5, r3, fp
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	00eb      	lsls	r3, r5, #3
 8001aea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001aee:	00e2      	lsls	r2, r4, #3
 8001af0:	4614      	mov	r4, r2
 8001af2:	461d      	mov	r5, r3
 8001af4:	4643      	mov	r3, r8
 8001af6:	18e3      	adds	r3, r4, r3
 8001af8:	603b      	str	r3, [r7, #0]
 8001afa:	464b      	mov	r3, r9
 8001afc:	eb45 0303 	adc.w	r3, r5, r3
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b0e:	4629      	mov	r1, r5
 8001b10:	028b      	lsls	r3, r1, #10
 8001b12:	4621      	mov	r1, r4
 8001b14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b18:	4621      	mov	r1, r4
 8001b1a:	028a      	lsls	r2, r1, #10
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	4619      	mov	r1, r3
 8001b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b22:	2200      	movs	r2, #0
 8001b24:	61bb      	str	r3, [r7, #24]
 8001b26:	61fa      	str	r2, [r7, #28]
 8001b28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b2c:	f7fe fba8 	bl	8000280 <__aeabi_uldivmod>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4613      	mov	r3, r2
 8001b36:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	0c1b      	lsrs	r3, r3, #16
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	3301      	adds	r3, #1
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b52:	e002      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HAL_RCC_GetSysClockFreq+0x204>)
 8001b56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3750      	adds	r7, #80	; 0x50
 8001b60:	46bd      	mov	sp, r7
 8001b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	00f42400 	.word	0x00f42400
 8001b70:	007a1200 	.word	0x007a1200

08001b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b78:	4b03      	ldr	r3, [pc, #12]	; (8001b88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	20000004 	.word	0x20000004

08001b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b90:	f7ff fff0 	bl	8001b74 <HAL_RCC_GetHCLKFreq>
 8001b94:	4602      	mov	r2, r0
 8001b96:	4b05      	ldr	r3, [pc, #20]	; (8001bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	0a9b      	lsrs	r3, r3, #10
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	4903      	ldr	r1, [pc, #12]	; (8001bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ba2:	5ccb      	ldrb	r3, [r1, r3]
 8001ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	080037f8 	.word	0x080037f8

08001bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bb8:	f7ff ffdc 	bl	8001b74 <HAL_RCC_GetHCLKFreq>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	0b5b      	lsrs	r3, r3, #13
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	4903      	ldr	r1, [pc, #12]	; (8001bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bca:	5ccb      	ldrb	r3, [r1, r3]
 8001bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	080037f8 	.word	0x080037f8

08001bdc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d105      	bne.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d038      	beq.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001c04:	4b68      	ldr	r3, [pc, #416]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c0a:	f7ff f881 	bl	8000d10 <HAL_GetTick>
 8001c0e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c10:	e008      	b.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001c12:	f7ff f87d 	bl	8000d10 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e0bd      	b.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c24:	4b61      	ldr	r3, [pc, #388]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1f0      	bne.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	019b      	lsls	r3, r3, #6
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	071b      	lsls	r3, r3, #28
 8001c42:	495a      	ldr	r1, [pc, #360]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001c4a:	4b57      	ldr	r3, [pc, #348]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c50:	f7ff f85e 	bl	8000d10 <HAL_GetTick>
 8001c54:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001c58:	f7ff f85a 	bl	8000d10 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e09a      	b.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c6a:	4b50      	ldr	r3, [pc, #320]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0f0      	beq.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 8083 	beq.w	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	4b48      	ldr	r3, [pc, #288]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	4a47      	ldr	r2, [pc, #284]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c92:	6413      	str	r3, [r2, #64]	; 0x40
 8001c94:	4b45      	ldr	r3, [pc, #276]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001ca0:	4b43      	ldr	r3, [pc, #268]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a42      	ldr	r2, [pc, #264]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001caa:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001cac:	f7ff f830 	bl	8000d10 <HAL_GetTick>
 8001cb0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001cb4:	f7ff f82c 	bl	8000d10 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e06c      	b.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001cc6:	4b3a      	ldr	r3, [pc, #232]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0f0      	beq.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001cd2:	4b36      	ldr	r3, [pc, #216]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cda:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d02f      	beq.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d028      	beq.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001cf0:	4b2e      	ldr	r3, [pc, #184]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cf8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cfa:	4b2e      	ldr	r3, [pc, #184]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d00:	4b2c      	ldr	r3, [pc, #176]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001d06:	4a29      	ldr	r2, [pc, #164]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001d0c:	4b27      	ldr	r3, [pc, #156]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d114      	bne.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001d18:	f7fe fffa 	bl	8000d10 <HAL_GetTick>
 8001d1c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d1e:	e00a      	b.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d20:	f7fe fff6 	bl	8000d10 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e034      	b.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d36:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0ee      	beq.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d4e:	d10d      	bne.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8001d50:	4b16      	ldr	r3, [pc, #88]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001d60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d64:	4911      	ldr	r1, [pc, #68]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	608b      	str	r3, [r1, #8]
 8001d6a:	e005      	b.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8001d6c:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	4a0e      	ldr	r2, [pc, #56]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d72:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001d76:	6093      	str	r3, [r2, #8]
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d84:	4909      	ldr	r1, [pc, #36]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	7d1a      	ldrb	r2, [r3, #20]
 8001d9a:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001d9c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	42470068 	.word	0x42470068
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40007000 	.word	0x40007000
 8001db4:	42470e40 	.word	0x42470e40
 8001db8:	424711e0 	.word	0x424711e0

08001dbc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e066      	b.n	8001ea0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	7f5b      	ldrb	r3, [r3, #29]
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d105      	bne.n	8001de8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7fe fe1c 	bl	8000a20 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2202      	movs	r2, #2
 8001dec:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	22ca      	movs	r2, #202	; 0xca
 8001df4:	625a      	str	r2, [r3, #36]	; 0x24
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2253      	movs	r2, #83	; 0x53
 8001dfc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 fb6f 	bl	80024e2 <RTC_EnterInitMode>
 8001e04:	4603      	mov	r3, r0
 8001e06:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d12c      	bne.n	8001e68 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6812      	ldr	r2, [r2, #0]
 8001e18:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e20:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6899      	ldr	r1, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	431a      	orrs	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	68d2      	ldr	r2, [r2, #12]
 8001e48:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6919      	ldr	r1, [r3, #16]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	041a      	lsls	r2, r3, #16
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 fb76 	bl	8002550 <RTC_ExitInitMode>
 8001e64:	4603      	mov	r3, r0
 8001e66:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d113      	bne.n	8001e96 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e7c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	699a      	ldr	r2, [r3, #24]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	22ff      	movs	r2, #255	; 0xff
 8001e9c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001ea8:	b590      	push	{r4, r7, lr}
 8001eaa:	b087      	sub	sp, #28
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	7f1b      	ldrb	r3, [r3, #28]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d101      	bne.n	8001ec4 <HAL_RTC_SetTime+0x1c>
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	e087      	b.n	8001fd4 <HAL_RTC_SetTime+0x12c>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2202      	movs	r2, #2
 8001ece:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d126      	bne.n	8001f24 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d102      	bne.n	8001eea <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 fb53 	bl	800259a <RTC_ByteToBcd2>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	785b      	ldrb	r3, [r3, #1]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f000 fb4c 	bl	800259a <RTC_ByteToBcd2>
 8001f02:	4603      	mov	r3, r0
 8001f04:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001f06:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	789b      	ldrb	r3, [r3, #2]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f000 fb44 	bl	800259a <RTC_ByteToBcd2>
 8001f12:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001f14:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	78db      	ldrb	r3, [r3, #3]
 8001f1c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	617b      	str	r3, [r7, #20]
 8001f22:	e018      	b.n	8001f56 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d102      	bne.n	8001f38 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	2200      	movs	r2, #0
 8001f36:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	785b      	ldrb	r3, [r3, #1]
 8001f42:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001f44:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8001f4a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	78db      	ldrb	r3, [r3, #3]
 8001f50:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001f52:	4313      	orrs	r3, r2
 8001f54:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	22ca      	movs	r2, #202	; 0xca
 8001f5c:	625a      	str	r2, [r3, #36]	; 0x24
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2253      	movs	r2, #83	; 0x53
 8001f64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 fabb 	bl	80024e2 <RTC_EnterInitMode>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8001f70:	7cfb      	ldrb	r3, [r7, #19]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d120      	bne.n	8001fb8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8001f80:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001f84:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f94:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6899      	ldr	r1, [r3, #8]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 face 	bl	8002550 <RTC_ExitInitMode>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8001fb8:	7cfb      	ldrb	r3, [r7, #19]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d102      	bne.n	8001fc4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	22ff      	movs	r2, #255	; 0xff
 8001fca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	771a      	strb	r2, [r3, #28]

  return status;
 8001fd2:	7cfb      	ldrb	r3, [r7, #19]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	371c      	adds	r7, #28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd90      	pop	{r4, r7, pc}

08001fdc <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800200e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002012:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	0c1b      	lsrs	r3, r3, #16
 8002018:	b2db      	uxtb	r3, r3
 800201a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800201e:	b2da      	uxtb	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	0a1b      	lsrs	r3, r3, #8
 8002028:	b2db      	uxtb	r3, r3
 800202a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800202e:	b2da      	uxtb	r2, r3
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	b2db      	uxtb	r3, r3
 8002038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800203c:	b2da      	uxtb	r2, r3
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	0d9b      	lsrs	r3, r3, #22
 8002046:	b2db      	uxtb	r3, r3
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	b2da      	uxtb	r2, r3
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d11a      	bne.n	800208e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f000 fab9 	bl	80025d4 <RTC_Bcd2ToByte>
 8002062:	4603      	mov	r3, r0
 8002064:	461a      	mov	r2, r3
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	785b      	ldrb	r3, [r3, #1]
 800206e:	4618      	mov	r0, r3
 8002070:	f000 fab0 	bl	80025d4 <RTC_Bcd2ToByte>
 8002074:	4603      	mov	r3, r0
 8002076:	461a      	mov	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	789b      	ldrb	r3, [r3, #2]
 8002080:	4618      	mov	r0, r3
 8002082:	f000 faa7 	bl	80025d4 <RTC_Bcd2ToByte>
 8002086:	4603      	mov	r3, r0
 8002088:	461a      	mov	r2, r3
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002098:	b590      	push	{r4, r7, lr}
 800209a:	b087      	sub	sp, #28
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	7f1b      	ldrb	r3, [r3, #28]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <HAL_RTC_SetDate+0x1c>
 80020b0:	2302      	movs	r3, #2
 80020b2:	e071      	b.n	8002198 <HAL_RTC_SetDate+0x100>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2201      	movs	r2, #1
 80020b8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2202      	movs	r2, #2
 80020be:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10e      	bne.n	80020e4 <HAL_RTC_SetDate+0x4c>
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	785b      	ldrb	r3, [r3, #1]
 80020ca:	f003 0310 	and.w	r3, r3, #16
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d008      	beq.n	80020e4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	785b      	ldrb	r3, [r3, #1]
 80020d6:	f023 0310 	bic.w	r3, r3, #16
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	330a      	adds	r3, #10
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d11c      	bne.n	8002124 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	78db      	ldrb	r3, [r3, #3]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 fa53 	bl	800259a <RTC_ByteToBcd2>
 80020f4:	4603      	mov	r3, r0
 80020f6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	785b      	ldrb	r3, [r3, #1]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f000 fa4c 	bl	800259a <RTC_ByteToBcd2>
 8002102:	4603      	mov	r3, r0
 8002104:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002106:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	789b      	ldrb	r3, [r3, #2]
 800210c:	4618      	mov	r0, r3
 800210e:	f000 fa44 	bl	800259a <RTC_ByteToBcd2>
 8002112:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002114:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800211e:	4313      	orrs	r3, r2
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	e00e      	b.n	8002142 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	78db      	ldrb	r3, [r3, #3]
 8002128:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	785b      	ldrb	r3, [r3, #1]
 800212e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002130:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002136:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800213e:	4313      	orrs	r3, r2
 8002140:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	22ca      	movs	r2, #202	; 0xca
 8002148:	625a      	str	r2, [r3, #36]	; 0x24
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2253      	movs	r2, #83	; 0x53
 8002150:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f000 f9c5 	bl	80024e2 <RTC_EnterInitMode>
 8002158:	4603      	mov	r3, r0
 800215a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800215c:	7cfb      	ldrb	r3, [r7, #19]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10c      	bne.n	800217c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800216c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002170:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f000 f9ec 	bl	8002550 <RTC_ExitInitMode>
 8002178:	4603      	mov	r3, r0
 800217a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800217c:	7cfb      	ldrb	r3, [r7, #19]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d102      	bne.n	8002188 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2201      	movs	r2, #1
 8002186:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	22ff      	movs	r2, #255	; 0xff
 800218e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	771a      	strb	r2, [r3, #28]

  return status;
 8002196:	7cfb      	ldrb	r3, [r7, #19]
}
 8002198:	4618      	mov	r0, r3
 800219a:	371c      	adds	r7, #28
 800219c:	46bd      	mov	sp, r7
 800219e:	bd90      	pop	{r4, r7, pc}

080021a0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80021ba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80021be:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	0c1b      	lsrs	r3, r3, #16
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	0a1b      	lsrs	r3, r3, #8
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	f003 031f 	and.w	r3, r3, #31
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	0b5b      	lsrs	r3, r3, #13
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d11a      	bne.n	8002234 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	78db      	ldrb	r3, [r3, #3]
 8002202:	4618      	mov	r0, r3
 8002204:	f000 f9e6 	bl	80025d4 <RTC_Bcd2ToByte>
 8002208:	4603      	mov	r3, r0
 800220a:	461a      	mov	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	785b      	ldrb	r3, [r3, #1]
 8002214:	4618      	mov	r0, r3
 8002216:	f000 f9dd 	bl	80025d4 <RTC_Bcd2ToByte>
 800221a:	4603      	mov	r3, r0
 800221c:	461a      	mov	r2, r3
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	789b      	ldrb	r3, [r3, #2]
 8002226:	4618      	mov	r0, r3
 8002228:	f000 f9d4 	bl	80025d4 <RTC_Bcd2ToByte>
 800222c:	4603      	mov	r3, r0
 800222e:	461a      	mov	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800223e:	b590      	push	{r4, r7, lr}
 8002240:	b089      	sub	sp, #36	; 0x24
 8002242:	af00      	add	r7, sp, #0
 8002244:	60f8      	str	r0, [r7, #12]
 8002246:	60b9      	str	r1, [r7, #8]
 8002248:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800224a:	2300      	movs	r3, #0
 800224c:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800224e:	2300      	movs	r3, #0
 8002250:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	7f1b      	ldrb	r3, [r3, #28]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d101      	bne.n	8002262 <HAL_RTC_SetAlarm+0x24>
 800225e:	2302      	movs	r3, #2
 8002260:	e113      	b.n	800248a <HAL_RTC_SetAlarm+0x24c>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2201      	movs	r2, #1
 8002266:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2202      	movs	r2, #2
 800226c:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d137      	bne.n	80022e4 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227e:	2b00      	cmp	r3, #0
 8002280:	d102      	bne.n	8002288 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	2200      	movs	r2, #0
 8002286:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f000 f984 	bl	800259a <RTC_ByteToBcd2>
 8002292:	4603      	mov	r3, r0
 8002294:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	785b      	ldrb	r3, [r3, #1]
 800229a:	4618      	mov	r0, r3
 800229c:	f000 f97d 	bl	800259a <RTC_ByteToBcd2>
 80022a0:	4603      	mov	r3, r0
 80022a2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80022a4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	789b      	ldrb	r3, [r3, #2]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 f975 	bl	800259a <RTC_ByteToBcd2>
 80022b0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80022b2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	78db      	ldrb	r3, [r3, #3]
 80022ba:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80022bc:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 f967 	bl	800259a <RTC_ByteToBcd2>
 80022cc:	4603      	mov	r3, r0
 80022ce:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80022d0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80022d8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80022de:	4313      	orrs	r3, r2
 80022e0:	61fb      	str	r3, [r7, #28]
 80022e2:	e023      	b.n	800232c <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d102      	bne.n	80022f8 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2200      	movs	r2, #0
 80022f6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	785b      	ldrb	r3, [r3, #1]
 8002302:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002304:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800230a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	78db      	ldrb	r3, [r3, #3]
 8002310:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002312:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f893 3020 	ldrb.w	r3, [r3, #32]
 800231a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800231c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002322:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002328:	4313      	orrs	r3, r2
 800232a:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002334:	4313      	orrs	r3, r2
 8002336:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	22ca      	movs	r2, #202	; 0xca
 800233e:	625a      	str	r2, [r3, #36]	; 0x24
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2253      	movs	r2, #83	; 0x53
 8002346:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002350:	d148      	bne.n	80023e4 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002360:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002370:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	b2da      	uxtb	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002382:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002384:	f7fe fcc4 	bl	8000d10 <HAL_GetTick>
 8002388:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800238a:	e013      	b.n	80023b4 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800238c:	f7fe fcc0 	bl	8000d10 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800239a:	d90b      	bls.n	80023b4 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	22ff      	movs	r2, #255	; 0xff
 80023a2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2203      	movs	r2, #3
 80023a8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e06a      	b.n	800248a <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0e4      	beq.n	800238c <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	69fa      	ldr	r2, [r7, #28]
 80023c8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023e0:	609a      	str	r2, [r3, #8]
 80023e2:	e047      	b.n	8002474 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023f2:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002402:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	b2da      	uxtb	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002414:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002416:	f7fe fc7b 	bl	8000d10 <HAL_GetTick>
 800241a:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800241c:	e013      	b.n	8002446 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800241e:	f7fe fc77 	bl	8000d10 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800242c:	d90b      	bls.n	8002446 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	22ff      	movs	r2, #255	; 0xff
 8002434:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2203      	movs	r2, #3
 800243a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e021      	b.n	800248a <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0e4      	beq.n	800241e <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	69fa      	ldr	r2, [r7, #28]
 800245a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002472:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	22ff      	movs	r2, #255	; 0xff
 800247a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2201      	movs	r2, #1
 8002480:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3724      	adds	r7, #36	; 0x24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd90      	pop	{r4, r7, pc}

08002492 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b084      	sub	sp, #16
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80024ac:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024ae:	f7fe fc2f 	bl	8000d10 <HAL_GetTick>
 80024b2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80024b4:	e009      	b.n	80024ca <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80024b6:	f7fe fc2b 	bl	8000d10 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024c4:	d901      	bls.n	80024ca <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e007      	b.n	80024da <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	f003 0320 	and.w	r3, r3, #32
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0ee      	beq.n	80024b6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b084      	sub	sp, #16
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80024ee:	2300      	movs	r3, #0
 80024f0:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d122      	bne.n	8002546 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68da      	ldr	r2, [r3, #12]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800250e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002510:	f7fe fbfe 	bl	8000d10 <HAL_GetTick>
 8002514:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002516:	e00c      	b.n	8002532 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002518:	f7fe fbfa 	bl	8000d10 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002526:	d904      	bls.n	8002532 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2204      	movs	r2, #4
 800252c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800253c:	2b00      	cmp	r3, #0
 800253e:	d102      	bne.n	8002546 <RTC_EnterInitMode+0x64>
 8002540:	7bfb      	ldrb	r3, [r7, #15]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d1e8      	bne.n	8002518 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002546:	7bfb      	ldrb	r3, [r7, #15]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800256a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 0320 	and.w	r3, r3, #32
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10a      	bne.n	8002590 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7ff ff89 	bl	8002492 <HAL_RTC_WaitForSynchro>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d004      	beq.n	8002590 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2204      	movs	r2, #4
 800258a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002590:	7bfb      	ldrb	r3, [r7, #15]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800259a:	b480      	push	{r7}
 800259c:	b085      	sub	sp, #20
 800259e:	af00      	add	r7, sp, #0
 80025a0:	4603      	mov	r3, r0
 80025a2:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80025a8:	e005      	b.n	80025b6 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	3301      	adds	r3, #1
 80025ae:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	3b0a      	subs	r3, #10
 80025b4:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	2b09      	cmp	r3, #9
 80025ba:	d8f6      	bhi.n	80025aa <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	b2db      	uxtb	r3, r3
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80025de:	2300      	movs	r3, #0
 80025e0:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	091b      	lsrs	r3, r3, #4
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	461a      	mov	r2, r3
 80025ea:	0092      	lsls	r2, r2, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	f003 030f 	and.w	r3, r3, #15
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
 80025fc:	4413      	add	r3, r2
 80025fe:	b2db      	uxtb	r3, r3
}
 8002600:	4618      	mov	r0, r3
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	7f1b      	ldrb	r3, [r3, #28]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8002620:	2302      	movs	r3, #2
 8002622:	e047      	b.n	80026b4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2202      	movs	r2, #2
 800262e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	22ca      	movs	r2, #202	; 0xca
 8002636:	625a      	str	r2, [r3, #36]	; 0x24
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2253      	movs	r2, #83	; 0x53
 800263e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800264e:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689a      	ldr	r2, [r3, #8]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800265e:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002660:	f7fe fb56 	bl	8000d10 <HAL_GetTick>
 8002664:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002666:	e013      	b.n	8002690 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002668:	f7fe fb52 	bl	8000d10 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002676:	d90b      	bls.n	8002690 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	22ff      	movs	r2, #255	; 0xff
 800267e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2203      	movs	r2, #3
 8002684:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e011      	b.n	80026b4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f003 0304 	and.w	r3, r3, #4
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0e4      	beq.n	8002668 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	22ff      	movs	r2, #255	; 0xff
 80026a4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e03f      	b.n	800274e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d106      	bne.n	80026e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7fe f9ca 	bl	8000a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2224      	movs	r2, #36	; 0x24
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 f929 	bl	8002958 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	691a      	ldr	r2, [r3, #16]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002714:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695a      	ldr	r2, [r3, #20]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002724:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002734:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2220      	movs	r2, #32
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2220      	movs	r2, #32
 8002748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b08a      	sub	sp, #40	; 0x28
 800275a:	af02      	add	r7, sp, #8
 800275c:	60f8      	str	r0, [r7, #12]
 800275e:	60b9      	str	r1, [r7, #8]
 8002760:	603b      	str	r3, [r7, #0]
 8002762:	4613      	mov	r3, r2
 8002764:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002766:	2300      	movs	r3, #0
 8002768:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b20      	cmp	r3, #32
 8002774:	d17c      	bne.n	8002870 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <HAL_UART_Transmit+0x2c>
 800277c:	88fb      	ldrh	r3, [r7, #6]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e075      	b.n	8002872 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800278c:	2b01      	cmp	r3, #1
 800278e:	d101      	bne.n	8002794 <HAL_UART_Transmit+0x3e>
 8002790:	2302      	movs	r3, #2
 8002792:	e06e      	b.n	8002872 <HAL_UART_Transmit+0x11c>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2221      	movs	r2, #33	; 0x21
 80027a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027aa:	f7fe fab1 	bl	8000d10 <HAL_GetTick>
 80027ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	88fa      	ldrh	r2, [r7, #6]
 80027b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	88fa      	ldrh	r2, [r7, #6]
 80027ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c4:	d108      	bne.n	80027d8 <HAL_UART_Transmit+0x82>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d104      	bne.n	80027d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	61bb      	str	r3, [r7, #24]
 80027d6:	e003      	b.n	80027e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80027e8:	e02a      	b.n	8002840 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2200      	movs	r2, #0
 80027f2:	2180      	movs	r1, #128	; 0x80
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 f840 	bl	800287a <UART_WaitOnFlagUntilTimeout>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e036      	b.n	8002872 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10b      	bne.n	8002822 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	461a      	mov	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002818:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	3302      	adds	r3, #2
 800281e:	61bb      	str	r3, [r7, #24]
 8002820:	e007      	b.n	8002832 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	781a      	ldrb	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	3301      	adds	r3, #1
 8002830:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002836:	b29b      	uxth	r3, r3
 8002838:	3b01      	subs	r3, #1
 800283a:	b29a      	uxth	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002844:	b29b      	uxth	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1cf      	bne.n	80027ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	2200      	movs	r2, #0
 8002852:	2140      	movs	r1, #64	; 0x40
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 f810 	bl	800287a <UART_WaitOnFlagUntilTimeout>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e006      	b.n	8002872 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2220      	movs	r2, #32
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800286c:	2300      	movs	r3, #0
 800286e:	e000      	b.n	8002872 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002870:	2302      	movs	r3, #2
  }
}
 8002872:	4618      	mov	r0, r3
 8002874:	3720      	adds	r7, #32
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b090      	sub	sp, #64	; 0x40
 800287e:	af00      	add	r7, sp, #0
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	603b      	str	r3, [r7, #0]
 8002886:	4613      	mov	r3, r2
 8002888:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800288a:	e050      	b.n	800292e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800288c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800288e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002892:	d04c      	beq.n	800292e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002896:	2b00      	cmp	r3, #0
 8002898:	d007      	beq.n	80028aa <UART_WaitOnFlagUntilTimeout+0x30>
 800289a:	f7fe fa39 	bl	8000d10 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d241      	bcs.n	800292e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	330c      	adds	r3, #12
 80028b0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b4:	e853 3f00 	ldrex	r3, [r3]
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80028c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	330c      	adds	r3, #12
 80028c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028ca:	637a      	str	r2, [r7, #52]	; 0x34
 80028cc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028d2:	e841 2300 	strex	r3, r2, [r1]
 80028d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80028d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1e5      	bne.n	80028aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	3314      	adds	r3, #20
 80028e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	e853 3f00 	ldrex	r3, [r3]
 80028ec:	613b      	str	r3, [r7, #16]
   return(result);
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f023 0301 	bic.w	r3, r3, #1
 80028f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	3314      	adds	r3, #20
 80028fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028fe:	623a      	str	r2, [r7, #32]
 8002900:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002902:	69f9      	ldr	r1, [r7, #28]
 8002904:	6a3a      	ldr	r2, [r7, #32]
 8002906:	e841 2300 	strex	r3, r2, [r1]
 800290a:	61bb      	str	r3, [r7, #24]
   return(result);
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1e5      	bne.n	80028de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2220      	movs	r2, #32
 8002916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2220      	movs	r2, #32
 800291e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e00f      	b.n	800294e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	4013      	ands	r3, r2
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	429a      	cmp	r2, r3
 800293c:	bf0c      	ite	eq
 800293e:	2301      	moveq	r3, #1
 8002940:	2300      	movne	r3, #0
 8002942:	b2db      	uxtb	r3, r3
 8002944:	461a      	mov	r2, r3
 8002946:	79fb      	ldrb	r3, [r7, #7]
 8002948:	429a      	cmp	r2, r3
 800294a:	d09f      	beq.n	800288c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3740      	adds	r7, #64	; 0x40
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800295c:	b0c0      	sub	sp, #256	; 0x100
 800295e:	af00      	add	r7, sp, #0
 8002960:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002974:	68d9      	ldr	r1, [r3, #12]
 8002976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	ea40 0301 	orr.w	r3, r0, r1
 8002980:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	431a      	orrs	r2, r3
 8002990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	431a      	orrs	r2, r3
 8002998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	4313      	orrs	r3, r2
 80029a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80029a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80029b0:	f021 010c 	bic.w	r1, r1, #12
 80029b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80029be:	430b      	orrs	r3, r1
 80029c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80029ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d2:	6999      	ldr	r1, [r3, #24]
 80029d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	ea40 0301 	orr.w	r3, r0, r1
 80029de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	4b8f      	ldr	r3, [pc, #572]	; (8002c24 <UART_SetConfig+0x2cc>)
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d005      	beq.n	80029f8 <UART_SetConfig+0xa0>
 80029ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	4b8d      	ldr	r3, [pc, #564]	; (8002c28 <UART_SetConfig+0x2d0>)
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d104      	bne.n	8002a02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029f8:	f7ff f8dc 	bl	8001bb4 <HAL_RCC_GetPCLK2Freq>
 80029fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002a00:	e003      	b.n	8002a0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a02:	f7ff f8c3 	bl	8001b8c <HAL_RCC_GetPCLK1Freq>
 8002a06:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a14:	f040 810c 	bne.w	8002c30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a22:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002a2a:	4622      	mov	r2, r4
 8002a2c:	462b      	mov	r3, r5
 8002a2e:	1891      	adds	r1, r2, r2
 8002a30:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a32:	415b      	adcs	r3, r3
 8002a34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a3a:	4621      	mov	r1, r4
 8002a3c:	eb12 0801 	adds.w	r8, r2, r1
 8002a40:	4629      	mov	r1, r5
 8002a42:	eb43 0901 	adc.w	r9, r3, r1
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a5a:	4690      	mov	r8, r2
 8002a5c:	4699      	mov	r9, r3
 8002a5e:	4623      	mov	r3, r4
 8002a60:	eb18 0303 	adds.w	r3, r8, r3
 8002a64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a68:	462b      	mov	r3, r5
 8002a6a:	eb49 0303 	adc.w	r3, r9, r3
 8002a6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a7e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002a82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a86:	460b      	mov	r3, r1
 8002a88:	18db      	adds	r3, r3, r3
 8002a8a:	653b      	str	r3, [r7, #80]	; 0x50
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	eb42 0303 	adc.w	r3, r2, r3
 8002a92:	657b      	str	r3, [r7, #84]	; 0x54
 8002a94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002a9c:	f7fd fbf0 	bl	8000280 <__aeabi_uldivmod>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4b61      	ldr	r3, [pc, #388]	; (8002c2c <UART_SetConfig+0x2d4>)
 8002aa6:	fba3 2302 	umull	r2, r3, r3, r2
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	011c      	lsls	r4, r3, #4
 8002aae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ab8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002abc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ac0:	4642      	mov	r2, r8
 8002ac2:	464b      	mov	r3, r9
 8002ac4:	1891      	adds	r1, r2, r2
 8002ac6:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ac8:	415b      	adcs	r3, r3
 8002aca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002acc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	eb12 0a01 	adds.w	sl, r2, r1
 8002ad6:	4649      	mov	r1, r9
 8002ad8:	eb43 0b01 	adc.w	fp, r3, r1
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	f04f 0300 	mov.w	r3, #0
 8002ae4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ae8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002aec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002af0:	4692      	mov	sl, r2
 8002af2:	469b      	mov	fp, r3
 8002af4:	4643      	mov	r3, r8
 8002af6:	eb1a 0303 	adds.w	r3, sl, r3
 8002afa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002afe:	464b      	mov	r3, r9
 8002b00:	eb4b 0303 	adc.w	r3, fp, r3
 8002b04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b14:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	18db      	adds	r3, r3, r3
 8002b20:	643b      	str	r3, [r7, #64]	; 0x40
 8002b22:	4613      	mov	r3, r2
 8002b24:	eb42 0303 	adc.w	r3, r2, r3
 8002b28:	647b      	str	r3, [r7, #68]	; 0x44
 8002b2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002b32:	f7fd fba5 	bl	8000280 <__aeabi_uldivmod>
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	4611      	mov	r1, r2
 8002b3c:	4b3b      	ldr	r3, [pc, #236]	; (8002c2c <UART_SetConfig+0x2d4>)
 8002b3e:	fba3 2301 	umull	r2, r3, r3, r1
 8002b42:	095b      	lsrs	r3, r3, #5
 8002b44:	2264      	movs	r2, #100	; 0x64
 8002b46:	fb02 f303 	mul.w	r3, r2, r3
 8002b4a:	1acb      	subs	r3, r1, r3
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002b52:	4b36      	ldr	r3, [pc, #216]	; (8002c2c <UART_SetConfig+0x2d4>)
 8002b54:	fba3 2302 	umull	r2, r3, r3, r2
 8002b58:	095b      	lsrs	r3, r3, #5
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b60:	441c      	add	r4, r3
 8002b62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b66:	2200      	movs	r2, #0
 8002b68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b6c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002b70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002b74:	4642      	mov	r2, r8
 8002b76:	464b      	mov	r3, r9
 8002b78:	1891      	adds	r1, r2, r2
 8002b7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b7c:	415b      	adcs	r3, r3
 8002b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b84:	4641      	mov	r1, r8
 8002b86:	1851      	adds	r1, r2, r1
 8002b88:	6339      	str	r1, [r7, #48]	; 0x30
 8002b8a:	4649      	mov	r1, r9
 8002b8c:	414b      	adcs	r3, r1
 8002b8e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	f04f 0300 	mov.w	r3, #0
 8002b98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002b9c:	4659      	mov	r1, fp
 8002b9e:	00cb      	lsls	r3, r1, #3
 8002ba0:	4651      	mov	r1, sl
 8002ba2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ba6:	4651      	mov	r1, sl
 8002ba8:	00ca      	lsls	r2, r1, #3
 8002baa:	4610      	mov	r0, r2
 8002bac:	4619      	mov	r1, r3
 8002bae:	4603      	mov	r3, r0
 8002bb0:	4642      	mov	r2, r8
 8002bb2:	189b      	adds	r3, r3, r2
 8002bb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bb8:	464b      	mov	r3, r9
 8002bba:	460a      	mov	r2, r1
 8002bbc:	eb42 0303 	adc.w	r3, r2, r3
 8002bc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002bd0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002bd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002bd8:	460b      	mov	r3, r1
 8002bda:	18db      	adds	r3, r3, r3
 8002bdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bde:	4613      	mov	r3, r2
 8002be0:	eb42 0303 	adc.w	r3, r2, r3
 8002be4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002be6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002bee:	f7fd fb47 	bl	8000280 <__aeabi_uldivmod>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <UART_SetConfig+0x2d4>)
 8002bf8:	fba3 1302 	umull	r1, r3, r3, r2
 8002bfc:	095b      	lsrs	r3, r3, #5
 8002bfe:	2164      	movs	r1, #100	; 0x64
 8002c00:	fb01 f303 	mul.w	r3, r1, r3
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	3332      	adds	r3, #50	; 0x32
 8002c0a:	4a08      	ldr	r2, [pc, #32]	; (8002c2c <UART_SetConfig+0x2d4>)
 8002c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c10:	095b      	lsrs	r3, r3, #5
 8002c12:	f003 0207 	and.w	r2, r3, #7
 8002c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4422      	add	r2, r4
 8002c1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c20:	e106      	b.n	8002e30 <UART_SetConfig+0x4d8>
 8002c22:	bf00      	nop
 8002c24:	40011000 	.word	0x40011000
 8002c28:	40011400 	.word	0x40011400
 8002c2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c34:	2200      	movs	r2, #0
 8002c36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c3a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002c42:	4642      	mov	r2, r8
 8002c44:	464b      	mov	r3, r9
 8002c46:	1891      	adds	r1, r2, r2
 8002c48:	6239      	str	r1, [r7, #32]
 8002c4a:	415b      	adcs	r3, r3
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c52:	4641      	mov	r1, r8
 8002c54:	1854      	adds	r4, r2, r1
 8002c56:	4649      	mov	r1, r9
 8002c58:	eb43 0501 	adc.w	r5, r3, r1
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	f04f 0300 	mov.w	r3, #0
 8002c64:	00eb      	lsls	r3, r5, #3
 8002c66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c6a:	00e2      	lsls	r2, r4, #3
 8002c6c:	4614      	mov	r4, r2
 8002c6e:	461d      	mov	r5, r3
 8002c70:	4643      	mov	r3, r8
 8002c72:	18e3      	adds	r3, r4, r3
 8002c74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c78:	464b      	mov	r3, r9
 8002c7a:	eb45 0303 	adc.w	r3, r5, r3
 8002c7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	f04f 0300 	mov.w	r3, #0
 8002c9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c9e:	4629      	mov	r1, r5
 8002ca0:	008b      	lsls	r3, r1, #2
 8002ca2:	4621      	mov	r1, r4
 8002ca4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ca8:	4621      	mov	r1, r4
 8002caa:	008a      	lsls	r2, r1, #2
 8002cac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002cb0:	f7fd fae6 	bl	8000280 <__aeabi_uldivmod>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	4b60      	ldr	r3, [pc, #384]	; (8002e3c <UART_SetConfig+0x4e4>)
 8002cba:	fba3 2302 	umull	r2, r3, r3, r2
 8002cbe:	095b      	lsrs	r3, r3, #5
 8002cc0:	011c      	lsls	r4, r3, #4
 8002cc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ccc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002cd0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002cd4:	4642      	mov	r2, r8
 8002cd6:	464b      	mov	r3, r9
 8002cd8:	1891      	adds	r1, r2, r2
 8002cda:	61b9      	str	r1, [r7, #24]
 8002cdc:	415b      	adcs	r3, r3
 8002cde:	61fb      	str	r3, [r7, #28]
 8002ce0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ce4:	4641      	mov	r1, r8
 8002ce6:	1851      	adds	r1, r2, r1
 8002ce8:	6139      	str	r1, [r7, #16]
 8002cea:	4649      	mov	r1, r9
 8002cec:	414b      	adcs	r3, r1
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	f04f 0200 	mov.w	r2, #0
 8002cf4:	f04f 0300 	mov.w	r3, #0
 8002cf8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cfc:	4659      	mov	r1, fp
 8002cfe:	00cb      	lsls	r3, r1, #3
 8002d00:	4651      	mov	r1, sl
 8002d02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d06:	4651      	mov	r1, sl
 8002d08:	00ca      	lsls	r2, r1, #3
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4603      	mov	r3, r0
 8002d10:	4642      	mov	r2, r8
 8002d12:	189b      	adds	r3, r3, r2
 8002d14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d18:	464b      	mov	r3, r9
 8002d1a:	460a      	mov	r2, r1
 8002d1c:	eb42 0303 	adc.w	r3, r2, r3
 8002d20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d2e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d30:	f04f 0200 	mov.w	r2, #0
 8002d34:	f04f 0300 	mov.w	r3, #0
 8002d38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002d3c:	4649      	mov	r1, r9
 8002d3e:	008b      	lsls	r3, r1, #2
 8002d40:	4641      	mov	r1, r8
 8002d42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d46:	4641      	mov	r1, r8
 8002d48:	008a      	lsls	r2, r1, #2
 8002d4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002d4e:	f7fd fa97 	bl	8000280 <__aeabi_uldivmod>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4611      	mov	r1, r2
 8002d58:	4b38      	ldr	r3, [pc, #224]	; (8002e3c <UART_SetConfig+0x4e4>)
 8002d5a:	fba3 2301 	umull	r2, r3, r3, r1
 8002d5e:	095b      	lsrs	r3, r3, #5
 8002d60:	2264      	movs	r2, #100	; 0x64
 8002d62:	fb02 f303 	mul.w	r3, r2, r3
 8002d66:	1acb      	subs	r3, r1, r3
 8002d68:	011b      	lsls	r3, r3, #4
 8002d6a:	3332      	adds	r3, #50	; 0x32
 8002d6c:	4a33      	ldr	r2, [pc, #204]	; (8002e3c <UART_SetConfig+0x4e4>)
 8002d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d72:	095b      	lsrs	r3, r3, #5
 8002d74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d78:	441c      	add	r4, r3
 8002d7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d7e:	2200      	movs	r2, #0
 8002d80:	673b      	str	r3, [r7, #112]	; 0x70
 8002d82:	677a      	str	r2, [r7, #116]	; 0x74
 8002d84:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d88:	4642      	mov	r2, r8
 8002d8a:	464b      	mov	r3, r9
 8002d8c:	1891      	adds	r1, r2, r2
 8002d8e:	60b9      	str	r1, [r7, #8]
 8002d90:	415b      	adcs	r3, r3
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d98:	4641      	mov	r1, r8
 8002d9a:	1851      	adds	r1, r2, r1
 8002d9c:	6039      	str	r1, [r7, #0]
 8002d9e:	4649      	mov	r1, r9
 8002da0:	414b      	adcs	r3, r1
 8002da2:	607b      	str	r3, [r7, #4]
 8002da4:	f04f 0200 	mov.w	r2, #0
 8002da8:	f04f 0300 	mov.w	r3, #0
 8002dac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002db0:	4659      	mov	r1, fp
 8002db2:	00cb      	lsls	r3, r1, #3
 8002db4:	4651      	mov	r1, sl
 8002db6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dba:	4651      	mov	r1, sl
 8002dbc:	00ca      	lsls	r2, r1, #3
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	4642      	mov	r2, r8
 8002dc6:	189b      	adds	r3, r3, r2
 8002dc8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dca:	464b      	mov	r3, r9
 8002dcc:	460a      	mov	r2, r1
 8002dce:	eb42 0303 	adc.w	r3, r2, r3
 8002dd2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	663b      	str	r3, [r7, #96]	; 0x60
 8002dde:	667a      	str	r2, [r7, #100]	; 0x64
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	f04f 0300 	mov.w	r3, #0
 8002de8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002dec:	4649      	mov	r1, r9
 8002dee:	008b      	lsls	r3, r1, #2
 8002df0:	4641      	mov	r1, r8
 8002df2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002df6:	4641      	mov	r1, r8
 8002df8:	008a      	lsls	r2, r1, #2
 8002dfa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002dfe:	f7fd fa3f 	bl	8000280 <__aeabi_uldivmod>
 8002e02:	4602      	mov	r2, r0
 8002e04:	460b      	mov	r3, r1
 8002e06:	4b0d      	ldr	r3, [pc, #52]	; (8002e3c <UART_SetConfig+0x4e4>)
 8002e08:	fba3 1302 	umull	r1, r3, r3, r2
 8002e0c:	095b      	lsrs	r3, r3, #5
 8002e0e:	2164      	movs	r1, #100	; 0x64
 8002e10:	fb01 f303 	mul.w	r3, r1, r3
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	011b      	lsls	r3, r3, #4
 8002e18:	3332      	adds	r3, #50	; 0x32
 8002e1a:	4a08      	ldr	r2, [pc, #32]	; (8002e3c <UART_SetConfig+0x4e4>)
 8002e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e20:	095b      	lsrs	r3, r3, #5
 8002e22:	f003 020f 	and.w	r2, r3, #15
 8002e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4422      	add	r2, r4
 8002e2e:	609a      	str	r2, [r3, #8]
}
 8002e30:	bf00      	nop
 8002e32:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002e36:	46bd      	mov	sp, r7
 8002e38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e3c:	51eb851f 	.word	0x51eb851f

08002e40 <siprintf>:
 8002e40:	b40e      	push	{r1, r2, r3}
 8002e42:	b500      	push	{lr}
 8002e44:	b09c      	sub	sp, #112	; 0x70
 8002e46:	ab1d      	add	r3, sp, #116	; 0x74
 8002e48:	9002      	str	r0, [sp, #8]
 8002e4a:	9006      	str	r0, [sp, #24]
 8002e4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002e50:	4809      	ldr	r0, [pc, #36]	; (8002e78 <siprintf+0x38>)
 8002e52:	9107      	str	r1, [sp, #28]
 8002e54:	9104      	str	r1, [sp, #16]
 8002e56:	4909      	ldr	r1, [pc, #36]	; (8002e7c <siprintf+0x3c>)
 8002e58:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e5c:	9105      	str	r1, [sp, #20]
 8002e5e:	6800      	ldr	r0, [r0, #0]
 8002e60:	9301      	str	r3, [sp, #4]
 8002e62:	a902      	add	r1, sp, #8
 8002e64:	f000 f992 	bl	800318c <_svfiprintf_r>
 8002e68:	9b02      	ldr	r3, [sp, #8]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	701a      	strb	r2, [r3, #0]
 8002e6e:	b01c      	add	sp, #112	; 0x70
 8002e70:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e74:	b003      	add	sp, #12
 8002e76:	4770      	bx	lr
 8002e78:	2000005c 	.word	0x2000005c
 8002e7c:	ffff0208 	.word	0xffff0208

08002e80 <memset>:
 8002e80:	4402      	add	r2, r0
 8002e82:	4603      	mov	r3, r0
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d100      	bne.n	8002e8a <memset+0xa>
 8002e88:	4770      	bx	lr
 8002e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e8e:	e7f9      	b.n	8002e84 <memset+0x4>

08002e90 <__errno>:
 8002e90:	4b01      	ldr	r3, [pc, #4]	; (8002e98 <__errno+0x8>)
 8002e92:	6818      	ldr	r0, [r3, #0]
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	2000005c 	.word	0x2000005c

08002e9c <__libc_init_array>:
 8002e9c:	b570      	push	{r4, r5, r6, lr}
 8002e9e:	4d0d      	ldr	r5, [pc, #52]	; (8002ed4 <__libc_init_array+0x38>)
 8002ea0:	4c0d      	ldr	r4, [pc, #52]	; (8002ed8 <__libc_init_array+0x3c>)
 8002ea2:	1b64      	subs	r4, r4, r5
 8002ea4:	10a4      	asrs	r4, r4, #2
 8002ea6:	2600      	movs	r6, #0
 8002ea8:	42a6      	cmp	r6, r4
 8002eaa:	d109      	bne.n	8002ec0 <__libc_init_array+0x24>
 8002eac:	4d0b      	ldr	r5, [pc, #44]	; (8002edc <__libc_init_array+0x40>)
 8002eae:	4c0c      	ldr	r4, [pc, #48]	; (8002ee0 <__libc_init_array+0x44>)
 8002eb0:	f000 fc6a 	bl	8003788 <_init>
 8002eb4:	1b64      	subs	r4, r4, r5
 8002eb6:	10a4      	asrs	r4, r4, #2
 8002eb8:	2600      	movs	r6, #0
 8002eba:	42a6      	cmp	r6, r4
 8002ebc:	d105      	bne.n	8002eca <__libc_init_array+0x2e>
 8002ebe:	bd70      	pop	{r4, r5, r6, pc}
 8002ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ec4:	4798      	blx	r3
 8002ec6:	3601      	adds	r6, #1
 8002ec8:	e7ee      	b.n	8002ea8 <__libc_init_array+0xc>
 8002eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ece:	4798      	blx	r3
 8002ed0:	3601      	adds	r6, #1
 8002ed2:	e7f2      	b.n	8002eba <__libc_init_array+0x1e>
 8002ed4:	0800383c 	.word	0x0800383c
 8002ed8:	0800383c 	.word	0x0800383c
 8002edc:	0800383c 	.word	0x0800383c
 8002ee0:	08003840 	.word	0x08003840

08002ee4 <__retarget_lock_acquire_recursive>:
 8002ee4:	4770      	bx	lr

08002ee6 <__retarget_lock_release_recursive>:
 8002ee6:	4770      	bx	lr

08002ee8 <_free_r>:
 8002ee8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002eea:	2900      	cmp	r1, #0
 8002eec:	d044      	beq.n	8002f78 <_free_r+0x90>
 8002eee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ef2:	9001      	str	r0, [sp, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f1a1 0404 	sub.w	r4, r1, #4
 8002efa:	bfb8      	it	lt
 8002efc:	18e4      	addlt	r4, r4, r3
 8002efe:	f000 f8df 	bl	80030c0 <__malloc_lock>
 8002f02:	4a1e      	ldr	r2, [pc, #120]	; (8002f7c <_free_r+0x94>)
 8002f04:	9801      	ldr	r0, [sp, #4]
 8002f06:	6813      	ldr	r3, [r2, #0]
 8002f08:	b933      	cbnz	r3, 8002f18 <_free_r+0x30>
 8002f0a:	6063      	str	r3, [r4, #4]
 8002f0c:	6014      	str	r4, [r2, #0]
 8002f0e:	b003      	add	sp, #12
 8002f10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002f14:	f000 b8da 	b.w	80030cc <__malloc_unlock>
 8002f18:	42a3      	cmp	r3, r4
 8002f1a:	d908      	bls.n	8002f2e <_free_r+0x46>
 8002f1c:	6825      	ldr	r5, [r4, #0]
 8002f1e:	1961      	adds	r1, r4, r5
 8002f20:	428b      	cmp	r3, r1
 8002f22:	bf01      	itttt	eq
 8002f24:	6819      	ldreq	r1, [r3, #0]
 8002f26:	685b      	ldreq	r3, [r3, #4]
 8002f28:	1949      	addeq	r1, r1, r5
 8002f2a:	6021      	streq	r1, [r4, #0]
 8002f2c:	e7ed      	b.n	8002f0a <_free_r+0x22>
 8002f2e:	461a      	mov	r2, r3
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	b10b      	cbz	r3, 8002f38 <_free_r+0x50>
 8002f34:	42a3      	cmp	r3, r4
 8002f36:	d9fa      	bls.n	8002f2e <_free_r+0x46>
 8002f38:	6811      	ldr	r1, [r2, #0]
 8002f3a:	1855      	adds	r5, r2, r1
 8002f3c:	42a5      	cmp	r5, r4
 8002f3e:	d10b      	bne.n	8002f58 <_free_r+0x70>
 8002f40:	6824      	ldr	r4, [r4, #0]
 8002f42:	4421      	add	r1, r4
 8002f44:	1854      	adds	r4, r2, r1
 8002f46:	42a3      	cmp	r3, r4
 8002f48:	6011      	str	r1, [r2, #0]
 8002f4a:	d1e0      	bne.n	8002f0e <_free_r+0x26>
 8002f4c:	681c      	ldr	r4, [r3, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	6053      	str	r3, [r2, #4]
 8002f52:	440c      	add	r4, r1
 8002f54:	6014      	str	r4, [r2, #0]
 8002f56:	e7da      	b.n	8002f0e <_free_r+0x26>
 8002f58:	d902      	bls.n	8002f60 <_free_r+0x78>
 8002f5a:	230c      	movs	r3, #12
 8002f5c:	6003      	str	r3, [r0, #0]
 8002f5e:	e7d6      	b.n	8002f0e <_free_r+0x26>
 8002f60:	6825      	ldr	r5, [r4, #0]
 8002f62:	1961      	adds	r1, r4, r5
 8002f64:	428b      	cmp	r3, r1
 8002f66:	bf04      	itt	eq
 8002f68:	6819      	ldreq	r1, [r3, #0]
 8002f6a:	685b      	ldreq	r3, [r3, #4]
 8002f6c:	6063      	str	r3, [r4, #4]
 8002f6e:	bf04      	itt	eq
 8002f70:	1949      	addeq	r1, r1, r5
 8002f72:	6021      	streq	r1, [r4, #0]
 8002f74:	6054      	str	r4, [r2, #4]
 8002f76:	e7ca      	b.n	8002f0e <_free_r+0x26>
 8002f78:	b003      	add	sp, #12
 8002f7a:	bd30      	pop	{r4, r5, pc}
 8002f7c:	20000228 	.word	0x20000228

08002f80 <sbrk_aligned>:
 8002f80:	b570      	push	{r4, r5, r6, lr}
 8002f82:	4e0e      	ldr	r6, [pc, #56]	; (8002fbc <sbrk_aligned+0x3c>)
 8002f84:	460c      	mov	r4, r1
 8002f86:	6831      	ldr	r1, [r6, #0]
 8002f88:	4605      	mov	r5, r0
 8002f8a:	b911      	cbnz	r1, 8002f92 <sbrk_aligned+0x12>
 8002f8c:	f000 fba6 	bl	80036dc <_sbrk_r>
 8002f90:	6030      	str	r0, [r6, #0]
 8002f92:	4621      	mov	r1, r4
 8002f94:	4628      	mov	r0, r5
 8002f96:	f000 fba1 	bl	80036dc <_sbrk_r>
 8002f9a:	1c43      	adds	r3, r0, #1
 8002f9c:	d00a      	beq.n	8002fb4 <sbrk_aligned+0x34>
 8002f9e:	1cc4      	adds	r4, r0, #3
 8002fa0:	f024 0403 	bic.w	r4, r4, #3
 8002fa4:	42a0      	cmp	r0, r4
 8002fa6:	d007      	beq.n	8002fb8 <sbrk_aligned+0x38>
 8002fa8:	1a21      	subs	r1, r4, r0
 8002faa:	4628      	mov	r0, r5
 8002fac:	f000 fb96 	bl	80036dc <_sbrk_r>
 8002fb0:	3001      	adds	r0, #1
 8002fb2:	d101      	bne.n	8002fb8 <sbrk_aligned+0x38>
 8002fb4:	f04f 34ff 	mov.w	r4, #4294967295
 8002fb8:	4620      	mov	r0, r4
 8002fba:	bd70      	pop	{r4, r5, r6, pc}
 8002fbc:	2000022c 	.word	0x2000022c

08002fc0 <_malloc_r>:
 8002fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fc4:	1ccd      	adds	r5, r1, #3
 8002fc6:	f025 0503 	bic.w	r5, r5, #3
 8002fca:	3508      	adds	r5, #8
 8002fcc:	2d0c      	cmp	r5, #12
 8002fce:	bf38      	it	cc
 8002fd0:	250c      	movcc	r5, #12
 8002fd2:	2d00      	cmp	r5, #0
 8002fd4:	4607      	mov	r7, r0
 8002fd6:	db01      	blt.n	8002fdc <_malloc_r+0x1c>
 8002fd8:	42a9      	cmp	r1, r5
 8002fda:	d905      	bls.n	8002fe8 <_malloc_r+0x28>
 8002fdc:	230c      	movs	r3, #12
 8002fde:	603b      	str	r3, [r7, #0]
 8002fe0:	2600      	movs	r6, #0
 8002fe2:	4630      	mov	r0, r6
 8002fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fe8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80030bc <_malloc_r+0xfc>
 8002fec:	f000 f868 	bl	80030c0 <__malloc_lock>
 8002ff0:	f8d8 3000 	ldr.w	r3, [r8]
 8002ff4:	461c      	mov	r4, r3
 8002ff6:	bb5c      	cbnz	r4, 8003050 <_malloc_r+0x90>
 8002ff8:	4629      	mov	r1, r5
 8002ffa:	4638      	mov	r0, r7
 8002ffc:	f7ff ffc0 	bl	8002f80 <sbrk_aligned>
 8003000:	1c43      	adds	r3, r0, #1
 8003002:	4604      	mov	r4, r0
 8003004:	d155      	bne.n	80030b2 <_malloc_r+0xf2>
 8003006:	f8d8 4000 	ldr.w	r4, [r8]
 800300a:	4626      	mov	r6, r4
 800300c:	2e00      	cmp	r6, #0
 800300e:	d145      	bne.n	800309c <_malloc_r+0xdc>
 8003010:	2c00      	cmp	r4, #0
 8003012:	d048      	beq.n	80030a6 <_malloc_r+0xe6>
 8003014:	6823      	ldr	r3, [r4, #0]
 8003016:	4631      	mov	r1, r6
 8003018:	4638      	mov	r0, r7
 800301a:	eb04 0903 	add.w	r9, r4, r3
 800301e:	f000 fb5d 	bl	80036dc <_sbrk_r>
 8003022:	4581      	cmp	r9, r0
 8003024:	d13f      	bne.n	80030a6 <_malloc_r+0xe6>
 8003026:	6821      	ldr	r1, [r4, #0]
 8003028:	1a6d      	subs	r5, r5, r1
 800302a:	4629      	mov	r1, r5
 800302c:	4638      	mov	r0, r7
 800302e:	f7ff ffa7 	bl	8002f80 <sbrk_aligned>
 8003032:	3001      	adds	r0, #1
 8003034:	d037      	beq.n	80030a6 <_malloc_r+0xe6>
 8003036:	6823      	ldr	r3, [r4, #0]
 8003038:	442b      	add	r3, r5
 800303a:	6023      	str	r3, [r4, #0]
 800303c:	f8d8 3000 	ldr.w	r3, [r8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d038      	beq.n	80030b6 <_malloc_r+0xf6>
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	42a2      	cmp	r2, r4
 8003048:	d12b      	bne.n	80030a2 <_malloc_r+0xe2>
 800304a:	2200      	movs	r2, #0
 800304c:	605a      	str	r2, [r3, #4]
 800304e:	e00f      	b.n	8003070 <_malloc_r+0xb0>
 8003050:	6822      	ldr	r2, [r4, #0]
 8003052:	1b52      	subs	r2, r2, r5
 8003054:	d41f      	bmi.n	8003096 <_malloc_r+0xd6>
 8003056:	2a0b      	cmp	r2, #11
 8003058:	d917      	bls.n	800308a <_malloc_r+0xca>
 800305a:	1961      	adds	r1, r4, r5
 800305c:	42a3      	cmp	r3, r4
 800305e:	6025      	str	r5, [r4, #0]
 8003060:	bf18      	it	ne
 8003062:	6059      	strne	r1, [r3, #4]
 8003064:	6863      	ldr	r3, [r4, #4]
 8003066:	bf08      	it	eq
 8003068:	f8c8 1000 	streq.w	r1, [r8]
 800306c:	5162      	str	r2, [r4, r5]
 800306e:	604b      	str	r3, [r1, #4]
 8003070:	4638      	mov	r0, r7
 8003072:	f104 060b 	add.w	r6, r4, #11
 8003076:	f000 f829 	bl	80030cc <__malloc_unlock>
 800307a:	f026 0607 	bic.w	r6, r6, #7
 800307e:	1d23      	adds	r3, r4, #4
 8003080:	1af2      	subs	r2, r6, r3
 8003082:	d0ae      	beq.n	8002fe2 <_malloc_r+0x22>
 8003084:	1b9b      	subs	r3, r3, r6
 8003086:	50a3      	str	r3, [r4, r2]
 8003088:	e7ab      	b.n	8002fe2 <_malloc_r+0x22>
 800308a:	42a3      	cmp	r3, r4
 800308c:	6862      	ldr	r2, [r4, #4]
 800308e:	d1dd      	bne.n	800304c <_malloc_r+0x8c>
 8003090:	f8c8 2000 	str.w	r2, [r8]
 8003094:	e7ec      	b.n	8003070 <_malloc_r+0xb0>
 8003096:	4623      	mov	r3, r4
 8003098:	6864      	ldr	r4, [r4, #4]
 800309a:	e7ac      	b.n	8002ff6 <_malloc_r+0x36>
 800309c:	4634      	mov	r4, r6
 800309e:	6876      	ldr	r6, [r6, #4]
 80030a0:	e7b4      	b.n	800300c <_malloc_r+0x4c>
 80030a2:	4613      	mov	r3, r2
 80030a4:	e7cc      	b.n	8003040 <_malloc_r+0x80>
 80030a6:	230c      	movs	r3, #12
 80030a8:	603b      	str	r3, [r7, #0]
 80030aa:	4638      	mov	r0, r7
 80030ac:	f000 f80e 	bl	80030cc <__malloc_unlock>
 80030b0:	e797      	b.n	8002fe2 <_malloc_r+0x22>
 80030b2:	6025      	str	r5, [r4, #0]
 80030b4:	e7dc      	b.n	8003070 <_malloc_r+0xb0>
 80030b6:	605b      	str	r3, [r3, #4]
 80030b8:	deff      	udf	#255	; 0xff
 80030ba:	bf00      	nop
 80030bc:	20000228 	.word	0x20000228

080030c0 <__malloc_lock>:
 80030c0:	4801      	ldr	r0, [pc, #4]	; (80030c8 <__malloc_lock+0x8>)
 80030c2:	f7ff bf0f 	b.w	8002ee4 <__retarget_lock_acquire_recursive>
 80030c6:	bf00      	nop
 80030c8:	20000224 	.word	0x20000224

080030cc <__malloc_unlock>:
 80030cc:	4801      	ldr	r0, [pc, #4]	; (80030d4 <__malloc_unlock+0x8>)
 80030ce:	f7ff bf0a 	b.w	8002ee6 <__retarget_lock_release_recursive>
 80030d2:	bf00      	nop
 80030d4:	20000224 	.word	0x20000224

080030d8 <__ssputs_r>:
 80030d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030dc:	688e      	ldr	r6, [r1, #8]
 80030de:	461f      	mov	r7, r3
 80030e0:	42be      	cmp	r6, r7
 80030e2:	680b      	ldr	r3, [r1, #0]
 80030e4:	4682      	mov	sl, r0
 80030e6:	460c      	mov	r4, r1
 80030e8:	4690      	mov	r8, r2
 80030ea:	d82c      	bhi.n	8003146 <__ssputs_r+0x6e>
 80030ec:	898a      	ldrh	r2, [r1, #12]
 80030ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80030f2:	d026      	beq.n	8003142 <__ssputs_r+0x6a>
 80030f4:	6965      	ldr	r5, [r4, #20]
 80030f6:	6909      	ldr	r1, [r1, #16]
 80030f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80030fc:	eba3 0901 	sub.w	r9, r3, r1
 8003100:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003104:	1c7b      	adds	r3, r7, #1
 8003106:	444b      	add	r3, r9
 8003108:	106d      	asrs	r5, r5, #1
 800310a:	429d      	cmp	r5, r3
 800310c:	bf38      	it	cc
 800310e:	461d      	movcc	r5, r3
 8003110:	0553      	lsls	r3, r2, #21
 8003112:	d527      	bpl.n	8003164 <__ssputs_r+0x8c>
 8003114:	4629      	mov	r1, r5
 8003116:	f7ff ff53 	bl	8002fc0 <_malloc_r>
 800311a:	4606      	mov	r6, r0
 800311c:	b360      	cbz	r0, 8003178 <__ssputs_r+0xa0>
 800311e:	6921      	ldr	r1, [r4, #16]
 8003120:	464a      	mov	r2, r9
 8003122:	f000 faeb 	bl	80036fc <memcpy>
 8003126:	89a3      	ldrh	r3, [r4, #12]
 8003128:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800312c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003130:	81a3      	strh	r3, [r4, #12]
 8003132:	6126      	str	r6, [r4, #16]
 8003134:	6165      	str	r5, [r4, #20]
 8003136:	444e      	add	r6, r9
 8003138:	eba5 0509 	sub.w	r5, r5, r9
 800313c:	6026      	str	r6, [r4, #0]
 800313e:	60a5      	str	r5, [r4, #8]
 8003140:	463e      	mov	r6, r7
 8003142:	42be      	cmp	r6, r7
 8003144:	d900      	bls.n	8003148 <__ssputs_r+0x70>
 8003146:	463e      	mov	r6, r7
 8003148:	6820      	ldr	r0, [r4, #0]
 800314a:	4632      	mov	r2, r6
 800314c:	4641      	mov	r1, r8
 800314e:	f000 faab 	bl	80036a8 <memmove>
 8003152:	68a3      	ldr	r3, [r4, #8]
 8003154:	1b9b      	subs	r3, r3, r6
 8003156:	60a3      	str	r3, [r4, #8]
 8003158:	6823      	ldr	r3, [r4, #0]
 800315a:	4433      	add	r3, r6
 800315c:	6023      	str	r3, [r4, #0]
 800315e:	2000      	movs	r0, #0
 8003160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003164:	462a      	mov	r2, r5
 8003166:	f000 fad7 	bl	8003718 <_realloc_r>
 800316a:	4606      	mov	r6, r0
 800316c:	2800      	cmp	r0, #0
 800316e:	d1e0      	bne.n	8003132 <__ssputs_r+0x5a>
 8003170:	6921      	ldr	r1, [r4, #16]
 8003172:	4650      	mov	r0, sl
 8003174:	f7ff feb8 	bl	8002ee8 <_free_r>
 8003178:	230c      	movs	r3, #12
 800317a:	f8ca 3000 	str.w	r3, [sl]
 800317e:	89a3      	ldrh	r3, [r4, #12]
 8003180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003184:	81a3      	strh	r3, [r4, #12]
 8003186:	f04f 30ff 	mov.w	r0, #4294967295
 800318a:	e7e9      	b.n	8003160 <__ssputs_r+0x88>

0800318c <_svfiprintf_r>:
 800318c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003190:	4698      	mov	r8, r3
 8003192:	898b      	ldrh	r3, [r1, #12]
 8003194:	061b      	lsls	r3, r3, #24
 8003196:	b09d      	sub	sp, #116	; 0x74
 8003198:	4607      	mov	r7, r0
 800319a:	460d      	mov	r5, r1
 800319c:	4614      	mov	r4, r2
 800319e:	d50e      	bpl.n	80031be <_svfiprintf_r+0x32>
 80031a0:	690b      	ldr	r3, [r1, #16]
 80031a2:	b963      	cbnz	r3, 80031be <_svfiprintf_r+0x32>
 80031a4:	2140      	movs	r1, #64	; 0x40
 80031a6:	f7ff ff0b 	bl	8002fc0 <_malloc_r>
 80031aa:	6028      	str	r0, [r5, #0]
 80031ac:	6128      	str	r0, [r5, #16]
 80031ae:	b920      	cbnz	r0, 80031ba <_svfiprintf_r+0x2e>
 80031b0:	230c      	movs	r3, #12
 80031b2:	603b      	str	r3, [r7, #0]
 80031b4:	f04f 30ff 	mov.w	r0, #4294967295
 80031b8:	e0d0      	b.n	800335c <_svfiprintf_r+0x1d0>
 80031ba:	2340      	movs	r3, #64	; 0x40
 80031bc:	616b      	str	r3, [r5, #20]
 80031be:	2300      	movs	r3, #0
 80031c0:	9309      	str	r3, [sp, #36]	; 0x24
 80031c2:	2320      	movs	r3, #32
 80031c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80031c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80031cc:	2330      	movs	r3, #48	; 0x30
 80031ce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003374 <_svfiprintf_r+0x1e8>
 80031d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80031d6:	f04f 0901 	mov.w	r9, #1
 80031da:	4623      	mov	r3, r4
 80031dc:	469a      	mov	sl, r3
 80031de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031e2:	b10a      	cbz	r2, 80031e8 <_svfiprintf_r+0x5c>
 80031e4:	2a25      	cmp	r2, #37	; 0x25
 80031e6:	d1f9      	bne.n	80031dc <_svfiprintf_r+0x50>
 80031e8:	ebba 0b04 	subs.w	fp, sl, r4
 80031ec:	d00b      	beq.n	8003206 <_svfiprintf_r+0x7a>
 80031ee:	465b      	mov	r3, fp
 80031f0:	4622      	mov	r2, r4
 80031f2:	4629      	mov	r1, r5
 80031f4:	4638      	mov	r0, r7
 80031f6:	f7ff ff6f 	bl	80030d8 <__ssputs_r>
 80031fa:	3001      	adds	r0, #1
 80031fc:	f000 80a9 	beq.w	8003352 <_svfiprintf_r+0x1c6>
 8003200:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003202:	445a      	add	r2, fp
 8003204:	9209      	str	r2, [sp, #36]	; 0x24
 8003206:	f89a 3000 	ldrb.w	r3, [sl]
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 80a1 	beq.w	8003352 <_svfiprintf_r+0x1c6>
 8003210:	2300      	movs	r3, #0
 8003212:	f04f 32ff 	mov.w	r2, #4294967295
 8003216:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800321a:	f10a 0a01 	add.w	sl, sl, #1
 800321e:	9304      	str	r3, [sp, #16]
 8003220:	9307      	str	r3, [sp, #28]
 8003222:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003226:	931a      	str	r3, [sp, #104]	; 0x68
 8003228:	4654      	mov	r4, sl
 800322a:	2205      	movs	r2, #5
 800322c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003230:	4850      	ldr	r0, [pc, #320]	; (8003374 <_svfiprintf_r+0x1e8>)
 8003232:	f7fc ffd5 	bl	80001e0 <memchr>
 8003236:	9a04      	ldr	r2, [sp, #16]
 8003238:	b9d8      	cbnz	r0, 8003272 <_svfiprintf_r+0xe6>
 800323a:	06d0      	lsls	r0, r2, #27
 800323c:	bf44      	itt	mi
 800323e:	2320      	movmi	r3, #32
 8003240:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003244:	0711      	lsls	r1, r2, #28
 8003246:	bf44      	itt	mi
 8003248:	232b      	movmi	r3, #43	; 0x2b
 800324a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800324e:	f89a 3000 	ldrb.w	r3, [sl]
 8003252:	2b2a      	cmp	r3, #42	; 0x2a
 8003254:	d015      	beq.n	8003282 <_svfiprintf_r+0xf6>
 8003256:	9a07      	ldr	r2, [sp, #28]
 8003258:	4654      	mov	r4, sl
 800325a:	2000      	movs	r0, #0
 800325c:	f04f 0c0a 	mov.w	ip, #10
 8003260:	4621      	mov	r1, r4
 8003262:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003266:	3b30      	subs	r3, #48	; 0x30
 8003268:	2b09      	cmp	r3, #9
 800326a:	d94d      	bls.n	8003308 <_svfiprintf_r+0x17c>
 800326c:	b1b0      	cbz	r0, 800329c <_svfiprintf_r+0x110>
 800326e:	9207      	str	r2, [sp, #28]
 8003270:	e014      	b.n	800329c <_svfiprintf_r+0x110>
 8003272:	eba0 0308 	sub.w	r3, r0, r8
 8003276:	fa09 f303 	lsl.w	r3, r9, r3
 800327a:	4313      	orrs	r3, r2
 800327c:	9304      	str	r3, [sp, #16]
 800327e:	46a2      	mov	sl, r4
 8003280:	e7d2      	b.n	8003228 <_svfiprintf_r+0x9c>
 8003282:	9b03      	ldr	r3, [sp, #12]
 8003284:	1d19      	adds	r1, r3, #4
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	9103      	str	r1, [sp, #12]
 800328a:	2b00      	cmp	r3, #0
 800328c:	bfbb      	ittet	lt
 800328e:	425b      	neglt	r3, r3
 8003290:	f042 0202 	orrlt.w	r2, r2, #2
 8003294:	9307      	strge	r3, [sp, #28]
 8003296:	9307      	strlt	r3, [sp, #28]
 8003298:	bfb8      	it	lt
 800329a:	9204      	strlt	r2, [sp, #16]
 800329c:	7823      	ldrb	r3, [r4, #0]
 800329e:	2b2e      	cmp	r3, #46	; 0x2e
 80032a0:	d10c      	bne.n	80032bc <_svfiprintf_r+0x130>
 80032a2:	7863      	ldrb	r3, [r4, #1]
 80032a4:	2b2a      	cmp	r3, #42	; 0x2a
 80032a6:	d134      	bne.n	8003312 <_svfiprintf_r+0x186>
 80032a8:	9b03      	ldr	r3, [sp, #12]
 80032aa:	1d1a      	adds	r2, r3, #4
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	9203      	str	r2, [sp, #12]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	bfb8      	it	lt
 80032b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80032b8:	3402      	adds	r4, #2
 80032ba:	9305      	str	r3, [sp, #20]
 80032bc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003384 <_svfiprintf_r+0x1f8>
 80032c0:	7821      	ldrb	r1, [r4, #0]
 80032c2:	2203      	movs	r2, #3
 80032c4:	4650      	mov	r0, sl
 80032c6:	f7fc ff8b 	bl	80001e0 <memchr>
 80032ca:	b138      	cbz	r0, 80032dc <_svfiprintf_r+0x150>
 80032cc:	9b04      	ldr	r3, [sp, #16]
 80032ce:	eba0 000a 	sub.w	r0, r0, sl
 80032d2:	2240      	movs	r2, #64	; 0x40
 80032d4:	4082      	lsls	r2, r0
 80032d6:	4313      	orrs	r3, r2
 80032d8:	3401      	adds	r4, #1
 80032da:	9304      	str	r3, [sp, #16]
 80032dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032e0:	4825      	ldr	r0, [pc, #148]	; (8003378 <_svfiprintf_r+0x1ec>)
 80032e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80032e6:	2206      	movs	r2, #6
 80032e8:	f7fc ff7a 	bl	80001e0 <memchr>
 80032ec:	2800      	cmp	r0, #0
 80032ee:	d038      	beq.n	8003362 <_svfiprintf_r+0x1d6>
 80032f0:	4b22      	ldr	r3, [pc, #136]	; (800337c <_svfiprintf_r+0x1f0>)
 80032f2:	bb1b      	cbnz	r3, 800333c <_svfiprintf_r+0x1b0>
 80032f4:	9b03      	ldr	r3, [sp, #12]
 80032f6:	3307      	adds	r3, #7
 80032f8:	f023 0307 	bic.w	r3, r3, #7
 80032fc:	3308      	adds	r3, #8
 80032fe:	9303      	str	r3, [sp, #12]
 8003300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003302:	4433      	add	r3, r6
 8003304:	9309      	str	r3, [sp, #36]	; 0x24
 8003306:	e768      	b.n	80031da <_svfiprintf_r+0x4e>
 8003308:	fb0c 3202 	mla	r2, ip, r2, r3
 800330c:	460c      	mov	r4, r1
 800330e:	2001      	movs	r0, #1
 8003310:	e7a6      	b.n	8003260 <_svfiprintf_r+0xd4>
 8003312:	2300      	movs	r3, #0
 8003314:	3401      	adds	r4, #1
 8003316:	9305      	str	r3, [sp, #20]
 8003318:	4619      	mov	r1, r3
 800331a:	f04f 0c0a 	mov.w	ip, #10
 800331e:	4620      	mov	r0, r4
 8003320:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003324:	3a30      	subs	r2, #48	; 0x30
 8003326:	2a09      	cmp	r2, #9
 8003328:	d903      	bls.n	8003332 <_svfiprintf_r+0x1a6>
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0c6      	beq.n	80032bc <_svfiprintf_r+0x130>
 800332e:	9105      	str	r1, [sp, #20]
 8003330:	e7c4      	b.n	80032bc <_svfiprintf_r+0x130>
 8003332:	fb0c 2101 	mla	r1, ip, r1, r2
 8003336:	4604      	mov	r4, r0
 8003338:	2301      	movs	r3, #1
 800333a:	e7f0      	b.n	800331e <_svfiprintf_r+0x192>
 800333c:	ab03      	add	r3, sp, #12
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	462a      	mov	r2, r5
 8003342:	4b0f      	ldr	r3, [pc, #60]	; (8003380 <_svfiprintf_r+0x1f4>)
 8003344:	a904      	add	r1, sp, #16
 8003346:	4638      	mov	r0, r7
 8003348:	f3af 8000 	nop.w
 800334c:	1c42      	adds	r2, r0, #1
 800334e:	4606      	mov	r6, r0
 8003350:	d1d6      	bne.n	8003300 <_svfiprintf_r+0x174>
 8003352:	89ab      	ldrh	r3, [r5, #12]
 8003354:	065b      	lsls	r3, r3, #25
 8003356:	f53f af2d 	bmi.w	80031b4 <_svfiprintf_r+0x28>
 800335a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800335c:	b01d      	add	sp, #116	; 0x74
 800335e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003362:	ab03      	add	r3, sp, #12
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	462a      	mov	r2, r5
 8003368:	4b05      	ldr	r3, [pc, #20]	; (8003380 <_svfiprintf_r+0x1f4>)
 800336a:	a904      	add	r1, sp, #16
 800336c:	4638      	mov	r0, r7
 800336e:	f000 f879 	bl	8003464 <_printf_i>
 8003372:	e7eb      	b.n	800334c <_svfiprintf_r+0x1c0>
 8003374:	08003800 	.word	0x08003800
 8003378:	0800380a 	.word	0x0800380a
 800337c:	00000000 	.word	0x00000000
 8003380:	080030d9 	.word	0x080030d9
 8003384:	08003806 	.word	0x08003806

08003388 <_printf_common>:
 8003388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800338c:	4616      	mov	r6, r2
 800338e:	4699      	mov	r9, r3
 8003390:	688a      	ldr	r2, [r1, #8]
 8003392:	690b      	ldr	r3, [r1, #16]
 8003394:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003398:	4293      	cmp	r3, r2
 800339a:	bfb8      	it	lt
 800339c:	4613      	movlt	r3, r2
 800339e:	6033      	str	r3, [r6, #0]
 80033a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80033a4:	4607      	mov	r7, r0
 80033a6:	460c      	mov	r4, r1
 80033a8:	b10a      	cbz	r2, 80033ae <_printf_common+0x26>
 80033aa:	3301      	adds	r3, #1
 80033ac:	6033      	str	r3, [r6, #0]
 80033ae:	6823      	ldr	r3, [r4, #0]
 80033b0:	0699      	lsls	r1, r3, #26
 80033b2:	bf42      	ittt	mi
 80033b4:	6833      	ldrmi	r3, [r6, #0]
 80033b6:	3302      	addmi	r3, #2
 80033b8:	6033      	strmi	r3, [r6, #0]
 80033ba:	6825      	ldr	r5, [r4, #0]
 80033bc:	f015 0506 	ands.w	r5, r5, #6
 80033c0:	d106      	bne.n	80033d0 <_printf_common+0x48>
 80033c2:	f104 0a19 	add.w	sl, r4, #25
 80033c6:	68e3      	ldr	r3, [r4, #12]
 80033c8:	6832      	ldr	r2, [r6, #0]
 80033ca:	1a9b      	subs	r3, r3, r2
 80033cc:	42ab      	cmp	r3, r5
 80033ce:	dc26      	bgt.n	800341e <_printf_common+0x96>
 80033d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80033d4:	1e13      	subs	r3, r2, #0
 80033d6:	6822      	ldr	r2, [r4, #0]
 80033d8:	bf18      	it	ne
 80033da:	2301      	movne	r3, #1
 80033dc:	0692      	lsls	r2, r2, #26
 80033de:	d42b      	bmi.n	8003438 <_printf_common+0xb0>
 80033e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033e4:	4649      	mov	r1, r9
 80033e6:	4638      	mov	r0, r7
 80033e8:	47c0      	blx	r8
 80033ea:	3001      	adds	r0, #1
 80033ec:	d01e      	beq.n	800342c <_printf_common+0xa4>
 80033ee:	6823      	ldr	r3, [r4, #0]
 80033f0:	6922      	ldr	r2, [r4, #16]
 80033f2:	f003 0306 	and.w	r3, r3, #6
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	bf02      	ittt	eq
 80033fa:	68e5      	ldreq	r5, [r4, #12]
 80033fc:	6833      	ldreq	r3, [r6, #0]
 80033fe:	1aed      	subeq	r5, r5, r3
 8003400:	68a3      	ldr	r3, [r4, #8]
 8003402:	bf0c      	ite	eq
 8003404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003408:	2500      	movne	r5, #0
 800340a:	4293      	cmp	r3, r2
 800340c:	bfc4      	itt	gt
 800340e:	1a9b      	subgt	r3, r3, r2
 8003410:	18ed      	addgt	r5, r5, r3
 8003412:	2600      	movs	r6, #0
 8003414:	341a      	adds	r4, #26
 8003416:	42b5      	cmp	r5, r6
 8003418:	d11a      	bne.n	8003450 <_printf_common+0xc8>
 800341a:	2000      	movs	r0, #0
 800341c:	e008      	b.n	8003430 <_printf_common+0xa8>
 800341e:	2301      	movs	r3, #1
 8003420:	4652      	mov	r2, sl
 8003422:	4649      	mov	r1, r9
 8003424:	4638      	mov	r0, r7
 8003426:	47c0      	blx	r8
 8003428:	3001      	adds	r0, #1
 800342a:	d103      	bne.n	8003434 <_printf_common+0xac>
 800342c:	f04f 30ff 	mov.w	r0, #4294967295
 8003430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003434:	3501      	adds	r5, #1
 8003436:	e7c6      	b.n	80033c6 <_printf_common+0x3e>
 8003438:	18e1      	adds	r1, r4, r3
 800343a:	1c5a      	adds	r2, r3, #1
 800343c:	2030      	movs	r0, #48	; 0x30
 800343e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003442:	4422      	add	r2, r4
 8003444:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003448:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800344c:	3302      	adds	r3, #2
 800344e:	e7c7      	b.n	80033e0 <_printf_common+0x58>
 8003450:	2301      	movs	r3, #1
 8003452:	4622      	mov	r2, r4
 8003454:	4649      	mov	r1, r9
 8003456:	4638      	mov	r0, r7
 8003458:	47c0      	blx	r8
 800345a:	3001      	adds	r0, #1
 800345c:	d0e6      	beq.n	800342c <_printf_common+0xa4>
 800345e:	3601      	adds	r6, #1
 8003460:	e7d9      	b.n	8003416 <_printf_common+0x8e>
	...

08003464 <_printf_i>:
 8003464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003468:	7e0f      	ldrb	r7, [r1, #24]
 800346a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800346c:	2f78      	cmp	r7, #120	; 0x78
 800346e:	4691      	mov	r9, r2
 8003470:	4680      	mov	r8, r0
 8003472:	460c      	mov	r4, r1
 8003474:	469a      	mov	sl, r3
 8003476:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800347a:	d807      	bhi.n	800348c <_printf_i+0x28>
 800347c:	2f62      	cmp	r7, #98	; 0x62
 800347e:	d80a      	bhi.n	8003496 <_printf_i+0x32>
 8003480:	2f00      	cmp	r7, #0
 8003482:	f000 80d4 	beq.w	800362e <_printf_i+0x1ca>
 8003486:	2f58      	cmp	r7, #88	; 0x58
 8003488:	f000 80c0 	beq.w	800360c <_printf_i+0x1a8>
 800348c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003490:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003494:	e03a      	b.n	800350c <_printf_i+0xa8>
 8003496:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800349a:	2b15      	cmp	r3, #21
 800349c:	d8f6      	bhi.n	800348c <_printf_i+0x28>
 800349e:	a101      	add	r1, pc, #4	; (adr r1, 80034a4 <_printf_i+0x40>)
 80034a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80034a4:	080034fd 	.word	0x080034fd
 80034a8:	08003511 	.word	0x08003511
 80034ac:	0800348d 	.word	0x0800348d
 80034b0:	0800348d 	.word	0x0800348d
 80034b4:	0800348d 	.word	0x0800348d
 80034b8:	0800348d 	.word	0x0800348d
 80034bc:	08003511 	.word	0x08003511
 80034c0:	0800348d 	.word	0x0800348d
 80034c4:	0800348d 	.word	0x0800348d
 80034c8:	0800348d 	.word	0x0800348d
 80034cc:	0800348d 	.word	0x0800348d
 80034d0:	08003615 	.word	0x08003615
 80034d4:	0800353d 	.word	0x0800353d
 80034d8:	080035cf 	.word	0x080035cf
 80034dc:	0800348d 	.word	0x0800348d
 80034e0:	0800348d 	.word	0x0800348d
 80034e4:	08003637 	.word	0x08003637
 80034e8:	0800348d 	.word	0x0800348d
 80034ec:	0800353d 	.word	0x0800353d
 80034f0:	0800348d 	.word	0x0800348d
 80034f4:	0800348d 	.word	0x0800348d
 80034f8:	080035d7 	.word	0x080035d7
 80034fc:	682b      	ldr	r3, [r5, #0]
 80034fe:	1d1a      	adds	r2, r3, #4
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	602a      	str	r2, [r5, #0]
 8003504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003508:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800350c:	2301      	movs	r3, #1
 800350e:	e09f      	b.n	8003650 <_printf_i+0x1ec>
 8003510:	6820      	ldr	r0, [r4, #0]
 8003512:	682b      	ldr	r3, [r5, #0]
 8003514:	0607      	lsls	r7, r0, #24
 8003516:	f103 0104 	add.w	r1, r3, #4
 800351a:	6029      	str	r1, [r5, #0]
 800351c:	d501      	bpl.n	8003522 <_printf_i+0xbe>
 800351e:	681e      	ldr	r6, [r3, #0]
 8003520:	e003      	b.n	800352a <_printf_i+0xc6>
 8003522:	0646      	lsls	r6, r0, #25
 8003524:	d5fb      	bpl.n	800351e <_printf_i+0xba>
 8003526:	f9b3 6000 	ldrsh.w	r6, [r3]
 800352a:	2e00      	cmp	r6, #0
 800352c:	da03      	bge.n	8003536 <_printf_i+0xd2>
 800352e:	232d      	movs	r3, #45	; 0x2d
 8003530:	4276      	negs	r6, r6
 8003532:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003536:	485a      	ldr	r0, [pc, #360]	; (80036a0 <_printf_i+0x23c>)
 8003538:	230a      	movs	r3, #10
 800353a:	e012      	b.n	8003562 <_printf_i+0xfe>
 800353c:	682b      	ldr	r3, [r5, #0]
 800353e:	6820      	ldr	r0, [r4, #0]
 8003540:	1d19      	adds	r1, r3, #4
 8003542:	6029      	str	r1, [r5, #0]
 8003544:	0605      	lsls	r5, r0, #24
 8003546:	d501      	bpl.n	800354c <_printf_i+0xe8>
 8003548:	681e      	ldr	r6, [r3, #0]
 800354a:	e002      	b.n	8003552 <_printf_i+0xee>
 800354c:	0641      	lsls	r1, r0, #25
 800354e:	d5fb      	bpl.n	8003548 <_printf_i+0xe4>
 8003550:	881e      	ldrh	r6, [r3, #0]
 8003552:	4853      	ldr	r0, [pc, #332]	; (80036a0 <_printf_i+0x23c>)
 8003554:	2f6f      	cmp	r7, #111	; 0x6f
 8003556:	bf0c      	ite	eq
 8003558:	2308      	moveq	r3, #8
 800355a:	230a      	movne	r3, #10
 800355c:	2100      	movs	r1, #0
 800355e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003562:	6865      	ldr	r5, [r4, #4]
 8003564:	60a5      	str	r5, [r4, #8]
 8003566:	2d00      	cmp	r5, #0
 8003568:	bfa2      	ittt	ge
 800356a:	6821      	ldrge	r1, [r4, #0]
 800356c:	f021 0104 	bicge.w	r1, r1, #4
 8003570:	6021      	strge	r1, [r4, #0]
 8003572:	b90e      	cbnz	r6, 8003578 <_printf_i+0x114>
 8003574:	2d00      	cmp	r5, #0
 8003576:	d04b      	beq.n	8003610 <_printf_i+0x1ac>
 8003578:	4615      	mov	r5, r2
 800357a:	fbb6 f1f3 	udiv	r1, r6, r3
 800357e:	fb03 6711 	mls	r7, r3, r1, r6
 8003582:	5dc7      	ldrb	r7, [r0, r7]
 8003584:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003588:	4637      	mov	r7, r6
 800358a:	42bb      	cmp	r3, r7
 800358c:	460e      	mov	r6, r1
 800358e:	d9f4      	bls.n	800357a <_printf_i+0x116>
 8003590:	2b08      	cmp	r3, #8
 8003592:	d10b      	bne.n	80035ac <_printf_i+0x148>
 8003594:	6823      	ldr	r3, [r4, #0]
 8003596:	07de      	lsls	r6, r3, #31
 8003598:	d508      	bpl.n	80035ac <_printf_i+0x148>
 800359a:	6923      	ldr	r3, [r4, #16]
 800359c:	6861      	ldr	r1, [r4, #4]
 800359e:	4299      	cmp	r1, r3
 80035a0:	bfde      	ittt	le
 80035a2:	2330      	movle	r3, #48	; 0x30
 80035a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80035a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80035ac:	1b52      	subs	r2, r2, r5
 80035ae:	6122      	str	r2, [r4, #16]
 80035b0:	f8cd a000 	str.w	sl, [sp]
 80035b4:	464b      	mov	r3, r9
 80035b6:	aa03      	add	r2, sp, #12
 80035b8:	4621      	mov	r1, r4
 80035ba:	4640      	mov	r0, r8
 80035bc:	f7ff fee4 	bl	8003388 <_printf_common>
 80035c0:	3001      	adds	r0, #1
 80035c2:	d14a      	bne.n	800365a <_printf_i+0x1f6>
 80035c4:	f04f 30ff 	mov.w	r0, #4294967295
 80035c8:	b004      	add	sp, #16
 80035ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035ce:	6823      	ldr	r3, [r4, #0]
 80035d0:	f043 0320 	orr.w	r3, r3, #32
 80035d4:	6023      	str	r3, [r4, #0]
 80035d6:	4833      	ldr	r0, [pc, #204]	; (80036a4 <_printf_i+0x240>)
 80035d8:	2778      	movs	r7, #120	; 0x78
 80035da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80035de:	6823      	ldr	r3, [r4, #0]
 80035e0:	6829      	ldr	r1, [r5, #0]
 80035e2:	061f      	lsls	r7, r3, #24
 80035e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80035e8:	d402      	bmi.n	80035f0 <_printf_i+0x18c>
 80035ea:	065f      	lsls	r7, r3, #25
 80035ec:	bf48      	it	mi
 80035ee:	b2b6      	uxthmi	r6, r6
 80035f0:	07df      	lsls	r7, r3, #31
 80035f2:	bf48      	it	mi
 80035f4:	f043 0320 	orrmi.w	r3, r3, #32
 80035f8:	6029      	str	r1, [r5, #0]
 80035fa:	bf48      	it	mi
 80035fc:	6023      	strmi	r3, [r4, #0]
 80035fe:	b91e      	cbnz	r6, 8003608 <_printf_i+0x1a4>
 8003600:	6823      	ldr	r3, [r4, #0]
 8003602:	f023 0320 	bic.w	r3, r3, #32
 8003606:	6023      	str	r3, [r4, #0]
 8003608:	2310      	movs	r3, #16
 800360a:	e7a7      	b.n	800355c <_printf_i+0xf8>
 800360c:	4824      	ldr	r0, [pc, #144]	; (80036a0 <_printf_i+0x23c>)
 800360e:	e7e4      	b.n	80035da <_printf_i+0x176>
 8003610:	4615      	mov	r5, r2
 8003612:	e7bd      	b.n	8003590 <_printf_i+0x12c>
 8003614:	682b      	ldr	r3, [r5, #0]
 8003616:	6826      	ldr	r6, [r4, #0]
 8003618:	6961      	ldr	r1, [r4, #20]
 800361a:	1d18      	adds	r0, r3, #4
 800361c:	6028      	str	r0, [r5, #0]
 800361e:	0635      	lsls	r5, r6, #24
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	d501      	bpl.n	8003628 <_printf_i+0x1c4>
 8003624:	6019      	str	r1, [r3, #0]
 8003626:	e002      	b.n	800362e <_printf_i+0x1ca>
 8003628:	0670      	lsls	r0, r6, #25
 800362a:	d5fb      	bpl.n	8003624 <_printf_i+0x1c0>
 800362c:	8019      	strh	r1, [r3, #0]
 800362e:	2300      	movs	r3, #0
 8003630:	6123      	str	r3, [r4, #16]
 8003632:	4615      	mov	r5, r2
 8003634:	e7bc      	b.n	80035b0 <_printf_i+0x14c>
 8003636:	682b      	ldr	r3, [r5, #0]
 8003638:	1d1a      	adds	r2, r3, #4
 800363a:	602a      	str	r2, [r5, #0]
 800363c:	681d      	ldr	r5, [r3, #0]
 800363e:	6862      	ldr	r2, [r4, #4]
 8003640:	2100      	movs	r1, #0
 8003642:	4628      	mov	r0, r5
 8003644:	f7fc fdcc 	bl	80001e0 <memchr>
 8003648:	b108      	cbz	r0, 800364e <_printf_i+0x1ea>
 800364a:	1b40      	subs	r0, r0, r5
 800364c:	6060      	str	r0, [r4, #4]
 800364e:	6863      	ldr	r3, [r4, #4]
 8003650:	6123      	str	r3, [r4, #16]
 8003652:	2300      	movs	r3, #0
 8003654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003658:	e7aa      	b.n	80035b0 <_printf_i+0x14c>
 800365a:	6923      	ldr	r3, [r4, #16]
 800365c:	462a      	mov	r2, r5
 800365e:	4649      	mov	r1, r9
 8003660:	4640      	mov	r0, r8
 8003662:	47d0      	blx	sl
 8003664:	3001      	adds	r0, #1
 8003666:	d0ad      	beq.n	80035c4 <_printf_i+0x160>
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	079b      	lsls	r3, r3, #30
 800366c:	d413      	bmi.n	8003696 <_printf_i+0x232>
 800366e:	68e0      	ldr	r0, [r4, #12]
 8003670:	9b03      	ldr	r3, [sp, #12]
 8003672:	4298      	cmp	r0, r3
 8003674:	bfb8      	it	lt
 8003676:	4618      	movlt	r0, r3
 8003678:	e7a6      	b.n	80035c8 <_printf_i+0x164>
 800367a:	2301      	movs	r3, #1
 800367c:	4632      	mov	r2, r6
 800367e:	4649      	mov	r1, r9
 8003680:	4640      	mov	r0, r8
 8003682:	47d0      	blx	sl
 8003684:	3001      	adds	r0, #1
 8003686:	d09d      	beq.n	80035c4 <_printf_i+0x160>
 8003688:	3501      	adds	r5, #1
 800368a:	68e3      	ldr	r3, [r4, #12]
 800368c:	9903      	ldr	r1, [sp, #12]
 800368e:	1a5b      	subs	r3, r3, r1
 8003690:	42ab      	cmp	r3, r5
 8003692:	dcf2      	bgt.n	800367a <_printf_i+0x216>
 8003694:	e7eb      	b.n	800366e <_printf_i+0x20a>
 8003696:	2500      	movs	r5, #0
 8003698:	f104 0619 	add.w	r6, r4, #25
 800369c:	e7f5      	b.n	800368a <_printf_i+0x226>
 800369e:	bf00      	nop
 80036a0:	08003811 	.word	0x08003811
 80036a4:	08003822 	.word	0x08003822

080036a8 <memmove>:
 80036a8:	4288      	cmp	r0, r1
 80036aa:	b510      	push	{r4, lr}
 80036ac:	eb01 0402 	add.w	r4, r1, r2
 80036b0:	d902      	bls.n	80036b8 <memmove+0x10>
 80036b2:	4284      	cmp	r4, r0
 80036b4:	4623      	mov	r3, r4
 80036b6:	d807      	bhi.n	80036c8 <memmove+0x20>
 80036b8:	1e43      	subs	r3, r0, #1
 80036ba:	42a1      	cmp	r1, r4
 80036bc:	d008      	beq.n	80036d0 <memmove+0x28>
 80036be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80036c6:	e7f8      	b.n	80036ba <memmove+0x12>
 80036c8:	4402      	add	r2, r0
 80036ca:	4601      	mov	r1, r0
 80036cc:	428a      	cmp	r2, r1
 80036ce:	d100      	bne.n	80036d2 <memmove+0x2a>
 80036d0:	bd10      	pop	{r4, pc}
 80036d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80036d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80036da:	e7f7      	b.n	80036cc <memmove+0x24>

080036dc <_sbrk_r>:
 80036dc:	b538      	push	{r3, r4, r5, lr}
 80036de:	4d06      	ldr	r5, [pc, #24]	; (80036f8 <_sbrk_r+0x1c>)
 80036e0:	2300      	movs	r3, #0
 80036e2:	4604      	mov	r4, r0
 80036e4:	4608      	mov	r0, r1
 80036e6:	602b      	str	r3, [r5, #0]
 80036e8:	f7fd fa3a 	bl	8000b60 <_sbrk>
 80036ec:	1c43      	adds	r3, r0, #1
 80036ee:	d102      	bne.n	80036f6 <_sbrk_r+0x1a>
 80036f0:	682b      	ldr	r3, [r5, #0]
 80036f2:	b103      	cbz	r3, 80036f6 <_sbrk_r+0x1a>
 80036f4:	6023      	str	r3, [r4, #0]
 80036f6:	bd38      	pop	{r3, r4, r5, pc}
 80036f8:	20000220 	.word	0x20000220

080036fc <memcpy>:
 80036fc:	440a      	add	r2, r1
 80036fe:	4291      	cmp	r1, r2
 8003700:	f100 33ff 	add.w	r3, r0, #4294967295
 8003704:	d100      	bne.n	8003708 <memcpy+0xc>
 8003706:	4770      	bx	lr
 8003708:	b510      	push	{r4, lr}
 800370a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800370e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003712:	4291      	cmp	r1, r2
 8003714:	d1f9      	bne.n	800370a <memcpy+0xe>
 8003716:	bd10      	pop	{r4, pc}

08003718 <_realloc_r>:
 8003718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800371c:	4680      	mov	r8, r0
 800371e:	4614      	mov	r4, r2
 8003720:	460e      	mov	r6, r1
 8003722:	b921      	cbnz	r1, 800372e <_realloc_r+0x16>
 8003724:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003728:	4611      	mov	r1, r2
 800372a:	f7ff bc49 	b.w	8002fc0 <_malloc_r>
 800372e:	b92a      	cbnz	r2, 800373c <_realloc_r+0x24>
 8003730:	f7ff fbda 	bl	8002ee8 <_free_r>
 8003734:	4625      	mov	r5, r4
 8003736:	4628      	mov	r0, r5
 8003738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800373c:	f000 f81b 	bl	8003776 <_malloc_usable_size_r>
 8003740:	4284      	cmp	r4, r0
 8003742:	4607      	mov	r7, r0
 8003744:	d802      	bhi.n	800374c <_realloc_r+0x34>
 8003746:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800374a:	d812      	bhi.n	8003772 <_realloc_r+0x5a>
 800374c:	4621      	mov	r1, r4
 800374e:	4640      	mov	r0, r8
 8003750:	f7ff fc36 	bl	8002fc0 <_malloc_r>
 8003754:	4605      	mov	r5, r0
 8003756:	2800      	cmp	r0, #0
 8003758:	d0ed      	beq.n	8003736 <_realloc_r+0x1e>
 800375a:	42bc      	cmp	r4, r7
 800375c:	4622      	mov	r2, r4
 800375e:	4631      	mov	r1, r6
 8003760:	bf28      	it	cs
 8003762:	463a      	movcs	r2, r7
 8003764:	f7ff ffca 	bl	80036fc <memcpy>
 8003768:	4631      	mov	r1, r6
 800376a:	4640      	mov	r0, r8
 800376c:	f7ff fbbc 	bl	8002ee8 <_free_r>
 8003770:	e7e1      	b.n	8003736 <_realloc_r+0x1e>
 8003772:	4635      	mov	r5, r6
 8003774:	e7df      	b.n	8003736 <_realloc_r+0x1e>

08003776 <_malloc_usable_size_r>:
 8003776:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800377a:	1f18      	subs	r0, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	bfbc      	itt	lt
 8003780:	580b      	ldrlt	r3, [r1, r0]
 8003782:	18c0      	addlt	r0, r0, r3
 8003784:	4770      	bx	lr
	...

08003788 <_init>:
 8003788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800378a:	bf00      	nop
 800378c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800378e:	bc08      	pop	{r3}
 8003790:	469e      	mov	lr, r3
 8003792:	4770      	bx	lr

08003794 <_fini>:
 8003794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003796:	bf00      	nop
 8003798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800379a:	bc08      	pop	{r3}
 800379c:	469e      	mov	lr, r3
 800379e:	4770      	bx	lr
